type Query {
  promoCode(
    """The ID of the object"""
    id: ID!
  ): PromoCodeNode
  allPromoCodes(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, code: String, value: Int, label: String, referrerId: ID, referrer_FirstName_Icontains: String, resource: String, type: String): PromoCodeNodeConnection
  promoCodeByCode(code: String!): PromoCodeNode
  menuItem(
    """The ID of the object"""
    id: ID!
  ): MenuItemNode
  allMenuItems(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String, code: String, operator: BillingMenuItemOperatorChoices, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, child_Isnull: Boolean, search: String): MenuItemNodeConnection
  quote(
    """The ID of the object"""
    id: ID!
  ): QuoteNode
  allQuotes(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, project_In: [ID], project_Team_BillingEmail_Iexact: String, search: String): QuoteNodeConnection
  workHours(
    """The ID of the object"""
    id: ID!
  ): WorkHoursNode
  allWorkHours(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, task: ID, associate: ID, log: String, log_Icontains: String, task_UserTeam: ID, workType: String, workType_In: [String], paidOut: Boolean, sentInvoice: Boolean, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime): WorkHoursNodeConnection
  workHoursByCycle(associateId: UUID, teamId: UUID, userId: UUID, start: DateTime!, end: DateTime!, orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, task: ID, associate: ID, log: String, log_Icontains: String, task_UserTeam: ID, workType: String, workType_In: [String], paidOut: Boolean, sentInvoice: Boolean, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime): WorkHoursNodeConnection
  viewerCurrentWorkHour: WorkHoursNode
  emailList(
    """The ID of the object"""
    id: ID!
  ): EmailListNode
  allEmailLists(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, type: String, description: String): EmailListNodeConnection
  messageTemplate(
    """The ID of the object"""
    id: ID!
  ): MessageTemplateNode
  allMessageTemplates(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, goal: String, content: String, subject: String): MessageTemplateNodeConnection
  marketingChannel(
    """The ID of the object"""
    id: ID!
  ): MarketingChannelNode
  allMarketingChannels(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, label: String, value: Int, show: Boolean): MarketingChannelNodeConnection
  contactLog(
    """The ID of the object"""
    id: ID!
  ): ContactLogNode
  allContactLogs(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, email: String, dateSent: DateTime): ContactLogNodeConnection
  userTestimonial(
    """The ID of the object"""
    id: ID!
  ): UserTestimonialNode
  allUserTestimonials(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, user: ID, title: String, userFname: String, userLname: String): UserTestimonialNodeConnection
  userLead(
    """The ID of the object"""
    id: ID!
  ): UserLeadNode
  allUserLeads(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, email: String, email_Icontains: String, email_Istartswith: String, firstName: String, firstName_Icontains: String, lastName: String, lastName_Icontains: String, company: String, company_Icontains: String, startupSize: String): UserLeadNodeConnection
  marketingEmailLog(
    """The ID of the object"""
    id: ID!
  ): MarketingEmailLogNode
  allMarketingEmailLogs(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, recipient: ID, topic: MarketingMarketingEmailLogTopicChoices): MarketingEmailLogNodeConnection
  taskInterest(
    """The ID of the object"""
    id: ID!
  ): TaskInterestNode
  allTaskInterests(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, label: String, description: String, hubspotLabel: String): TaskInterestNodeConnection
  taskStatus(
    """The ID of the object"""
    id: ID!
  ): TaskStatusNode
  allTaskStatuses(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, status: String, status_In: [String], status_Icontains: String): TaskStatusNodeConnection
  taskType(
    """The ID of the object"""
    id: ID!
  ): TaskTypeNode
  allTaskType(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, type: String, visible: Boolean): TaskTypeNodeConnection
  taskDepartment(
    """The ID of the object"""
    id: ID!
  ): TaskDepartmentNode
  allTaskDepartments(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String): TaskDepartmentNodeConnection
  taskCategory(
    """The ID of the object"""
    id: ID!
  ): TaskCategoryNode
  allTaskCategories(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String): TaskCategoryNodeConnection
  task(
    """The ID of the object"""
    id: ID!
  ): TaskNode
  allTasks(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, title: String, title_Icontains: String, dueDate: DateTime, requestDate: DateTime, requester: ID, manager: ID, manager_Isnull: Boolean, enumStatus: String, enumStatus_In: [String], enumStatus_Icontains: String, status_Status: String, status_Status_In: [String], status_Status_Icontains: String, completedAt_Gte: DateTime, completedAt_Gt: DateTime, completedAt_Lte: DateTime, completedAt_Lt: DateTime, userTeam: ID, type: ID, associates: ID, associates_Isnull: Boolean, associates_In: [ID], projectLead: ID, projectLead_In: [ID], projectLead_Isnull: Boolean, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, dataSolution: String, billingStatus: String, qaStaff: ID, qaStaff_Isnull: Boolean, qaStaff_In: [ID], categories: ID, categories_Isnull: Boolean, categories_Name_Icontains: String, departments: ID, departments_Isnull: Boolean, departments_Name_Icontains: String, dataDeliveredQuantity_Gte: Int, dataDeliveredQuantity_Gt: Int, dataDeliveredQuantity_Lte: Int, dataDeliveredQuantity_Lt: Int, dataDeliveredQuantity_Isnull: Boolean, dataSampleDeliveredQuantity_Gte: Int, dataSampleDeliveredQuantity_Gt: Int, dataSampleDeliveredQuantity_Lte: Int, dataSampleDeliveredQuantity_Lt: Int, dataSampleDeliveredQuantity_Isnull: Boolean, projectType: String, projectType_Icontains: String, projectType_Isnull: Boolean, feedbacks_Isnull: Boolean, review_Isnull: Boolean, projectConfirmedAt_Gte: DateTime, projectConfirmedAt_Gt: DateTime, projectConfirmedAt_Lte: DateTime, projectConfirmedAt_Lt: DateTime, projectConfirmedAt: DateTime, projectConfirmedAt_Isnull: Boolean, projectDeliveredAt_Gte: DateTime, projectDeliveredAt_Gt: DateTime, projectDeliveredAt_Lte: DateTime, projectDeliveredAt_Lt: DateTime, projectDeliveredAt: DateTime, projectDeliveredAt_Isnull: Boolean, delegationFeedback_Isnull: Boolean, delegationImprovements_Isnull: Boolean, testing: Boolean, internal: Boolean, search: String): TaskNodeConnection
  viewerTasks(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, title: String, title_Icontains: String, dueDate: DateTime, requestDate: DateTime, requester: ID, manager: ID, manager_Isnull: Boolean, enumStatus: String, enumStatus_In: [String], enumStatus_Icontains: String, status_Status: String, status_Status_In: [String], status_Status_Icontains: String, completedAt_Gte: DateTime, completedAt_Gt: DateTime, completedAt_Lte: DateTime, completedAt_Lt: DateTime, userTeam: ID, type: ID, associates: ID, associates_Isnull: Boolean, associates_In: [ID], projectLead: ID, projectLead_In: [ID], projectLead_Isnull: Boolean, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, dataSolution: String, billingStatus: String, qaStaff: ID, qaStaff_Isnull: Boolean, qaStaff_In: [ID], categories: ID, categories_Isnull: Boolean, categories_Name_Icontains: String, departments: ID, departments_Isnull: Boolean, departments_Name_Icontains: String, dataDeliveredQuantity_Gte: Int, dataDeliveredQuantity_Gt: Int, dataDeliveredQuantity_Lte: Int, dataDeliveredQuantity_Lt: Int, dataDeliveredQuantity_Isnull: Boolean, dataSampleDeliveredQuantity_Gte: Int, dataSampleDeliveredQuantity_Gt: Int, dataSampleDeliveredQuantity_Lte: Int, dataSampleDeliveredQuantity_Lt: Int, dataSampleDeliveredQuantity_Isnull: Boolean, projectType: String, projectType_Icontains: String, projectType_Isnull: Boolean, feedbacks_Isnull: Boolean, review_Isnull: Boolean, projectConfirmedAt_Gte: DateTime, projectConfirmedAt_Gt: DateTime, projectConfirmedAt_Lte: DateTime, projectConfirmedAt_Lt: DateTime, projectConfirmedAt: DateTime, projectConfirmedAt_Isnull: Boolean, projectDeliveredAt_Gte: DateTime, projectDeliveredAt_Gt: DateTime, projectDeliveredAt_Lte: DateTime, projectDeliveredAt_Lt: DateTime, projectDeliveredAt: DateTime, projectDeliveredAt_Isnull: Boolean, delegationFeedback_Isnull: Boolean, delegationImprovements_Isnull: Boolean, testing: Boolean, internal: Boolean): TaskNodeConnection
  qaStaff(
    """The ID of the object"""
    id: ID!
  ): QAStaffNode
  allQaStaff(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, staffMember: ID, task: ID, isLead: Boolean): QAStaffNodeConnection
  recentlyCompletedTask(id: UUID!): TaskNode
  taskExpense(
    """The ID of the object"""
    id: ID!
  ): TaskExpenseNode
  allTaskexpenses(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, expenseItem: String, task: ID, task_UserTeam: ID, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime): TaskExpenseNodeConnection
  taskFile(
    """The ID of the object"""
    id: ID!
  ): TaskFileNode
  allTaskFiles(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, name: String, fileType: String, task: ID): TaskFileNodeConnection
  taskFeedback(
    """The ID of the object"""
    id: ID!
  ): TaskFeedbackNode
  allTaskFeedbacks(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, giver: ID, receiver: ID, task: ID, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, isComplete: Boolean): TaskFeedbackNodeConnection
  taskReview(
    """The ID of the object"""
    id: ID!
  ): TaskReviewNode
  allTaskReviews(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, task: ID, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, nps: Int, satisfactionRating: Int): TaskReviewNodeConnection
  project(
    """The ID of the object"""
    id: ID!
  ): ProjectNode
  allProjects(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, frequency: TasksProjectFrequencyChoices, team: ID, requester: ID, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, team_BillingEmail_Iexact: String, team_BillingEmail_Icontains: String, search: String): ProjectNodeConnection
  userProfile(
    """The ID of the object"""
    id: ID!
  ): UserProfileNode
  allUserProfiles(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, user: ID, user_FirstName: String, user_FirstName_Icontains: String, user_LastName: String, user_LastName_Icontains: String, user_Email: String, user_Email_Icontains: String, user_Groups: ID, user_Groups_In: [ID], address: String, city: String, country: String, phone: String, timezone: String, contactMode: String, billing: Boolean, auth0Id: String, profilePicture: String, onEmailList: Boolean, salary: Int, setupComplete: Boolean, title: String, titleDescription: String, birthDate: Date, status: ID, marketingChannel: ID, referredBy: ID, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, leadFlag: Boolean, surveyComplete: Boolean, department: String, department_Icontains: String, department_In: [String], satisfaction: String, satisfaction_Icontains: String, satisfaction_In: [String], engagement: String, engagement_Icontains: String, engagement_In: [String], contactOwner: ID, search: String): UserProfileNodeConnection
  industry(
    """The ID of the object"""
    id: ID!
  ): IndustryNode
  allIndustries(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, label: String, label_Icontains: String, label_Istartswith: String, value: Int, value_Icontains: Int): IndustryNodeConnection
  companyTag(
    """The ID of the object"""
    id: ID!
  ): CompanyTagNode
  allCompanyTags(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String, name_Istartswith: String, description: String, description_Icontains: String): CompanyTagNodeConnection
  stage(
    """The ID of the object"""
    id: ID!
  ): StageNode
  allStages(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, label: String, description: String, value: Int): StageNodeConnection
  team(
    """The ID of the object"""
    id: ID!
  ): TeamNode
  allTeams(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String, slug: String, credits: Decimal, partner: ID, partner_Isnull: Boolean, subscribed: Boolean, billingEmail: String, billingEmail_Isnull: Boolean, billingEmail_Icontains: String, tasks_WorkHours_CreatedAt_Gte: DateTime, tasks_WorkHours_CreatedAt_Gt: DateTime, tasks_WorkHours_CreatedAt_Lte: DateTime, tasks_WorkHours_CreatedAt_Lt: DateTime, tasks: ID, tasks_Isnull: Boolean, users: ID, users_Isnull: Boolean, users_FirstName_Icontains: String, linkedin_Isnull: Boolean, linkedin: String, linkedin_Icontains: String, stage: ID, stage_Isnull: Boolean, toolsUsed_Icontains: String, toolsUsed_Isnull: Boolean, monthlyBudget_Gte: Decimal, monthlyBudget_Gt: Decimal, monthlyBudget_Lte: Decimal, monthlyBudget_Lt: Decimal, monthlyBudget_Isnull: Boolean, search: String): TeamNodeConnection
  userSegment(
    """The ID of the object"""
    id: ID!
  ): UserSegmentNode
  allUserSegments(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, segment: String): UserSegmentNodeConnection
  membership(
    """The ID of the object"""
    id: ID!
  ): MembershipNode
  allMemberships(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, user: ID, team: ID, role: ID): MembershipNodeConnection
  userNote(
    """The ID of the object"""
    id: ID!
  ): UserNoteNode
  allUserNotes(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, date: Date, user: ID, notetaker: ID): UserNoteNodeConnection
  status(
    """The ID of the object"""
    id: ID!
  ): UserStatusNode
  allUserStatus(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, status: String): UserStatusNodeConnection
  userFeedback(
    """The ID of the object"""
    id: ID!
  ): UserFeedbackNode
  allUserFeedback(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, user: ID, survey: String, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime): UserFeedbackNodeConnection
  userFromSurvey(input: UserInput!): UserNode
  teamBySlug(slug: String!): TeamNode
  blogCategory(
    """The ID of the object"""
    id: ID!
  ): BlogCategoryNode
  allBlogCategories(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, name: String, slug: String): BlogCategoryNodeConnection
  blogPost(
    """The ID of the object"""
    id: ID!
  ): BlogPostNode
  allBlogPosts(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, slug: String, slug_Icontains: String, slug_Istartswith: String, title: String, title_Icontains: String, category: ID): BlogPostNodeConnection
  publicBlogPosts(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, category_Slug: String): PublicBlogPostNodeConnection
  blogPostBySlug(slug: String!): BlogPostNode
  blogCategoryBySlug(slug: String!): BlogCategoryNode
  oAuth2Login(resource: String!, additionalStatePayload: String): OAuth2LinksProvider
  viewer: UserNode
  user(
    """The ID of the object"""
    id: ID!
  ): UserNode
  allUsers(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, firstName: String, firstName_Icontains: String, lastName: String, lastName_Icontains: String, email: String, email_Icontains: String, username: String, username_Icontains: String, groups_Name: String, groups_Name_Icontains: String, groups_Name_Istartswith: String, groups_Name_In: [String], createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, userProfile_ContactOwner: ID, search: String): UserNodeConnection
  group(
    """The ID of the object"""
    id: ID!
  ): GroupNode
  allGroups(orderBy: [String!], offset: Int, before: String, after: String, first: Int, last: Int, name: String): GroupNodeConnection
  node(
    """The ID of the object"""
    id: ID!
  ): Node
  hello: String
  authHello: String

  """The current time 2"""
  time: DateTime
  customMessage: String
}

type PromoCodeNode implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: UserNode
  updatedBy: UserNode

  """The ID of the object"""
  id: ID!
  code: String!
  label: String!
  project: String
  referrer: UserNode
  resource: String
  type: String!
  value: Int!
  userProfiles(offset: Int, before: String, after: String, first: Int, last: Int, user: ID, user_FirstName: String, user_FirstName_Icontains: String, user_LastName: String, user_LastName_Icontains: String, user_Email: String, user_Email_Icontains: String, user_Groups: ID, user_Groups_In: [ID], address: String, city: String, country: String, phone: String, timezone: String, contactMode: String, billing: Boolean, auth0Id: String, profilePicture: String, onEmailList: Boolean, salary: Int, setupComplete: Boolean, title: String, titleDescription: String, birthDate: Date, status: ID, marketingChannel: ID, referredBy: ID, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, leadFlag: Boolean, surveyComplete: Boolean, department: String, department_Icontains: String, department_In: [String], satisfaction: String, satisfaction_Icontains: String, satisfaction_In: [String], engagement: String, engagement_Icontains: String, engagement_In: [String], contactOwner: ID): UserProfileNodeConnection!
}

"""An object with an ID"""
interface Node {
  """The ID of the object"""
  id: ID!
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type UserNode implements Node {
  lastLogin: DateTime

  """
  Designates that this user has all permissions without explicitly assigning them.
  """
  isSuperuser: Boolean!

  """
  The groups this user belongs to. A user will get all permissions granted to each of their groups.
  """
  groups(offset: Int, before: String, after: String, first: Int, last: Int, name: String): GroupNodeConnection!

  """Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."""
  username: String!
  firstName: String!
  lastName: String!
  email: String!

  """Designates whether the user can log into this admin site."""
  isStaff: Boolean!

  """
  Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
  """
  isActive: Boolean!
  dateJoined: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!

  """The ID of the object"""
  id: ID!
  blogPosts(offset: Int, before: String, after: String, first: Int, last: Int, category_Slug: String): PublicBlogPostNodeConnection!
  userstatusCreated(offset: Int, before: String, after: String, first: Int, last: Int, status: String): UserStatusNodeConnection!
  userstatusUpdated(offset: Int, before: String, after: String, first: Int, last: Int, status: String): UserStatusNodeConnection!
  userProfile: UserProfileNode
  managedUsers(offset: Int, before: String, after: String, first: Int, last: Int, user: ID, user_FirstName: String, user_FirstName_Icontains: String, user_LastName: String, user_LastName_Icontains: String, user_Email: String, user_Email_Icontains: String, user_Groups: ID, user_Groups_In: [ID], address: String, city: String, country: String, phone: String, timezone: String, contactMode: String, billing: Boolean, auth0Id: String, profilePicture: String, onEmailList: Boolean, salary: Int, setupComplete: Boolean, title: String, titleDescription: String, birthDate: Date, status: ID, marketingChannel: ID, referredBy: ID, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, leadFlag: Boolean, surveyComplete: Boolean, department: String, department_Icontains: String, department_In: [String], satisfaction: String, satisfaction_Icontains: String, satisfaction_In: [String], engagement: String, engagement_Icontains: String, engagement_In: [String], contactOwner: ID): UserProfileNodeConnection!
  ownedContacts(offset: Int, before: String, after: String, first: Int, last: Int, user: ID, user_FirstName: String, user_FirstName_Icontains: String, user_LastName: String, user_LastName_Icontains: String, user_Email: String, user_Email_Icontains: String, user_Groups: ID, user_Groups_In: [ID], address: String, city: String, country: String, phone: String, timezone: String, contactMode: String, billing: Boolean, auth0Id: String, profilePicture: String, onEmailList: Boolean, salary: Int, setupComplete: Boolean, title: String, titleDescription: String, birthDate: Date, status: ID, marketingChannel: ID, referredBy: ID, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, leadFlag: Boolean, surveyComplete: Boolean, department: String, department_Icontains: String, department_In: [String], satisfaction: String, satisfaction_Icontains: String, satisfaction_In: [String], engagement: String, engagement_Icontains: String, engagement_In: [String], contactOwner: ID): UserProfileNodeConnection!
  stageCreated(offset: Int, before: String, after: String, first: Int, last: Int, label: String, description: String, value: Int): StageNodeConnection!
  stageUpdated(offset: Int, before: String, after: String, first: Int, last: Int, label: String, description: String, value: Int): StageNodeConnection!
  companytagCreated(offset: Int, before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String, name_Istartswith: String, description: String, description_Icontains: String): CompanyTagNodeConnection!
  companytagUpdated(offset: Int, before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String, name_Istartswith: String, description: String, description_Icontains: String): CompanyTagNodeConnection!
  teams(offset: Int, before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String, slug: String, credits: Decimal, partner: ID, partner_Isnull: Boolean, subscribed: Boolean, billingEmail: String, billingEmail_Isnull: Boolean, billingEmail_Icontains: String, tasks_WorkHours_CreatedAt_Gte: DateTime, tasks_WorkHours_CreatedAt_Gt: DateTime, tasks_WorkHours_CreatedAt_Lte: DateTime, tasks_WorkHours_CreatedAt_Lt: DateTime, tasks: ID, tasks_Isnull: Boolean, users: ID, users_Isnull: Boolean, users_FirstName_Icontains: String, linkedin_Isnull: Boolean, linkedin: String, linkedin_Icontains: String, stage: ID, stage_Isnull: Boolean, toolsUsed_Icontains: String, toolsUsed_Isnull: Boolean, monthlyBudget_Gte: Decimal, monthlyBudget_Gt: Decimal, monthlyBudget_Lte: Decimal, monthlyBudget_Lt: Decimal, monthlyBudget_Isnull: Boolean): TeamNodeConnection!
  teamSet(offset: Int, before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String, slug: String, credits: Decimal, partner: ID, partner_Isnull: Boolean, subscribed: Boolean, billingEmail: String, billingEmail_Isnull: Boolean, billingEmail_Icontains: String, tasks_WorkHours_CreatedAt_Gte: DateTime, tasks_WorkHours_CreatedAt_Gt: DateTime, tasks_WorkHours_CreatedAt_Lte: DateTime, tasks_WorkHours_CreatedAt_Lt: DateTime, tasks: ID, tasks_Isnull: Boolean, users: ID, users_Isnull: Boolean, users_FirstName_Icontains: String, linkedin_Isnull: Boolean, linkedin: String, linkedin_Icontains: String, stage: ID, stage_Isnull: Boolean, toolsUsed_Icontains: String, toolsUsed_Isnull: Boolean, monthlyBudget_Gte: Decimal, monthlyBudget_Gt: Decimal, monthlyBudget_Lte: Decimal, monthlyBudget_Lt: Decimal, monthlyBudget_Isnull: Boolean): TeamNodeConnection!
  teamCreated(offset: Int, before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String, slug: String, credits: Decimal, partner: ID, partner_Isnull: Boolean, subscribed: Boolean, billingEmail: String, billingEmail_Isnull: Boolean, billingEmail_Icontains: String, tasks_WorkHours_CreatedAt_Gte: DateTime, tasks_WorkHours_CreatedAt_Gt: DateTime, tasks_WorkHours_CreatedAt_Lte: DateTime, tasks_WorkHours_CreatedAt_Lt: DateTime, tasks: ID, tasks_Isnull: Boolean, users: ID, users_Isnull: Boolean, users_FirstName_Icontains: String, linkedin_Isnull: Boolean, linkedin: String, linkedin_Icontains: String, stage: ID, stage_Isnull: Boolean, toolsUsed_Icontains: String, toolsUsed_Isnull: Boolean, monthlyBudget_Gte: Decimal, monthlyBudget_Gt: Decimal, monthlyBudget_Lte: Decimal, monthlyBudget_Lt: Decimal, monthlyBudget_Isnull: Boolean): TeamNodeConnection!
  teamUpdated(offset: Int, before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String, slug: String, credits: Decimal, partner: ID, partner_Isnull: Boolean, subscribed: Boolean, billingEmail: String, billingEmail_Isnull: Boolean, billingEmail_Icontains: String, tasks_WorkHours_CreatedAt_Gte: DateTime, tasks_WorkHours_CreatedAt_Gt: DateTime, tasks_WorkHours_CreatedAt_Lte: DateTime, tasks_WorkHours_CreatedAt_Lt: DateTime, tasks: ID, tasks_Isnull: Boolean, users: ID, users_Isnull: Boolean, users_FirstName_Icontains: String, linkedin_Isnull: Boolean, linkedin: String, linkedin_Icontains: String, stage: ID, stage_Isnull: Boolean, toolsUsed_Icontains: String, toolsUsed_Isnull: Boolean, monthlyBudget_Gte: Decimal, monthlyBudget_Gt: Decimal, monthlyBudget_Lte: Decimal, monthlyBudget_Lt: Decimal, monthlyBudget_Isnull: Boolean): TeamNodeConnection!
  userSegments(offset: Int, before: String, after: String, first: Int, last: Int, segment: String): UserSegmentNodeConnection!
  usersegmentCreated(offset: Int, before: String, after: String, first: Int, last: Int, segment: String): UserSegmentNodeConnection!
  usersegmentUpdated(offset: Int, before: String, after: String, first: Int, last: Int, segment: String): UserSegmentNodeConnection!
  memberships(offset: Int, before: String, after: String, first: Int, last: Int, user: ID, team: ID, role: ID): MembershipNodeConnection!
  userNoteUsers(offset: Int, before: String, after: String, first: Int, last: Int, date: Date, user: ID, notetaker: ID): UserNoteNodeConnection!
  userNoteTakers(offset: Int, before: String, after: String, first: Int, last: Int, date: Date, user: ID, notetaker: ID): UserNoteNodeConnection!
  userFeedbacks(offset: Int, before: String, after: String, first: Int, last: Int, user: ID, survey: String, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime): UserFeedbackNodeConnection!
  userfeedbackCreated(offset: Int, before: String, after: String, first: Int, last: Int, user: ID, survey: String, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime): UserFeedbackNodeConnection!
  userfeedbackUpdated(offset: Int, before: String, after: String, first: Int, last: Int, user: ID, survey: String, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime): UserFeedbackNodeConnection!
  referralCodes(offset: Int, before: String, after: String, first: Int, last: Int, code: String, value: Int, label: String, referrerId: ID, referrer_FirstName_Icontains: String, resource: String, type: String): PromoCodeNodeConnection!
  promocodeCreated(offset: Int, before: String, after: String, first: Int, last: Int, code: String, value: Int, label: String, referrerId: ID, referrer_FirstName_Icontains: String, resource: String, type: String): PromoCodeNodeConnection!
  promocodeUpdated(offset: Int, before: String, after: String, first: Int, last: Int, code: String, value: Int, label: String, referrerId: ID, referrer_FirstName_Icontains: String, resource: String, type: String): PromoCodeNodeConnection!
  workHours(offset: Int, before: String, after: String, first: Int, last: Int, task: ID, associate: ID, log: String, log_Icontains: String, task_UserTeam: ID, workType: String, workType_In: [String], paidOut: Boolean, sentInvoice: Boolean, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime): WorkHoursNodeConnection!
  workhoursCreated(offset: Int, before: String, after: String, first: Int, last: Int, task: ID, associate: ID, log: String, log_Icontains: String, task_UserTeam: ID, workType: String, workType_In: [String], paidOut: Boolean, sentInvoice: Boolean, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime): WorkHoursNodeConnection!
  workhoursUpdated(offset: Int, before: String, after: String, first: Int, last: Int, task: ID, associate: ID, log: String, log_Icontains: String, task_UserTeam: ID, workType: String, workType_In: [String], paidOut: Boolean, sentInvoice: Boolean, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime): WorkHoursNodeConnection!
  quoteCreated(offset: Int, before: String, after: String, first: Int, last: Int, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, project_In: [ID], project_Team_BillingEmail_Iexact: String): QuoteNodeConnection!
  quoteUpdated(offset: Int, before: String, after: String, first: Int, last: Int, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, project_In: [ID], project_Team_BillingEmail_Iexact: String): QuoteNodeConnection!
  taskInterests(offset: Int, before: String, after: String, first: Int, last: Int, label: String, description: String, hubspotLabel: String): TaskInterestNodeConnection!
  taskstatusCreated(offset: Int, before: String, after: String, first: Int, last: Int, status: String, status_In: [String], status_Icontains: String): TaskStatusNodeConnection!
  taskstatusUpdated(offset: Int, before: String, after: String, first: Int, last: Int, status: String, status_In: [String], status_Icontains: String): TaskStatusNodeConnection!
  taskTypes(offset: Int, before: String, after: String, first: Int, last: Int, type: String, visible: Boolean): TaskTypeNodeConnection!
  tasktypeCreated(offset: Int, before: String, after: String, first: Int, last: Int, type: String, visible: Boolean): TaskTypeNodeConnection!
  tasktypeUpdated(offset: Int, before: String, after: String, first: Int, last: Int, type: String, visible: Boolean): TaskTypeNodeConnection!
  taskdepartmentCreated(offset: Int, before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String): TaskDepartmentNodeConnection!
  taskdepartmentUpdated(offset: Int, before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String): TaskDepartmentNodeConnection!
  taskcategoryCreated(offset: Int, before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String): TaskCategoryNodeConnection!
  taskcategoryUpdated(offset: Int, before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String): TaskCategoryNodeConnection!

  """The member of the team that requested this project"""
  projectSet(offset: Int, before: String, after: String, first: Int, last: Int, frequency: TasksProjectFrequencyChoices, team: ID, requester: ID, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, team_BillingEmail_Iexact: String, team_BillingEmail_Icontains: String): ProjectNodeConnection!
  projectCreated(offset: Int, before: String, after: String, first: Int, last: Int, frequency: TasksProjectFrequencyChoices, team: ID, requester: ID, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, team_BillingEmail_Iexact: String, team_BillingEmail_Icontains: String): ProjectNodeConnection!
  projectUpdated(offset: Int, before: String, after: String, first: Int, last: Int, frequency: TasksProjectFrequencyChoices, team: ID, requester: ID, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, team_BillingEmail_Iexact: String, team_BillingEmail_Icontains: String): ProjectNodeConnection!
  taskRequesters(offset: Int, before: String, after: String, first: Int, last: Int, title: String, title_Icontains: String, dueDate: DateTime, requestDate: DateTime, requester: ID, manager: ID, manager_Isnull: Boolean, enumStatus: String, enumStatus_In: [String], enumStatus_Icontains: String, status_Status: String, status_Status_In: [String], status_Status_Icontains: String, completedAt_Gte: DateTime, completedAt_Gt: DateTime, completedAt_Lte: DateTime, completedAt_Lt: DateTime, userTeam: ID, type: ID, associates: ID, associates_Isnull: Boolean, associates_In: [ID], projectLead: ID, projectLead_In: [ID], projectLead_Isnull: Boolean, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, dataSolution: String, billingStatus: String, qaStaff: ID, qaStaff_Isnull: Boolean, qaStaff_In: [ID], categories: ID, categories_Isnull: Boolean, categories_Name_Icontains: String, departments: ID, departments_Isnull: Boolean, departments_Name_Icontains: String, dataDeliveredQuantity_Gte: Int, dataDeliveredQuantity_Gt: Int, dataDeliveredQuantity_Lte: Int, dataDeliveredQuantity_Lt: Int, dataDeliveredQuantity_Isnull: Boolean, dataSampleDeliveredQuantity_Gte: Int, dataSampleDeliveredQuantity_Gt: Int, dataSampleDeliveredQuantity_Lte: Int, dataSampleDeliveredQuantity_Lt: Int, dataSampleDeliveredQuantity_Isnull: Boolean, projectType: String, projectType_Icontains: String, projectType_Isnull: Boolean, feedbacks_Isnull: Boolean, review_Isnull: Boolean, projectConfirmedAt_Gte: DateTime, projectConfirmedAt_Gt: DateTime, projectConfirmedAt_Lte: DateTime, projectConfirmedAt_Lt: DateTime, projectConfirmedAt: DateTime, projectConfirmedAt_Isnull: Boolean, projectDeliveredAt_Gte: DateTime, projectDeliveredAt_Gt: DateTime, projectDeliveredAt_Lte: DateTime, projectDeliveredAt_Lt: DateTime, projectDeliveredAt: DateTime, projectDeliveredAt_Isnull: Boolean, delegationFeedback_Isnull: Boolean, delegationImprovements_Isnull: Boolean, testing: Boolean, internal: Boolean): TaskNodeConnection!
  taskManagers(offset: Int, before: String, after: String, first: Int, last: Int, title: String, title_Icontains: String, dueDate: DateTime, requestDate: DateTime, requester: ID, manager: ID, manager_Isnull: Boolean, enumStatus: String, enumStatus_In: [String], enumStatus_Icontains: String, status_Status: String, status_Status_In: [String], status_Status_Icontains: String, completedAt_Gte: DateTime, completedAt_Gt: DateTime, completedAt_Lte: DateTime, completedAt_Lt: DateTime, userTeam: ID, type: ID, associates: ID, associates_Isnull: Boolean, associates_In: [ID], projectLead: ID, projectLead_In: [ID], projectLead_Isnull: Boolean, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, dataSolution: String, billingStatus: String, qaStaff: ID, qaStaff_Isnull: Boolean, qaStaff_In: [ID], categories: ID, categories_Isnull: Boolean, categories_Name_Icontains: String, departments: ID, departments_Isnull: Boolean, departments_Name_Icontains: String, dataDeliveredQuantity_Gte: Int, dataDeliveredQuantity_Gt: Int, dataDeliveredQuantity_Lte: Int, dataDeliveredQuantity_Lt: Int, dataDeliveredQuantity_Isnull: Boolean, dataSampleDeliveredQuantity_Gte: Int, dataSampleDeliveredQuantity_Gt: Int, dataSampleDeliveredQuantity_Lte: Int, dataSampleDeliveredQuantity_Lt: Int, dataSampleDeliveredQuantity_Isnull: Boolean, projectType: String, projectType_Icontains: String, projectType_Isnull: Boolean, feedbacks_Isnull: Boolean, review_Isnull: Boolean, projectConfirmedAt_Gte: DateTime, projectConfirmedAt_Gt: DateTime, projectConfirmedAt_Lte: DateTime, projectConfirmedAt_Lt: DateTime, projectConfirmedAt: DateTime, projectConfirmedAt_Isnull: Boolean, projectDeliveredAt_Gte: DateTime, projectDeliveredAt_Gt: DateTime, projectDeliveredAt_Lte: DateTime, projectDeliveredAt_Lt: DateTime, projectDeliveredAt: DateTime, projectDeliveredAt_Isnull: Boolean, delegationFeedback_Isnull: Boolean, delegationImprovements_Isnull: Boolean, testing: Boolean, internal: Boolean): TaskNodeConnection!
  tasksLed(offset: Int, before: String, after: String, first: Int, last: Int, title: String, title_Icontains: String, dueDate: DateTime, requestDate: DateTime, requester: ID, manager: ID, manager_Isnull: Boolean, enumStatus: String, enumStatus_In: [String], enumStatus_Icontains: String, status_Status: String, status_Status_In: [String], status_Status_Icontains: String, completedAt_Gte: DateTime, completedAt_Gt: DateTime, completedAt_Lte: DateTime, completedAt_Lt: DateTime, userTeam: ID, type: ID, associates: ID, associates_Isnull: Boolean, associates_In: [ID], projectLead: ID, projectLead_In: [ID], projectLead_Isnull: Boolean, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, dataSolution: String, billingStatus: String, qaStaff: ID, qaStaff_Isnull: Boolean, qaStaff_In: [ID], categories: ID, categories_Isnull: Boolean, categories_Name_Icontains: String, departments: ID, departments_Isnull: Boolean, departments_Name_Icontains: String, dataDeliveredQuantity_Gte: Int, dataDeliveredQuantity_Gt: Int, dataDeliveredQuantity_Lte: Int, dataDeliveredQuantity_Lt: Int, dataDeliveredQuantity_Isnull: Boolean, dataSampleDeliveredQuantity_Gte: Int, dataSampleDeliveredQuantity_Gt: Int, dataSampleDeliveredQuantity_Lte: Int, dataSampleDeliveredQuantity_Lt: Int, dataSampleDeliveredQuantity_Isnull: Boolean, projectType: String, projectType_Icontains: String, projectType_Isnull: Boolean, feedbacks_Isnull: Boolean, review_Isnull: Boolean, projectConfirmedAt_Gte: DateTime, projectConfirmedAt_Gt: DateTime, projectConfirmedAt_Lte: DateTime, projectConfirmedAt_Lt: DateTime, projectConfirmedAt: DateTime, projectConfirmedAt_Isnull: Boolean, projectDeliveredAt_Gte: DateTime, projectDeliveredAt_Gt: DateTime, projectDeliveredAt_Lte: DateTime, projectDeliveredAt_Lt: DateTime, projectDeliveredAt: DateTime, projectDeliveredAt_Isnull: Boolean, delegationFeedback_Isnull: Boolean, delegationImprovements_Isnull: Boolean, testing: Boolean, internal: Boolean): TaskNodeConnection!
  tasksQaed(offset: Int, before: String, after: String, first: Int, last: Int, title: String, title_Icontains: String, dueDate: DateTime, requestDate: DateTime, requester: ID, manager: ID, manager_Isnull: Boolean, enumStatus: String, enumStatus_In: [String], enumStatus_Icontains: String, status_Status: String, status_Status_In: [String], status_Status_Icontains: String, completedAt_Gte: DateTime, completedAt_Gt: DateTime, completedAt_Lte: DateTime, completedAt_Lt: DateTime, userTeam: ID, type: ID, associates: ID, associates_Isnull: Boolean, associates_In: [ID], projectLead: ID, projectLead_In: [ID], projectLead_Isnull: Boolean, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, dataSolution: String, billingStatus: String, qaStaff: ID, qaStaff_Isnull: Boolean, qaStaff_In: [ID], categories: ID, categories_Isnull: Boolean, categories_Name_Icontains: String, departments: ID, departments_Isnull: Boolean, departments_Name_Icontains: String, dataDeliveredQuantity_Gte: Int, dataDeliveredQuantity_Gt: Int, dataDeliveredQuantity_Lte: Int, dataDeliveredQuantity_Lt: Int, dataDeliveredQuantity_Isnull: Boolean, dataSampleDeliveredQuantity_Gte: Int, dataSampleDeliveredQuantity_Gt: Int, dataSampleDeliveredQuantity_Lte: Int, dataSampleDeliveredQuantity_Lt: Int, dataSampleDeliveredQuantity_Isnull: Boolean, projectType: String, projectType_Icontains: String, projectType_Isnull: Boolean, feedbacks_Isnull: Boolean, review_Isnull: Boolean, projectConfirmedAt_Gte: DateTime, projectConfirmedAt_Gt: DateTime, projectConfirmedAt_Lte: DateTime, projectConfirmedAt_Lt: DateTime, projectConfirmedAt: DateTime, projectConfirmedAt_Isnull: Boolean, projectDeliveredAt_Gte: DateTime, projectDeliveredAt_Gt: DateTime, projectDeliveredAt_Lte: DateTime, projectDeliveredAt_Lt: DateTime, projectDeliveredAt: DateTime, projectDeliveredAt_Isnull: Boolean, delegationFeedback_Isnull: Boolean, delegationImprovements_Isnull: Boolean, testing: Boolean, internal: Boolean): TaskNodeConnection!
  tasks(offset: Int, before: String, after: String, first: Int, last: Int, title: String, title_Icontains: String, dueDate: DateTime, requestDate: DateTime, requester: ID, manager: ID, manager_Isnull: Boolean, enumStatus: String, enumStatus_In: [String], enumStatus_Icontains: String, status_Status: String, status_Status_In: [String], status_Status_Icontains: String, completedAt_Gte: DateTime, completedAt_Gt: DateTime, completedAt_Lte: DateTime, completedAt_Lt: DateTime, userTeam: ID, type: ID, associates: ID, associates_Isnull: Boolean, associates_In: [ID], projectLead: ID, projectLead_In: [ID], projectLead_Isnull: Boolean, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, dataSolution: String, billingStatus: String, qaStaff: ID, qaStaff_Isnull: Boolean, qaStaff_In: [ID], categories: ID, categories_Isnull: Boolean, categories_Name_Icontains: String, departments: ID, departments_Isnull: Boolean, departments_Name_Icontains: String, dataDeliveredQuantity_Gte: Int, dataDeliveredQuantity_Gt: Int, dataDeliveredQuantity_Lte: Int, dataDeliveredQuantity_Lt: Int, dataDeliveredQuantity_Isnull: Boolean, dataSampleDeliveredQuantity_Gte: Int, dataSampleDeliveredQuantity_Gt: Int, dataSampleDeliveredQuantity_Lte: Int, dataSampleDeliveredQuantity_Lt: Int, dataSampleDeliveredQuantity_Isnull: Boolean, projectType: String, projectType_Icontains: String, projectType_Isnull: Boolean, feedbacks_Isnull: Boolean, review_Isnull: Boolean, projectConfirmedAt_Gte: DateTime, projectConfirmedAt_Gt: DateTime, projectConfirmedAt_Lte: DateTime, projectConfirmedAt_Lt: DateTime, projectConfirmedAt: DateTime, projectConfirmedAt_Isnull: Boolean, projectDeliveredAt_Gte: DateTime, projectDeliveredAt_Gt: DateTime, projectDeliveredAt_Lte: DateTime, projectDeliveredAt_Lt: DateTime, projectDeliveredAt: DateTime, projectDeliveredAt_Isnull: Boolean, delegationFeedback_Isnull: Boolean, delegationImprovements_Isnull: Boolean, testing: Boolean, internal: Boolean): TaskNodeConnection!
  taskCreated(offset: Int, before: String, after: String, first: Int, last: Int, title: String, title_Icontains: String, dueDate: DateTime, requestDate: DateTime, requester: ID, manager: ID, manager_Isnull: Boolean, enumStatus: String, enumStatus_In: [String], enumStatus_Icontains: String, status_Status: String, status_Status_In: [String], status_Status_Icontains: String, completedAt_Gte: DateTime, completedAt_Gt: DateTime, completedAt_Lte: DateTime, completedAt_Lt: DateTime, userTeam: ID, type: ID, associates: ID, associates_Isnull: Boolean, associates_In: [ID], projectLead: ID, projectLead_In: [ID], projectLead_Isnull: Boolean, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, dataSolution: String, billingStatus: String, qaStaff: ID, qaStaff_Isnull: Boolean, qaStaff_In: [ID], categories: ID, categories_Isnull: Boolean, categories_Name_Icontains: String, departments: ID, departments_Isnull: Boolean, departments_Name_Icontains: String, dataDeliveredQuantity_Gte: Int, dataDeliveredQuantity_Gt: Int, dataDeliveredQuantity_Lte: Int, dataDeliveredQuantity_Lt: Int, dataDeliveredQuantity_Isnull: Boolean, dataSampleDeliveredQuantity_Gte: Int, dataSampleDeliveredQuantity_Gt: Int, dataSampleDeliveredQuantity_Lte: Int, dataSampleDeliveredQuantity_Lt: Int, dataSampleDeliveredQuantity_Isnull: Boolean, projectType: String, projectType_Icontains: String, projectType_Isnull: Boolean, feedbacks_Isnull: Boolean, review_Isnull: Boolean, projectConfirmedAt_Gte: DateTime, projectConfirmedAt_Gt: DateTime, projectConfirmedAt_Lte: DateTime, projectConfirmedAt_Lt: DateTime, projectConfirmedAt: DateTime, projectConfirmedAt_Isnull: Boolean, projectDeliveredAt_Gte: DateTime, projectDeliveredAt_Gt: DateTime, projectDeliveredAt_Lte: DateTime, projectDeliveredAt_Lt: DateTime, projectDeliveredAt: DateTime, projectDeliveredAt_Isnull: Boolean, delegationFeedback_Isnull: Boolean, delegationImprovements_Isnull: Boolean, testing: Boolean, internal: Boolean): TaskNodeConnection!
  taskUpdated(offset: Int, before: String, after: String, first: Int, last: Int, title: String, title_Icontains: String, dueDate: DateTime, requestDate: DateTime, requester: ID, manager: ID, manager_Isnull: Boolean, enumStatus: String, enumStatus_In: [String], enumStatus_Icontains: String, status_Status: String, status_Status_In: [String], status_Status_Icontains: String, completedAt_Gte: DateTime, completedAt_Gt: DateTime, completedAt_Lte: DateTime, completedAt_Lt: DateTime, userTeam: ID, type: ID, associates: ID, associates_Isnull: Boolean, associates_In: [ID], projectLead: ID, projectLead_In: [ID], projectLead_Isnull: Boolean, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, dataSolution: String, billingStatus: String, qaStaff: ID, qaStaff_Isnull: Boolean, qaStaff_In: [ID], categories: ID, categories_Isnull: Boolean, categories_Name_Icontains: String, departments: ID, departments_Isnull: Boolean, departments_Name_Icontains: String, dataDeliveredQuantity_Gte: Int, dataDeliveredQuantity_Gt: Int, dataDeliveredQuantity_Lte: Int, dataDeliveredQuantity_Lt: Int, dataDeliveredQuantity_Isnull: Boolean, dataSampleDeliveredQuantity_Gte: Int, dataSampleDeliveredQuantity_Gt: Int, dataSampleDeliveredQuantity_Lte: Int, dataSampleDeliveredQuantity_Lt: Int, dataSampleDeliveredQuantity_Isnull: Boolean, projectType: String, projectType_Icontains: String, projectType_Isnull: Boolean, feedbacks_Isnull: Boolean, review_Isnull: Boolean, projectConfirmedAt_Gte: DateTime, projectConfirmedAt_Gt: DateTime, projectConfirmedAt_Lte: DateTime, projectConfirmedAt_Lt: DateTime, projectConfirmedAt: DateTime, projectConfirmedAt_Isnull: Boolean, projectDeliveredAt_Gte: DateTime, projectDeliveredAt_Gt: DateTime, projectDeliveredAt_Lte: DateTime, projectDeliveredAt_Lt: DateTime, projectDeliveredAt: DateTime, projectDeliveredAt_Isnull: Boolean, delegationFeedback_Isnull: Boolean, delegationImprovements_Isnull: Boolean, testing: Boolean, internal: Boolean): TaskNodeConnection!
  taskexpenseCreated(offset: Int, before: String, after: String, first: Int, last: Int, expenseItem: String, task: ID, task_UserTeam: ID, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime): TaskExpenseNodeConnection!
  taskexpenseUpdated(offset: Int, before: String, after: String, first: Int, last: Int, expenseItem: String, task: ID, task_UserTeam: ID, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime): TaskExpenseNodeConnection!
  taskfileCreated(offset: Int, before: String, after: String, first: Int, last: Int, name: String, fileType: String, task: ID): TaskFileNodeConnection!
  taskfileUpdated(offset: Int, before: String, after: String, first: Int, last: Int, name: String, fileType: String, task: ID): TaskFileNodeConnection!
  feedbackGivers(offset: Int, before: String, after: String, first: Int, last: Int, giver: ID, receiver: ID, task: ID, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, isComplete: Boolean): TaskFeedbackNodeConnection!
  feedbackReceivers(offset: Int, before: String, after: String, first: Int, last: Int, giver: ID, receiver: ID, task: ID, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, isComplete: Boolean): TaskFeedbackNodeConnection!
  taskfeedbackCreated(offset: Int, before: String, after: String, first: Int, last: Int, giver: ID, receiver: ID, task: ID, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, isComplete: Boolean): TaskFeedbackNodeConnection!
  taskfeedbackUpdated(offset: Int, before: String, after: String, first: Int, last: Int, giver: ID, receiver: ID, task: ID, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, isComplete: Boolean): TaskFeedbackNodeConnection!
  qaTasks(offset: Int, before: String, after: String, first: Int, last: Int, staffMember: ID, task: ID, isLead: Boolean): QAStaffNodeConnection!
  emailLists(offset: Int, before: String, after: String, first: Int, last: Int, type: String, description: String): EmailListNodeConnection!
  emaillistCreated(offset: Int, before: String, after: String, first: Int, last: Int, type: String, description: String): EmailListNodeConnection!
  emaillistUpdated(offset: Int, before: String, after: String, first: Int, last: Int, type: String, description: String): EmailListNodeConnection!
  messagetemplateCreated(offset: Int, before: String, after: String, first: Int, last: Int, goal: String, content: String, subject: String): MessageTemplateNodeConnection!
  messagetemplateUpdated(offset: Int, before: String, after: String, first: Int, last: Int, goal: String, content: String, subject: String): MessageTemplateNodeConnection!
  marketingchannelCreated(offset: Int, before: String, after: String, first: Int, last: Int, label: String, value: Int, show: Boolean): MarketingChannelNodeConnection!
  marketingchannelUpdated(offset: Int, before: String, after: String, first: Int, last: Int, label: String, value: Int, show: Boolean): MarketingChannelNodeConnection!
  contactLogPartners(offset: Int, before: String, after: String, first: Int, last: Int, email: String, dateSent: DateTime): ContactLogNodeConnection!
  contactLogClients(offset: Int, before: String, after: String, first: Int, last: Int, email: String, dateSent: DateTime): ContactLogNodeConnection!
  contactlogCreated(offset: Int, before: String, after: String, first: Int, last: Int, email: String, dateSent: DateTime): ContactLogNodeConnection!
  contactlogUpdated(offset: Int, before: String, after: String, first: Int, last: Int, email: String, dateSent: DateTime): ContactLogNodeConnection!
  userTestimonials(offset: Int, before: String, after: String, first: Int, last: Int, user: ID, title: String, userFname: String, userLname: String): UserTestimonialNodeConnection!
  usertestimonialCreated(offset: Int, before: String, after: String, first: Int, last: Int, user: ID, title: String, userFname: String, userLname: String): UserTestimonialNodeConnection!
  usertestimonialUpdated(offset: Int, before: String, after: String, first: Int, last: Int, user: ID, title: String, userFname: String, userLname: String): UserTestimonialNodeConnection!
  lead: UserLeadNode
  userleadCreated(offset: Int, before: String, after: String, first: Int, last: Int, email: String, email_Icontains: String, email_Istartswith: String, firstName: String, firstName_Icontains: String, lastName: String, lastName_Icontains: String, company: String, company_Icontains: String, startupSize: String): UserLeadNodeConnection!
  userleadUpdated(offset: Int, before: String, after: String, first: Int, last: Int, email: String, email_Icontains: String, email_Istartswith: String, firstName: String, firstName_Icontains: String, lastName: String, lastName_Icontains: String, company: String, company_Icontains: String, startupSize: String): UserLeadNodeConnection!
  user(offset: Int, before: String, after: String, first: Int, last: Int, recipient: ID, topic: MarketingMarketingEmailLogTopicChoices): MarketingEmailLogNodeConnection!
}

type GroupNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [GroupNodeEdge]!
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""A Relay edge containing a `GroupNode` and its cursor."""
type GroupNodeEdge {
  """The item at the end of the edge"""
  node: GroupNode

  """A cursor for use in pagination"""
  cursor: String!
}

type GroupNode implements Node {
  """The ID of the object"""
  id: ID!
  name: String!

  """
  The groups this user belongs to. A user will get all permissions granted to each of their groups.
  """
  userSet(offset: Int, before: String, after: String, first: Int, last: Int, firstName: String, lastName: String, email: String, username: String, groups_Name: String): UserNodeConnection!
  memberships(offset: Int, before: String, after: String, first: Int, last: Int, user: ID, team: ID, role: ID): MembershipNodeConnection!
}

type UserNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [UserNodeEdge]!
}

"""A Relay edge containing a `UserNode` and its cursor."""
type UserNodeEdge {
  """The item at the end of the edge"""
  node: UserNode

  """A cursor for use in pagination"""
  cursor: String!
}

type MembershipNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [MembershipNodeEdge]!
}

"""A Relay edge containing a `MembershipNode` and its cursor."""
type MembershipNodeEdge {
  """The item at the end of the edge"""
  node: MembershipNode

  """A cursor for use in pagination"""
  cursor: String!
}

type MembershipNode implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!

  """The ID of the object"""
  id: ID!
  user: UserNode
  team: TeamNode
  role: GroupNode
}

type TeamNode implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: UserNode
  updatedBy: UserNode

  """The ID of the object"""
  id: ID!
  name: String!
  website: String
  description: String
  slug: String
  stage: StageNode
  credits: Decimal
  partner: UserNode
  subscribed: Boolean!
  billingEmail: String
  hourlyRate: Decimal
  industries(offset: Int, before: String, after: String, first: Int, last: Int, label: String, label_Icontains: String, label_Istartswith: String, value: Int, value_Icontains: Int): IndustryNodeConnection!
  users(offset: Int, before: String, after: String, first: Int, last: Int, firstName: String, lastName: String, email: String, username: String, groups_Name: String): UserNodeConnection!
  tasksIndex: Int!
  lastTaskRequestedAt: DateTime
  monthlyBudget: Decimal
  toolsUsed: String
  linkedin: String

  """The total funding received by the company."""
  totalFunding: Decimal

  """The total spent amount by the team on Pareto."""
  spend: Decimal

  """Whether the team is women-founded."""
  womenFounded: Boolean

  """The label tags for the team."""
  tags(offset: Int, before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String, name_Istartswith: String, description: String, description_Icontains: String): CompanyTagNodeConnection!
  stripeAccountId: String!
  memberships(offset: Int, before: String, after: String, first: Int, last: Int, user: ID, team: ID, role: ID): MembershipNodeConnection!
  workHours(offset: Int, before: String, after: String, first: Int, last: Int, task: ID, associate: ID, log: String, log_Icontains: String, task_UserTeam: ID, workType: String, workType_In: [String], paidOut: Boolean, sentInvoice: Boolean, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime): WorkHoursNodeConnection!

  """The account (team) that this project is for"""
  projectSet(offset: Int, before: String, after: String, first: Int, last: Int, frequency: TasksProjectFrequencyChoices, team: ID, requester: ID, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, team_BillingEmail_Iexact: String, team_BillingEmail_Icontains: String): ProjectNodeConnection!
  tasks(offset: Int, before: String, after: String, first: Int, last: Int, title: String, title_Icontains: String, dueDate: DateTime, requestDate: DateTime, requester: ID, manager: ID, manager_Isnull: Boolean, enumStatus: String, enumStatus_In: [String], enumStatus_Icontains: String, status_Status: String, status_Status_In: [String], status_Status_Icontains: String, completedAt_Gte: DateTime, completedAt_Gt: DateTime, completedAt_Lte: DateTime, completedAt_Lt: DateTime, userTeam: ID, type: ID, associates: ID, associates_Isnull: Boolean, associates_In: [ID], projectLead: ID, projectLead_In: [ID], projectLead_Isnull: Boolean, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, dataSolution: String, billingStatus: String, qaStaff: ID, qaStaff_Isnull: Boolean, qaStaff_In: [ID], categories: ID, categories_Isnull: Boolean, categories_Name_Icontains: String, departments: ID, departments_Isnull: Boolean, departments_Name_Icontains: String, dataDeliveredQuantity_Gte: Int, dataDeliveredQuantity_Gt: Int, dataDeliveredQuantity_Lte: Int, dataDeliveredQuantity_Lt: Int, dataDeliveredQuantity_Isnull: Boolean, dataSampleDeliveredQuantity_Gte: Int, dataSampleDeliveredQuantity_Gt: Int, dataSampleDeliveredQuantity_Lte: Int, dataSampleDeliveredQuantity_Lt: Int, dataSampleDeliveredQuantity_Isnull: Boolean, projectType: String, projectType_Icontains: String, projectType_Isnull: Boolean, feedbacks_Isnull: Boolean, review_Isnull: Boolean, projectConfirmedAt_Gte: DateTime, projectConfirmedAt_Gt: DateTime, projectConfirmedAt_Lte: DateTime, projectConfirmedAt_Lt: DateTime, projectConfirmedAt: DateTime, projectConfirmedAt_Isnull: Boolean, projectDeliveredAt_Gte: DateTime, projectDeliveredAt_Gt: DateTime, projectDeliveredAt_Lte: DateTime, projectDeliveredAt_Lt: DateTime, projectDeliveredAt: DateTime, projectDeliveredAt_Isnull: Boolean, delegationFeedback_Isnull: Boolean, delegationImprovements_Isnull: Boolean, testing: Boolean, internal: Boolean): TaskNodeConnection!
  userTestimonials(offset: Int, before: String, after: String, first: Int, last: Int, user: ID, title: String, userFname: String, userLname: String): UserTestimonialNodeConnection!
}

type StageNode implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: UserNode
  updatedBy: UserNode

  """The ID of the object"""
  id: ID!
  label: String
  description: String
  value: Int!
  teams(offset: Int, before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String, slug: String, credits: Decimal, partner: ID, partner_Isnull: Boolean, subscribed: Boolean, billingEmail: String, billingEmail_Isnull: Boolean, billingEmail_Icontains: String, tasks_WorkHours_CreatedAt_Gte: DateTime, tasks_WorkHours_CreatedAt_Gt: DateTime, tasks_WorkHours_CreatedAt_Lte: DateTime, tasks_WorkHours_CreatedAt_Lt: DateTime, tasks: ID, tasks_Isnull: Boolean, users: ID, users_Isnull: Boolean, users_FirstName_Icontains: String, linkedin_Isnull: Boolean, linkedin: String, linkedin_Icontains: String, stage: ID, stage_Isnull: Boolean, toolsUsed_Icontains: String, toolsUsed_Isnull: Boolean, monthlyBudget_Gte: Decimal, monthlyBudget_Gt: Decimal, monthlyBudget_Lte: Decimal, monthlyBudget_Lt: Decimal, monthlyBudget_Isnull: Boolean): TeamNodeConnection!
}

type TeamNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [TeamNodeEdge]!
}

"""A Relay edge containing a `TeamNode` and its cursor."""
type TeamNodeEdge {
  """The item at the end of the edge"""
  node: TeamNode

  """A cursor for use in pagination"""
  cursor: String!
}

"""The `Decimal` scalar type represents a python Decimal."""
scalar Decimal

type IndustryNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [IndustryNodeEdge]!
}

"""A Relay edge containing a `IndustryNode` and its cursor."""
type IndustryNodeEdge {
  """The item at the end of the edge"""
  node: IndustryNode

  """A cursor for use in pagination"""
  cursor: String!
}

type IndustryNode implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!

  """The ID of the object"""
  id: ID!
  label: String!
  value: Int!
  teams(offset: Int, before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String, slug: String, credits: Decimal, partner: ID, partner_Isnull: Boolean, subscribed: Boolean, billingEmail: String, billingEmail_Isnull: Boolean, billingEmail_Icontains: String, tasks_WorkHours_CreatedAt_Gte: DateTime, tasks_WorkHours_CreatedAt_Gt: DateTime, tasks_WorkHours_CreatedAt_Lte: DateTime, tasks_WorkHours_CreatedAt_Lt: DateTime, tasks: ID, tasks_Isnull: Boolean, users: ID, users_Isnull: Boolean, users_FirstName_Icontains: String, linkedin_Isnull: Boolean, linkedin: String, linkedin_Icontains: String, stage: ID, stage_Isnull: Boolean, toolsUsed_Icontains: String, toolsUsed_Isnull: Boolean, monthlyBudget_Gte: Decimal, monthlyBudget_Gt: Decimal, monthlyBudget_Lte: Decimal, monthlyBudget_Lt: Decimal, monthlyBudget_Isnull: Boolean): TeamNodeConnection!
}

type CompanyTagNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [CompanyTagNodeEdge]!
}

"""A Relay edge containing a `CompanyTagNode` and its cursor."""
type CompanyTagNodeEdge {
  """The item at the end of the edge"""
  node: CompanyTagNode

  """A cursor for use in pagination"""
  cursor: String!
}

type CompanyTagNode implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: UserNode
  updatedBy: UserNode

  """The ID of the object"""
  id: ID!
  name: String!
  description: String

  """The label tags for the team."""
  teams(offset: Int, before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String, slug: String, credits: Decimal, partner: ID, partner_Isnull: Boolean, subscribed: Boolean, billingEmail: String, billingEmail_Isnull: Boolean, billingEmail_Icontains: String, tasks_WorkHours_CreatedAt_Gte: DateTime, tasks_WorkHours_CreatedAt_Gt: DateTime, tasks_WorkHours_CreatedAt_Lte: DateTime, tasks_WorkHours_CreatedAt_Lt: DateTime, tasks: ID, tasks_Isnull: Boolean, users: ID, users_Isnull: Boolean, users_FirstName_Icontains: String, linkedin_Isnull: Boolean, linkedin: String, linkedin_Icontains: String, stage: ID, stage_Isnull: Boolean, toolsUsed_Icontains: String, toolsUsed_Isnull: Boolean, monthlyBudget_Gte: Decimal, monthlyBudget_Gt: Decimal, monthlyBudget_Lte: Decimal, monthlyBudget_Lt: Decimal, monthlyBudget_Isnull: Boolean): TeamNodeConnection!
}

type WorkHoursNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [WorkHoursNodeEdge]!
}

"""A Relay edge containing a `WorkHoursNode` and its cursor."""
type WorkHoursNodeEdge {
  """The item at the end of the edge"""
  node: WorkHoursNode

  """A cursor for use in pagination"""
  cursor: String!
}

type WorkHoursNode implements Node {
  createdBy: UserNode
  updatedBy: UserNode

  """The ID of the object"""
  id: ID!
  startedAt: DateTime!
  endedAt: DateTime
  timeSpent: Int!
  log: String!
  task: TaskNode
  team: TeamNode
  associate: UserNode
  link: String
  workType: String
  paidOut: Boolean!
  sentInvoice: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TaskNode implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: UserNode
  updatedBy: UserNode

  """The ID of the object"""
  id: ID!

  """The project that this task belongs to"""
  project: ProjectNode

  """The chosen quote that this task will be billed against"""
  quote: QuoteNode
  description: String
  dueDate: DateTime!
  links: String
  repeat: Boolean!
  repeatDetails: JSONString!
  requester: UserNode
  userTeam: TeamNode
  manager: UserNode
  projectLead: UserNode
  qaStaff(offset: Int, before: String, after: String, first: Int, last: Int, firstName: String, lastName: String, email: String, username: String, groups_Name: String): UserNodeConnection!
  status: TaskStatusNode
  enumStatus: String
  associates(offset: Int, before: String, after: String, first: Int, last: Int, firstName: String, lastName: String, email: String, username: String, groups_Name: String): UserNodeConnection!
  version: Decimal!
  completedAt: DateTime
  testing: Boolean!
  internal: Boolean!
  title: String!
  timecap: Decimal!
  requestDate: DateTime!
  completionDate: DateTime
  urgent: Boolean!
  evening: Boolean!
  weekend: Boolean!
  isPublic: Boolean!
  query: String
  userTeamIndex: Decimal!
  type: TaskTypeNode
  dataSpreadsheet: String
  dataCategory: String
  dataCategoryNotes: String
  dataSolution: String
  dataTargetSources: JSONString!
  dataTargetFilters: JSONString!
  dataTargetColumns: JSONString!
  dataTargetQuantity: Int!
  dataSampleTargetQuantity: Int!
  subTasks(offset: Int, before: String, after: String, first: Int, last: Int, title: String, title_Icontains: String, dueDate: DateTime, requestDate: DateTime, requester: ID, manager: ID, manager_Isnull: Boolean, enumStatus: String, enumStatus_In: [String], enumStatus_Icontains: String, status_Status: String, status_Status_In: [String], status_Status_Icontains: String, completedAt_Gte: DateTime, completedAt_Gt: DateTime, completedAt_Lte: DateTime, completedAt_Lt: DateTime, userTeam: ID, type: ID, associates: ID, associates_Isnull: Boolean, associates_In: [ID], projectLead: ID, projectLead_In: [ID], projectLead_Isnull: Boolean, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, dataSolution: String, billingStatus: String, qaStaff: ID, qaStaff_Isnull: Boolean, qaStaff_In: [ID], categories: ID, categories_Isnull: Boolean, categories_Name_Icontains: String, departments: ID, departments_Isnull: Boolean, departments_Name_Icontains: String, dataDeliveredQuantity_Gte: Int, dataDeliveredQuantity_Gt: Int, dataDeliveredQuantity_Lte: Int, dataDeliveredQuantity_Lt: Int, dataDeliveredQuantity_Isnull: Boolean, dataSampleDeliveredQuantity_Gte: Int, dataSampleDeliveredQuantity_Gt: Int, dataSampleDeliveredQuantity_Lte: Int, dataSampleDeliveredQuantity_Lt: Int, dataSampleDeliveredQuantity_Isnull: Boolean, projectType: String, projectType_Icontains: String, projectType_Isnull: Boolean, feedbacks_Isnull: Boolean, review_Isnull: Boolean, projectConfirmedAt_Gte: DateTime, projectConfirmedAt_Gt: DateTime, projectConfirmedAt_Lte: DateTime, projectConfirmedAt_Lt: DateTime, projectConfirmedAt: DateTime, projectConfirmedAt_Isnull: Boolean, projectDeliveredAt_Gte: DateTime, projectDeliveredAt_Gt: DateTime, projectDeliveredAt_Lte: DateTime, projectDeliveredAt_Lt: DateTime, projectDeliveredAt: DateTime, projectDeliveredAt_Isnull: Boolean, delegationFeedback_Isnull: Boolean, delegationImprovements_Isnull: Boolean, testing: Boolean, internal: Boolean): TaskNodeConnection!
  qaProcess: String
  qaSampleSize: Int!
  qaTargetPercentage: Decimal!
  deliveryInstructions: String
  deliveryTargetChannels: JSONString!
  billingStatus: String
  indexByTeam: Int!
  indexByRequester: Int!
  categories(offset: Int, before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String): TaskCategoryNodeConnection!
  departments(offset: Int, before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String): TaskDepartmentNodeConnection!
  dataSampleDeliveredQuantity: Int!
  dataDeliveredQuantity: Int!
  projectType: String
  projectConfirmedAt: DateTime
  projectDeliveredAt: DateTime
  delegationFeedback: String
  delegationImprovements: String
  workHours(offset: Int, before: String, after: String, first: Int, last: Int, task: ID, associate: ID, log: String, log_Icontains: String, task_UserTeam: ID, workType: String, workType_In: [String], paidOut: Boolean, sentInvoice: Boolean, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime): WorkHoursNodeConnection!
  otherSubTasks(offset: Int, before: String, after: String, first: Int, last: Int, title: String, title_Icontains: String, dueDate: DateTime, requestDate: DateTime, requester: ID, manager: ID, manager_Isnull: Boolean, enumStatus: String, enumStatus_In: [String], enumStatus_Icontains: String, status_Status: String, status_Status_In: [String], status_Status_Icontains: String, completedAt_Gte: DateTime, completedAt_Gt: DateTime, completedAt_Lte: DateTime, completedAt_Lt: DateTime, userTeam: ID, type: ID, associates: ID, associates_Isnull: Boolean, associates_In: [ID], projectLead: ID, projectLead_In: [ID], projectLead_Isnull: Boolean, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, dataSolution: String, billingStatus: String, qaStaff: ID, qaStaff_Isnull: Boolean, qaStaff_In: [ID], categories: ID, categories_Isnull: Boolean, categories_Name_Icontains: String, departments: ID, departments_Isnull: Boolean, departments_Name_Icontains: String, dataDeliveredQuantity_Gte: Int, dataDeliveredQuantity_Gt: Int, dataDeliveredQuantity_Lte: Int, dataDeliveredQuantity_Lt: Int, dataDeliveredQuantity_Isnull: Boolean, dataSampleDeliveredQuantity_Gte: Int, dataSampleDeliveredQuantity_Gt: Int, dataSampleDeliveredQuantity_Lte: Int, dataSampleDeliveredQuantity_Lt: Int, dataSampleDeliveredQuantity_Isnull: Boolean, projectType: String, projectType_Icontains: String, projectType_Isnull: Boolean, feedbacks_Isnull: Boolean, review_Isnull: Boolean, projectConfirmedAt_Gte: DateTime, projectConfirmedAt_Gt: DateTime, projectConfirmedAt_Lte: DateTime, projectConfirmedAt_Lt: DateTime, projectConfirmedAt: DateTime, projectConfirmedAt_Isnull: Boolean, projectDeliveredAt_Gte: DateTime, projectDeliveredAt_Gt: DateTime, projectDeliveredAt_Lte: DateTime, projectDeliveredAt_Lt: DateTime, projectDeliveredAt: DateTime, projectDeliveredAt_Isnull: Boolean, delegationFeedback_Isnull: Boolean, delegationImprovements_Isnull: Boolean, testing: Boolean, internal: Boolean): TaskNodeConnection!
  taskExpenses(offset: Int, before: String, after: String, first: Int, last: Int, expenseItem: String, task: ID, task_UserTeam: ID, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime): TaskExpenseNodeConnection!
  taskFiles(offset: Int, before: String, after: String, first: Int, last: Int, name: String, fileType: String, task: ID): TaskFileNodeConnection!
  feedbacks(offset: Int, before: String, after: String, first: Int, last: Int, giver: ID, receiver: ID, task: ID, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, isComplete: Boolean): TaskFeedbackNodeConnection!
  review: TaskReviewNode
  qaTeam(offset: Int, before: String, after: String, first: Int, last: Int, staffMember: ID, task: ID, isLead: Boolean): QAStaffNodeConnection!
}

type ProjectNode implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: UserNode
  updatedBy: UserNode

  """The ID of the object"""
  id: ID!

  """The name of this project"""
  title: String!

  """This task's repetition schedule, if any"""
  frequency: TasksProjectFrequencyChoices

  """The account (team) that this project is for"""
  team: TeamNode!

  """The member of the team that requested this project"""
  requester: UserNode!

  """The project that this quote relates to"""
  quotes(offset: Int, before: String, after: String, first: Int, last: Int, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, project_In: [ID], project_Team_BillingEmail_Iexact: String): QuoteNodeConnection!

  """The project that this task belongs to"""
  tasks(offset: Int, before: String, after: String, first: Int, last: Int, title: String, title_Icontains: String, dueDate: DateTime, requestDate: DateTime, requester: ID, manager: ID, manager_Isnull: Boolean, enumStatus: String, enumStatus_In: [String], enumStatus_Icontains: String, status_Status: String, status_Status_In: [String], status_Status_Icontains: String, completedAt_Gte: DateTime, completedAt_Gt: DateTime, completedAt_Lte: DateTime, completedAt_Lt: DateTime, userTeam: ID, type: ID, associates: ID, associates_Isnull: Boolean, associates_In: [ID], projectLead: ID, projectLead_In: [ID], projectLead_Isnull: Boolean, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, dataSolution: String, billingStatus: String, qaStaff: ID, qaStaff_Isnull: Boolean, qaStaff_In: [ID], categories: ID, categories_Isnull: Boolean, categories_Name_Icontains: String, departments: ID, departments_Isnull: Boolean, departments_Name_Icontains: String, dataDeliveredQuantity_Gte: Int, dataDeliveredQuantity_Gt: Int, dataDeliveredQuantity_Lte: Int, dataDeliveredQuantity_Lt: Int, dataDeliveredQuantity_Isnull: Boolean, dataSampleDeliveredQuantity_Gte: Int, dataSampleDeliveredQuantity_Gt: Int, dataSampleDeliveredQuantity_Lte: Int, dataSampleDeliveredQuantity_Lt: Int, dataSampleDeliveredQuantity_Isnull: Boolean, projectType: String, projectType_Icontains: String, projectType_Isnull: Boolean, feedbacks_Isnull: Boolean, review_Isnull: Boolean, projectConfirmedAt_Gte: DateTime, projectConfirmedAt_Gt: DateTime, projectConfirmedAt_Lte: DateTime, projectConfirmedAt_Lt: DateTime, projectConfirmedAt: DateTime, projectConfirmedAt_Isnull: Boolean, projectDeliveredAt_Gte: DateTime, projectDeliveredAt_Gt: DateTime, projectDeliveredAt_Lte: DateTime, projectDeliveredAt_Lt: DateTime, projectDeliveredAt: DateTime, projectDeliveredAt_Isnull: Boolean, delegationFeedback_Isnull: Boolean, delegationImprovements_Isnull: Boolean, testing: Boolean, internal: Boolean): TaskNodeConnection!
}

"""An enumeration."""
enum TasksProjectFrequencyChoices {
  """Na"""
  NOT_APPLICABLE

  """Daily"""
  DAILY

  """Weekly"""
  WEEKLY

  """Biweekly"""
  BI_WEEKLY

  """Monthly"""
  MONTHLY
}

type QuoteNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [QuoteNodeEdge]!
}

"""A Relay edge containing a `QuoteNode` and its cursor."""
type QuoteNodeEdge {
  """The item at the end of the edge"""
  node: QuoteNode

  """A cursor for use in pagination"""
  cursor: String!
}

type QuoteNode implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: UserNode
  updatedBy: UserNode

  """The ID of the object"""
  id: ID!

  """A helpful name to identify this quote"""
  description: String!
  menuItems(offset: Int, before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String, code: String, operator: BillingMenuItemOperatorChoices, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, child_Isnull: Boolean): MenuItemNodeConnection!

  """The total price per row, excluding add-ons, in cents"""
  pricePerRow: Int

  """The total price of add-ons in cents"""
  priceOfAddons: Int

  """The project that this quote relates to"""
  project: ProjectNode

  """The chosen quote that this task will be billed against"""
  task(offset: Int, before: String, after: String, first: Int, last: Int, title: String, title_Icontains: String, dueDate: DateTime, requestDate: DateTime, requester: ID, manager: ID, manager_Isnull: Boolean, enumStatus: String, enumStatus_In: [String], enumStatus_Icontains: String, status_Status: String, status_Status_In: [String], status_Status_Icontains: String, completedAt_Gte: DateTime, completedAt_Gt: DateTime, completedAt_Lte: DateTime, completedAt_Lt: DateTime, userTeam: ID, type: ID, associates: ID, associates_Isnull: Boolean, associates_In: [ID], projectLead: ID, projectLead_In: [ID], projectLead_Isnull: Boolean, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, dataSolution: String, billingStatus: String, qaStaff: ID, qaStaff_Isnull: Boolean, qaStaff_In: [ID], categories: ID, categories_Isnull: Boolean, categories_Name_Icontains: String, departments: ID, departments_Isnull: Boolean, departments_Name_Icontains: String, dataDeliveredQuantity_Gte: Int, dataDeliveredQuantity_Gt: Int, dataDeliveredQuantity_Lte: Int, dataDeliveredQuantity_Lt: Int, dataDeliveredQuantity_Isnull: Boolean, dataSampleDeliveredQuantity_Gte: Int, dataSampleDeliveredQuantity_Gt: Int, dataSampleDeliveredQuantity_Lte: Int, dataSampleDeliveredQuantity_Lt: Int, dataSampleDeliveredQuantity_Isnull: Boolean, projectType: String, projectType_Icontains: String, projectType_Isnull: Boolean, feedbacks_Isnull: Boolean, review_Isnull: Boolean, projectConfirmedAt_Gte: DateTime, projectConfirmedAt_Gt: DateTime, projectConfirmedAt_Lte: DateTime, projectConfirmedAt_Lt: DateTime, projectConfirmedAt: DateTime, projectConfirmedAt_Isnull: Boolean, projectDeliveredAt_Gte: DateTime, projectDeliveredAt_Gt: DateTime, projectDeliveredAt_Lte: DateTime, projectDeliveredAt_Lt: DateTime, projectDeliveredAt: DateTime, projectDeliveredAt_Isnull: Boolean, delegationFeedback_Isnull: Boolean, delegationImprovements_Isnull: Boolean, testing: Boolean, internal: Boolean): TaskNodeConnection!
}

type MenuItemNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [MenuItemNodeEdge]!
}

"""A Relay edge containing a `MenuItemNode` and its cursor."""
type MenuItemNodeEdge {
  """The item at the end of the edge"""
  node: MenuItemNode

  """A cursor for use in pagination"""
  cursor: String!
}

type MenuItemNode implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!

  """The ID of the object"""
  id: ID!

  """The price that the menu item is being offered at"""
  price: Decimal!

  """The name of the menu item to display"""
  name: String!

  """Internal identifier used for this menu item"""
  code: String!

  """If this menu item supersedes an older one, this would be its parent"""
  parent: MenuItemNode

  """
  How this price is to be calculated, i.e addition, subtraction or a multiplier
  """
  operator: BillingMenuItemOperatorChoices!

  """If this menu item supersedes an older one, this would be its parent"""
  child(offset: Int, before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String, code: String, operator: BillingMenuItemOperatorChoices, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, child_Isnull: Boolean): MenuItemNodeConnection!
  quotes(offset: Int, before: String, after: String, first: Int, last: Int, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, project_In: [ID], project_Team_BillingEmail_Iexact: String): QuoteNodeConnection!
  editable: Boolean
}

"""An enumeration."""
enum BillingMenuItemOperatorChoices {
  """ADD"""
  ADD

  """SUB"""
  SUB

  """MUL"""
  MUL

  """SIN_ADD"""
  SIN_ADD
}

type TaskNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [TaskNodeEdge]!
}

"""A Relay edge containing a `TaskNode` and its cursor."""
type TaskNodeEdge {
  """The item at the end of the edge"""
  node: TaskNode

  """A cursor for use in pagination"""
  cursor: String!
}

"""
Allows use of a JSON String for input / output from the GraphQL schema.

Use of this type is *not recommended* as you lose the benefits of having a defined, static
schema (one of the key benefits of GraphQL).
"""
scalar JSONString

type TaskStatusNode implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: UserNode
  updatedBy: UserNode

  """The ID of the object"""
  id: ID!
  status: String!
  labelColor: String!
  tasks(offset: Int, before: String, after: String, first: Int, last: Int, title: String, title_Icontains: String, dueDate: DateTime, requestDate: DateTime, requester: ID, manager: ID, manager_Isnull: Boolean, enumStatus: String, enumStatus_In: [String], enumStatus_Icontains: String, status_Status: String, status_Status_In: [String], status_Status_Icontains: String, completedAt_Gte: DateTime, completedAt_Gt: DateTime, completedAt_Lte: DateTime, completedAt_Lt: DateTime, userTeam: ID, type: ID, associates: ID, associates_Isnull: Boolean, associates_In: [ID], projectLead: ID, projectLead_In: [ID], projectLead_Isnull: Boolean, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, dataSolution: String, billingStatus: String, qaStaff: ID, qaStaff_Isnull: Boolean, qaStaff_In: [ID], categories: ID, categories_Isnull: Boolean, categories_Name_Icontains: String, departments: ID, departments_Isnull: Boolean, departments_Name_Icontains: String, dataDeliveredQuantity_Gte: Int, dataDeliveredQuantity_Gt: Int, dataDeliveredQuantity_Lte: Int, dataDeliveredQuantity_Lt: Int, dataDeliveredQuantity_Isnull: Boolean, dataSampleDeliveredQuantity_Gte: Int, dataSampleDeliveredQuantity_Gt: Int, dataSampleDeliveredQuantity_Lte: Int, dataSampleDeliveredQuantity_Lt: Int, dataSampleDeliveredQuantity_Isnull: Boolean, projectType: String, projectType_Icontains: String, projectType_Isnull: Boolean, feedbacks_Isnull: Boolean, review_Isnull: Boolean, projectConfirmedAt_Gte: DateTime, projectConfirmedAt_Gt: DateTime, projectConfirmedAt_Lte: DateTime, projectConfirmedAt_Lt: DateTime, projectConfirmedAt: DateTime, projectConfirmedAt_Isnull: Boolean, projectDeliveredAt_Gte: DateTime, projectDeliveredAt_Gt: DateTime, projectDeliveredAt_Lte: DateTime, projectDeliveredAt_Lt: DateTime, projectDeliveredAt: DateTime, projectDeliveredAt_Isnull: Boolean, delegationFeedback_Isnull: Boolean, delegationImprovements_Isnull: Boolean, testing: Boolean, internal: Boolean): TaskNodeConnection!
}

type TaskTypeNode implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: UserNode
  updatedBy: UserNode

  """The ID of the object"""
  id: ID!
  type: String!
  description: String!
  documentation: String
  labelColor: String!
  users(offset: Int, before: String, after: String, first: Int, last: Int, firstName: String, lastName: String, email: String, username: String, groups_Name: String): UserNodeConnection!
  visible: Boolean!
  tasks(offset: Int, before: String, after: String, first: Int, last: Int, title: String, title_Icontains: String, dueDate: DateTime, requestDate: DateTime, requester: ID, manager: ID, manager_Isnull: Boolean, enumStatus: String, enumStatus_In: [String], enumStatus_Icontains: String, status_Status: String, status_Status_In: [String], status_Status_Icontains: String, completedAt_Gte: DateTime, completedAt_Gt: DateTime, completedAt_Lte: DateTime, completedAt_Lt: DateTime, userTeam: ID, type: ID, associates: ID, associates_Isnull: Boolean, associates_In: [ID], projectLead: ID, projectLead_In: [ID], projectLead_Isnull: Boolean, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, dataSolution: String, billingStatus: String, qaStaff: ID, qaStaff_Isnull: Boolean, qaStaff_In: [ID], categories: ID, categories_Isnull: Boolean, categories_Name_Icontains: String, departments: ID, departments_Isnull: Boolean, departments_Name_Icontains: String, dataDeliveredQuantity_Gte: Int, dataDeliveredQuantity_Gt: Int, dataDeliveredQuantity_Lte: Int, dataDeliveredQuantity_Lt: Int, dataDeliveredQuantity_Isnull: Boolean, dataSampleDeliveredQuantity_Gte: Int, dataSampleDeliveredQuantity_Gt: Int, dataSampleDeliveredQuantity_Lte: Int, dataSampleDeliveredQuantity_Lt: Int, dataSampleDeliveredQuantity_Isnull: Boolean, projectType: String, projectType_Icontains: String, projectType_Isnull: Boolean, feedbacks_Isnull: Boolean, review_Isnull: Boolean, projectConfirmedAt_Gte: DateTime, projectConfirmedAt_Gt: DateTime, projectConfirmedAt_Lte: DateTime, projectConfirmedAt_Lt: DateTime, projectConfirmedAt: DateTime, projectConfirmedAt_Isnull: Boolean, projectDeliveredAt_Gte: DateTime, projectDeliveredAt_Gt: DateTime, projectDeliveredAt_Lte: DateTime, projectDeliveredAt_Lt: DateTime, projectDeliveredAt: DateTime, projectDeliveredAt_Isnull: Boolean, delegationFeedback_Isnull: Boolean, delegationImprovements_Isnull: Boolean, testing: Boolean, internal: Boolean): TaskNodeConnection!
  leadInterests(offset: Int, before: String, after: String, first: Int, last: Int, email: String, email_Icontains: String, email_Istartswith: String, firstName: String, firstName_Icontains: String, lastName: String, lastName_Icontains: String, company: String, company_Icontains: String, startupSize: String): UserLeadNodeConnection!
}

type UserLeadNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [UserLeadNodeEdge]!
}

"""A Relay edge containing a `UserLeadNode` and its cursor."""
type UserLeadNodeEdge {
  """The item at the end of the edge"""
  node: UserLeadNode

  """A cursor for use in pagination"""
  cursor: String!
}

type UserLeadNode implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: UserNode
  updatedBy: UserNode

  """The ID of the object"""
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  phone: String!
  contactMode: String
  preferredContactMode: String
  company: String
  website: String
  startupSize: String
  startupType: JSONString
  leadInterests(offset: Int, before: String, after: String, first: Int, last: Int, type: String, visible: Boolean): TaskTypeNodeConnection!
  leadPriorities: JSONString
  otherComments: String
  leadSource: String
  referralCode: String
  utmSource: String
  utmMedium: String
  utmCampaign: String
  utmTerm: String
  utmContent: String
  gclid: String
  fbclid: String
  complete: Boolean!
  user: UserNode
  knowToDelegate: Boolean!
  taskCards: JSONString
  slot: DateTime
  startupStage: String
  role: String
  timezone: String
}

type TaskTypeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [TaskTypeNodeEdge]!
}

"""A Relay edge containing a `TaskTypeNode` and its cursor."""
type TaskTypeNodeEdge {
  """The item at the end of the edge"""
  node: TaskTypeNode

  """A cursor for use in pagination"""
  cursor: String!
}

type TaskCategoryNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [TaskCategoryNodeEdge]!
}

"""A Relay edge containing a `TaskCategoryNode` and its cursor."""
type TaskCategoryNodeEdge {
  """The item at the end of the edge"""
  node: TaskCategoryNode

  """A cursor for use in pagination"""
  cursor: String!
}

type TaskCategoryNode implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: UserNode
  updatedBy: UserNode

  """The ID of the object"""
  id: ID!
  name: String!
  description: String!
  tasks(offset: Int, before: String, after: String, first: Int, last: Int, title: String, title_Icontains: String, dueDate: DateTime, requestDate: DateTime, requester: ID, manager: ID, manager_Isnull: Boolean, enumStatus: String, enumStatus_In: [String], enumStatus_Icontains: String, status_Status: String, status_Status_In: [String], status_Status_Icontains: String, completedAt_Gte: DateTime, completedAt_Gt: DateTime, completedAt_Lte: DateTime, completedAt_Lt: DateTime, userTeam: ID, type: ID, associates: ID, associates_Isnull: Boolean, associates_In: [ID], projectLead: ID, projectLead_In: [ID], projectLead_Isnull: Boolean, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, dataSolution: String, billingStatus: String, qaStaff: ID, qaStaff_Isnull: Boolean, qaStaff_In: [ID], categories: ID, categories_Isnull: Boolean, categories_Name_Icontains: String, departments: ID, departments_Isnull: Boolean, departments_Name_Icontains: String, dataDeliveredQuantity_Gte: Int, dataDeliveredQuantity_Gt: Int, dataDeliveredQuantity_Lte: Int, dataDeliveredQuantity_Lt: Int, dataDeliveredQuantity_Isnull: Boolean, dataSampleDeliveredQuantity_Gte: Int, dataSampleDeliveredQuantity_Gt: Int, dataSampleDeliveredQuantity_Lte: Int, dataSampleDeliveredQuantity_Lt: Int, dataSampleDeliveredQuantity_Isnull: Boolean, projectType: String, projectType_Icontains: String, projectType_Isnull: Boolean, feedbacks_Isnull: Boolean, review_Isnull: Boolean, projectConfirmedAt_Gte: DateTime, projectConfirmedAt_Gt: DateTime, projectConfirmedAt_Lte: DateTime, projectConfirmedAt_Lt: DateTime, projectConfirmedAt: DateTime, projectConfirmedAt_Isnull: Boolean, projectDeliveredAt_Gte: DateTime, projectDeliveredAt_Gt: DateTime, projectDeliveredAt_Lte: DateTime, projectDeliveredAt_Lt: DateTime, projectDeliveredAt: DateTime, projectDeliveredAt_Isnull: Boolean, delegationFeedback_Isnull: Boolean, delegationImprovements_Isnull: Boolean, testing: Boolean, internal: Boolean): TaskNodeConnection!
}

type TaskDepartmentNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [TaskDepartmentNodeEdge]!
}

"""A Relay edge containing a `TaskDepartmentNode` and its cursor."""
type TaskDepartmentNodeEdge {
  """The item at the end of the edge"""
  node: TaskDepartmentNode

  """A cursor for use in pagination"""
  cursor: String!
}

type TaskDepartmentNode implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: UserNode
  updatedBy: UserNode

  """The ID of the object"""
  id: ID!
  name: String!
  description: String!
  tasks(offset: Int, before: String, after: String, first: Int, last: Int, title: String, title_Icontains: String, dueDate: DateTime, requestDate: DateTime, requester: ID, manager: ID, manager_Isnull: Boolean, enumStatus: String, enumStatus_In: [String], enumStatus_Icontains: String, status_Status: String, status_Status_In: [String], status_Status_Icontains: String, completedAt_Gte: DateTime, completedAt_Gt: DateTime, completedAt_Lte: DateTime, completedAt_Lt: DateTime, userTeam: ID, type: ID, associates: ID, associates_Isnull: Boolean, associates_In: [ID], projectLead: ID, projectLead_In: [ID], projectLead_Isnull: Boolean, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, dataSolution: String, billingStatus: String, qaStaff: ID, qaStaff_Isnull: Boolean, qaStaff_In: [ID], categories: ID, categories_Isnull: Boolean, categories_Name_Icontains: String, departments: ID, departments_Isnull: Boolean, departments_Name_Icontains: String, dataDeliveredQuantity_Gte: Int, dataDeliveredQuantity_Gt: Int, dataDeliveredQuantity_Lte: Int, dataDeliveredQuantity_Lt: Int, dataDeliveredQuantity_Isnull: Boolean, dataSampleDeliveredQuantity_Gte: Int, dataSampleDeliveredQuantity_Gt: Int, dataSampleDeliveredQuantity_Lte: Int, dataSampleDeliveredQuantity_Lt: Int, dataSampleDeliveredQuantity_Isnull: Boolean, projectType: String, projectType_Icontains: String, projectType_Isnull: Boolean, feedbacks_Isnull: Boolean, review_Isnull: Boolean, projectConfirmedAt_Gte: DateTime, projectConfirmedAt_Gt: DateTime, projectConfirmedAt_Lte: DateTime, projectConfirmedAt_Lt: DateTime, projectConfirmedAt: DateTime, projectConfirmedAt_Isnull: Boolean, projectDeliveredAt_Gte: DateTime, projectDeliveredAt_Gt: DateTime, projectDeliveredAt_Lte: DateTime, projectDeliveredAt_Lt: DateTime, projectDeliveredAt: DateTime, projectDeliveredAt_Isnull: Boolean, delegationFeedback_Isnull: Boolean, delegationImprovements_Isnull: Boolean, testing: Boolean, internal: Boolean): TaskNodeConnection!
}

type TaskExpenseNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [TaskExpenseNodeEdge]!
}

"""A Relay edge containing a `TaskExpenseNode` and its cursor."""
type TaskExpenseNodeEdge {
  """The item at the end of the edge"""
  node: TaskExpenseNode

  """A cursor for use in pagination"""
  cursor: String!
}

type TaskExpenseNode implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: UserNode
  updatedBy: UserNode

  """The ID of the object"""
  id: ID!
  expenseItem: String!
  cost: Decimal!
  task: TaskNode
  receiptLink: String!
  sentInvoice: Boolean!
}

type TaskFileNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [TaskFileNodeEdge]!
}

"""A Relay edge containing a `TaskFileNode` and its cursor."""
type TaskFileNodeEdge {
  """The item at the end of the edge"""
  node: TaskFileNode

  """A cursor for use in pagination"""
  cursor: String!
}

type TaskFileNode implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: UserNode
  updatedBy: UserNode

  """The ID of the object"""
  id: ID!
  task: TaskNode
  fileLink: String!
  name: String!
  fileType: String!
}

type TaskFeedbackNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [TaskFeedbackNodeEdge]!
}

"""A Relay edge containing a `TaskFeedbackNode` and its cursor."""
type TaskFeedbackNodeEdge {
  """The item at the end of the edge"""
  node: TaskFeedbackNode

  """A cursor for use in pagination"""
  cursor: String!
}

type TaskFeedbackNode implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: UserNode
  updatedBy: UserNode

  """The ID of the object"""
  id: ID!
  giver: UserNode
  receiver: UserNode
  task: TaskNode
  question: JSONString
  answer: JSONString
  comment: JSONString
  reason: String
  isComplete: Boolean!
}

type TaskReviewNode implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!

  """The ID of the object"""
  id: ID!
  task: TaskNode!
  satisfactionRating: Int!
  satisfactionFeedback: String
  nps: Int
  npsFeedback: String
  status: TasksTaskReviewStatusChoices
  extraQuestions: JSONString
}

"""An enumeration."""
enum TasksTaskReviewStatusChoices {
  """Started"""
  STARTED

  """Completed"""
  COMPLETED
}

type QAStaffNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [QAStaffNodeEdge]!
}

"""A Relay edge containing a `QAStaffNode` and its cursor."""
type QAStaffNodeEdge {
  """The item at the end of the edge"""
  node: QAStaffNode

  """A cursor for use in pagination"""
  cursor: String!
}

type QAStaffNode implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!

  """The ID of the object"""
  id: ID!
  staffMember: UserNode!
  task: TaskNode!
  isLead: Boolean!
}

type ProjectNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ProjectNodeEdge]!
}

"""A Relay edge containing a `ProjectNode` and its cursor."""
type ProjectNodeEdge {
  """The item at the end of the edge"""
  node: ProjectNode

  """A cursor for use in pagination"""
  cursor: String!
}

type UserTestimonialNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [UserTestimonialNodeEdge]!
}

"""A Relay edge containing a `UserTestimonialNode` and its cursor."""
type UserTestimonialNodeEdge {
  """The item at the end of the edge"""
  node: UserTestimonialNode

  """A cursor for use in pagination"""
  cursor: String!
}

type UserTestimonialNode implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: UserNode
  updatedBy: UserNode

  """The ID of the object"""
  id: ID!
  user: UserNode
  userQuote: String!
  userFname: String!
  userLname: String!
  userHeadshot: String
  team: TeamNode
  teamLogo: String
  website: String
  teamName: String
  title: String
}

type PublicBlogPostNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [PublicBlogPostNodeEdge]!
}

"""A Relay edge containing a `PublicBlogPostNode` and its cursor."""
type PublicBlogPostNodeEdge {
  """The item at the end of the edge"""
  node: PublicBlogPostNode

  """A cursor for use in pagination"""
  cursor: String!
}

type PublicBlogPostNode implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!

  """The ID of the object"""
  id: ID!
  title: String
  slug: String!
  seoTitleTag: String
  seoMetaDescription: String
  description: String
  content: String
  mainImage: String
  author: UserNode
  category: BlogCategoryNode
  itemType: BlogBlogPostItemTypeChoices!
  wordCount: Int
  publishedOn: DateTime
  relatedArticles(offset: Int, before: String, after: String, first: Int, last: Int, category_Slug: String): PublicBlogPostNodeConnection!
  ctaText: String
  color: String
}

type BlogCategoryNode implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!

  """The ID of the object"""
  id: ID!
  name: String
  slug: String!
  seoTitleTag: String
  seoMetaDescription: String
  description: String
  blogPosts(offset: Int, before: String, after: String, first: Int, last: Int, category_Slug: String): PublicBlogPostNodeConnection!
}

"""An enumeration."""
enum BlogBlogPostItemTypeChoices {
  """BlogPosting"""
  BLOG_POSTING

  """FAQ"""
  F_A_Q_PAGE

  """HowTo"""
  HOW_TO
}

type UserStatusNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [UserStatusNodeEdge]!
}

"""A Relay edge containing a `UserStatusNode` and its cursor."""
type UserStatusNodeEdge {
  """The item at the end of the edge"""
  node: UserStatusNode

  """A cursor for use in pagination"""
  cursor: String!
}

type UserStatusNode implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: UserNode
  updatedBy: UserNode

  """The ID of the object"""
  id: ID!
  status: String!
  userProfiles(offset: Int, before: String, after: String, first: Int, last: Int, user: ID, user_FirstName: String, user_FirstName_Icontains: String, user_LastName: String, user_LastName_Icontains: String, user_Email: String, user_Email_Icontains: String, user_Groups: ID, user_Groups_In: [ID], address: String, city: String, country: String, phone: String, timezone: String, contactMode: String, billing: Boolean, auth0Id: String, profilePicture: String, onEmailList: Boolean, salary: Int, setupComplete: Boolean, title: String, titleDescription: String, birthDate: Date, status: ID, marketingChannel: ID, referredBy: ID, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, leadFlag: Boolean, surveyComplete: Boolean, department: String, department_Icontains: String, department_In: [String], satisfaction: String, satisfaction_Icontains: String, satisfaction_In: [String], engagement: String, engagement_Icontains: String, engagement_In: [String], contactOwner: ID): UserProfileNodeConnection!
}

type UserProfileNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [UserProfileNodeEdge]!
}

"""A Relay edge containing a `UserProfileNode` and its cursor."""
type UserProfileNodeEdge {
  """The item at the end of the edge"""
  node: UserProfileNode

  """A cursor for use in pagination"""
  cursor: String!
}

type UserProfileNode implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!

  """The ID of the object"""
  id: ID!
  user: UserNode!
  address: String
  city: String
  secondaryEmail: String
  country: String
  phone: String!
  timezone: String
  contactMode: String
  auth0Id: String
  profilePicture: String
  hourlyRate: Decimal
  salary: Int
  title: String
  titleDescription: String
  birthDate: Date
  otherServices: String
  role: String
  department: String
  status: UserStatusNode
  referredBy: PromoCodeNode
  marketingChannel: MarketingChannelNode
  manager: UserNode
  contactOwner: UserNode
  billing: Boolean!
  onEmailList: Boolean!
  setupComplete: Boolean!
  utmSource: String
  utmMedium: String
  utmCampaign: String
  utmTerm: String
  utmContent: String
  gclid: String
  fbclid: String
  tasksIndex: Int!
  lastTaskRequestedAt: DateTime
  preferredContactMode: String
  company: String
  website: String
  startupSize: String
  startupType: JSONString
  leadPriorities: JSONString
  otherComments: String
  leadSource: String
  surveyComplete: Boolean!
  leadFlag: Boolean!

  """How satisfied the user was with Pareto."""
  satisfaction: String!

  """The level of engagement the user had with Pareto."""
  engagement: String!
}

"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

type MarketingChannelNode implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: UserNode
  updatedBy: UserNode

  """The ID of the object"""
  id: ID!
  label: String!
  show: Boolean!
  value: Int!
  userProfiles(offset: Int, before: String, after: String, first: Int, last: Int, user: ID, user_FirstName: String, user_FirstName_Icontains: String, user_LastName: String, user_LastName_Icontains: String, user_Email: String, user_Email_Icontains: String, user_Groups: ID, user_Groups_In: [ID], address: String, city: String, country: String, phone: String, timezone: String, contactMode: String, billing: Boolean, auth0Id: String, profilePicture: String, onEmailList: Boolean, salary: Int, setupComplete: Boolean, title: String, titleDescription: String, birthDate: Date, status: ID, marketingChannel: ID, referredBy: ID, createdAt_Gte: DateTime, createdAt_Gt: DateTime, createdAt_Lte: DateTime, createdAt_Lt: DateTime, leadFlag: Boolean, surveyComplete: Boolean, department: String, department_Icontains: String, department_In: [String], satisfaction: String, satisfaction_Icontains: String, satisfaction_In: [String], engagement: String, engagement_Icontains: String, engagement_In: [String], contactOwner: ID): UserProfileNodeConnection!
}

type StageNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [StageNodeEdge]!
}

"""A Relay edge containing a `StageNode` and its cursor."""
type StageNodeEdge {
  """The item at the end of the edge"""
  node: StageNode

  """A cursor for use in pagination"""
  cursor: String!
}

type UserSegmentNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [UserSegmentNodeEdge]!
}

"""A Relay edge containing a `UserSegmentNode` and its cursor."""
type UserSegmentNodeEdge {
  """The item at the end of the edge"""
  node: UserSegmentNode

  """A cursor for use in pagination"""
  cursor: String!
}

type UserSegmentNode implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: UserNode
  updatedBy: UserNode

  """The ID of the object"""
  id: ID!
  segment: String!
  label: String
  users(offset: Int, before: String, after: String, first: Int, last: Int, firstName: String, lastName: String, email: String, username: String, groups_Name: String): UserNodeConnection!
  value: Int!
}

type UserNoteNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [UserNoteNodeEdge]!
}

"""A Relay edge containing a `UserNoteNode` and its cursor."""
type UserNoteNodeEdge {
  """The item at the end of the edge"""
  node: UserNoteNode

  """A cursor for use in pagination"""
  cursor: String!
}

type UserNoteNode implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!

  """The ID of the object"""
  id: ID!
  note: String!
  user: UserNode
  date: Date!
  notetaker: UserNode
}

type UserFeedbackNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [UserFeedbackNodeEdge]!
}

"""A Relay edge containing a `UserFeedbackNode` and its cursor."""
type UserFeedbackNodeEdge {
  """The item at the end of the edge"""
  node: UserFeedbackNode

  """A cursor for use in pagination"""
  cursor: String!
}

type UserFeedbackNode implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: UserNode
  updatedBy: UserNode

  """The ID of the object"""
  id: ID!
  user: UserNode!
  survey: String!
  nps: Int!
  reason: String
  comments: String
}

type PromoCodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [PromoCodeNodeEdge]!
}

"""A Relay edge containing a `PromoCodeNode` and its cursor."""
type PromoCodeNodeEdge {
  """The item at the end of the edge"""
  node: PromoCodeNode

  """A cursor for use in pagination"""
  cursor: String!
}

type TaskInterestNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [TaskInterestNodeEdge]!
}

"""A Relay edge containing a `TaskInterestNode` and its cursor."""
type TaskInterestNodeEdge {
  """The item at the end of the edge"""
  node: TaskInterestNode

  """A cursor for use in pagination"""
  cursor: String!
}

type TaskInterestNode implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!

  """The ID of the object"""
  id: ID!
  label: String!
  description: String
  hubspotLabel: String
  users(offset: Int, before: String, after: String, first: Int, last: Int, firstName: String, lastName: String, email: String, username: String, groups_Name: String): UserNodeConnection!
}

type TaskStatusNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [TaskStatusNodeEdge]!
}

"""A Relay edge containing a `TaskStatusNode` and its cursor."""
type TaskStatusNodeEdge {
  """The item at the end of the edge"""
  node: TaskStatusNode

  """A cursor for use in pagination"""
  cursor: String!
}

type EmailListNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [EmailListNodeEdge]!
}

"""A Relay edge containing a `EmailListNode` and its cursor."""
type EmailListNodeEdge {
  """The item at the end of the edge"""
  node: EmailListNode

  """A cursor for use in pagination"""
  cursor: String!
}

type EmailListNode implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: UserNode
  updatedBy: UserNode

  """The ID of the object"""
  id: ID!
  type: String!
  description: String!
  users(offset: Int, before: String, after: String, first: Int, last: Int, firstName: String, lastName: String, email: String, username: String, groups_Name: String): UserNodeConnection!
}

type MessageTemplateNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [MessageTemplateNodeEdge]!
}

"""A Relay edge containing a `MessageTemplateNode` and its cursor."""
type MessageTemplateNodeEdge {
  """The item at the end of the edge"""
  node: MessageTemplateNode

  """A cursor for use in pagination"""
  cursor: String!
}

type MessageTemplateNode implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: UserNode
  updatedBy: UserNode

  """The ID of the object"""
  id: ID!
  goal: String!
  content: String
  subject: String
  contactLogs(offset: Int, before: String, after: String, first: Int, last: Int, email: String, dateSent: DateTime): ContactLogNodeConnection!
}

type ContactLogNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ContactLogNodeEdge]!
}

"""A Relay edge containing a `ContactLogNode` and its cursor."""
type ContactLogNodeEdge {
  """The item at the end of the edge"""
  node: ContactLogNode

  """A cursor for use in pagination"""
  cursor: String!
}

type ContactLogNode implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: UserNode
  updatedBy: UserNode

  """The ID of the object"""
  id: ID!
  body: String!
  dateSent: DateTime!
  responseReceived: Boolean!
  messageType: MessageTemplateNode
  partner: UserNode
  email: String!
  client: UserNode
}

type MarketingChannelNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [MarketingChannelNodeEdge]!
}

"""A Relay edge containing a `MarketingChannelNode` and its cursor."""
type MarketingChannelNodeEdge {
  """The item at the end of the edge"""
  node: MarketingChannelNode

  """A cursor for use in pagination"""
  cursor: String!
}

type MarketingEmailLogNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [MarketingEmailLogNodeEdge]!
}

"""A Relay edge containing a `MarketingEmailLogNode` and its cursor."""
type MarketingEmailLogNodeEdge {
  """The item at the end of the edge"""
  node: MarketingEmailLogNode

  """A cursor for use in pagination"""
  cursor: String!
}

type MarketingEmailLogNode implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!

  """The ID of the object"""
  id: ID!
  objectId: String!
  recipient: UserNode!
  topic: MarketingMarketingEmailLogTopicChoices!
}

"""An enumeration."""
enum MarketingMarketingEmailLogTopicChoices {
  """Task Feedback Ask"""
  TASK_FEEDBACK_ASK
}

"""
Leverages the internal Python implementation of UUID (uuid.UUID) to provide native UUID objects
in fields, resolvers and input.
"""
scalar UUID

type TaskReviewNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [TaskReviewNodeEdge]!
}

"""A Relay edge containing a `TaskReviewNode` and its cursor."""
type TaskReviewNodeEdge {
  """The item at the end of the edge"""
  node: TaskReviewNode

  """A cursor for use in pagination"""
  cursor: String!
}

input UserInput {
  userId: UUID!
  survey: String!
}

type BlogCategoryNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [BlogCategoryNodeEdge]!
}

"""A Relay edge containing a `BlogCategoryNode` and its cursor."""
type BlogCategoryNodeEdge {
  """The item at the end of the edge"""
  node: BlogCategoryNode

  """A cursor for use in pagination"""
  cursor: String!
}

type BlogPostNode implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!

  """The ID of the object"""
  id: ID!
  title: String
  slug: String!
  seoTitleTag: String
  seoMetaDescription: String
  description: String
  content: String
  mainImage: String
  author: UserNode
  category: BlogCategoryNode
  itemType: BlogBlogPostItemTypeChoices!
  wordCount: Int
  publishedOn: DateTime
  relatedArticles(offset: Int, before: String, after: String, first: Int, last: Int, category_Slug: String): PublicBlogPostNodeConnection!
  ctaText: String
  color: String
}

type BlogPostNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [BlogPostNodeEdge]!
}

"""A Relay edge containing a `BlogPostNode` and its cursor."""
type BlogPostNodeEdge {
  """The item at the end of the edge"""
  node: BlogPostNode

  """A cursor for use in pagination"""
  cursor: String!
}

type OAuth2LinksProvider {
  """Login link for google authentication"""
  google: String!
}

type Mutation {
  createTask(input: CreateTaskMutationInput!): CreateTaskMutationPayload
  updateTask(input: UpdateTaskMutationInput!): UpdateTaskMutationPayload
  deleteTask(input: UUIDInput!): UUID
  createTaskStatus(input: CreateTaskStatusMutationInput!): CreateTaskStatusMutationPayload
  updateTaskStatus(input: UpdateTaskStatusMutationInput!): UpdateTaskStatusMutationPayload
  deleteTaskStatus(input: UUIDInput!): UUID
  createTaskExpense(input: CreateTaskExpenseMutationInput!): CreateTaskExpenseMutationPayload
  updateTaskExpense(input: UpdateTaskExpenseMutationInput!): UpdateTaskExpenseMutationPayload
  deleteTaskExpense(input: UUIDInput!): UUID
  createTaskFeedback(input: CreateTaskFeedbackMutationInput!): CreateTaskFeedbackMutationPayload
  updateTaskFeedback(input: UpdateTaskFeedbackMutationInput!): UpdateTaskFeedbackMutationPayload
  deleteTaskFeedback(input: UUIDInput!): UUID
  createTaskInterest(input: CreateTaskInterestMutationInput!): CreateTaskInterestMutationPayload
  updateTaskInterest(input: UpdateTaskInterestMutationInput!): UpdateTaskInterestMutationPayload
  deleteTaskInterest(input: UUIDInput!): UUID
  createTaskType(input: CreateTaskTypeMutationInput!): CreateTaskTypeMutationPayload
  updateTaskType(input: UpdateTaskTypeMutationInput!): UpdateTaskTypeMutationPayload
  deleteTaskType(input: UUIDInput!): UUID
  createTaskDepartment(input: CreateTaskDepartmentMutationInput!): CreateTaskDepartmentMutationPayload
  updateTaskDepartment(input: UpdateTaskDepartmentMutationInput!): UpdateTaskDepartmentMutationPayload
  deleteTaskDepartment(input: UUIDInput!): UUID
  createTaskCategory(input: CreateTaskCategoryMutationInput!): CreateTaskCategoryMutationPayload
  updateTaskCategory(input: UpdateTaskCategoryMutationInput!): UpdateTaskCategoryMutationPayload
  deleteTaskCategory(input: UUIDInput!): UUID
  createTaskFile(input: CreateTaskFileMutationInput!): CreateTaskFileMutationPayload
  updateTaskFile(input: UpdateTaskFileMutationInput!): UpdateTaskFileMutationPayload
  deleteTaskFile(input: UUIDInput!): UUID
  createTaskReview(input: CreateTaskReviewMutationInput!): CreateTaskReviewMutationPayload
  updateTaskReview(input: UpdateTaskReviewMutationInput!): UpdateTaskReviewMutationPayload
  deleteTaskReview(input: UUIDInput!): UUID
  upsertTaskReview(taskId: UUID!, input: UpsertTaskReviewInput!): TaskReviewNode
  createProject(input: CreateProjectMutationInput!): CreateProjectMutationPayload
  updateProject(input: UpdateProjectMutationInput!): UpdateProjectMutationPayload
  deleteProject(input: UUIDInput!): UUID
  createUserEmailList(input: EmailListUserInput!): UUID
  createEmailList(input: CreateEmailListMutationInput!): CreateEmailListMutationPayload
  updateEmailList(input: UpdateEmailListMutationInput!): UpdateEmailListMutationPayload
  deleteEmailList(input: UUIDInput!): UUID
  createMessageTemplate(input: CreateMessageTemplateMutationInput!): CreateMessageTemplateMutationPayload
  updateMessageTemplate(input: UpdateMessageTemplateMutationInput!): UpdateMessageTemplateMutationPayload
  deleteMessageTemplate(input: UUIDInput!): UUID
  createMarketingChannel(input: CreateMarketingChannelMutationInput!): CreateMarketingChannelMutationPayload
  updateMarketingChannel(input: UpdateMarketingChannelMutationInput!): UpdateMarketingChannelMutationPayload
  deleteMarketingChannel(input: UUIDInput!): UUID
  createContactLog(input: CreateContactLogMutationInput!): CreateContactLogMutationPayload
  updateContactLog(input: UpdateContactLogMutationInput!): UpdateContactLogMutationPayload
  deleteContactLog(input: UUIDInput!): UUID
  createUserTestimonial(input: CreateUserTestimonialMutationInput!): CreateUserTestimonialMutationPayload
  updateUserTestimonial(input: UpdateUserTestimonialMutationInput!): UpdateUserTestimonialMutationPayload
  deleteUserTestimonial(input: UUIDInput!): UUID
  createUserLead(input: CreateUserLeadMutationInput!): CreateUserLeadMutationPayload
  updateUserLead(input: UpdateUserLeadMutationInput!): UpdateUserLeadMutationPayload
  deleteUserLead(input: UUIDInput!): UUID
  createMarketingEmailLog(input: CreateMarketingEmailLogMutationInput!): CreateMarketingEmailLogMutationPayload
  updateMarketingEmailLog(input: UpdateMarketingEmailLogMutationInput!): UpdateMarketingEmailLogMutationPayload
  deleteMarketingEmailLog(input: UUIDInput!): UUID
  createPromoCode(input: CreatePromoCodeMutationInput!): CreatePromoCodeMutationPayload
  updatePromoCode(input: UpdatePromoCodeMutationInput!): UpdatePromoCodeMutationPayload
  deletePromoCode(input: UUIDInput!): UUID
  createWorkHours(input: CreateWorkHoursMutationInput!): CreateWorkHoursMutationPayload
  updateWorkHours(input: UpdateWorkHoursMutationInput!): UpdateWorkHoursMutationPayload
  deleteWorkHours(input: UUIDInput!): UUID
  markWorkHours(input: MarkWorkHoursInput!): Int
  startWorkHour(input: StartWorkHoursFiltersInput!): UUID
  endWorkHour(id: UUID!): Int
  deleteUserWorkHour(id: UUID!): Int
  initiatePreAuthorizationEvent(input: String!): Int
  generateInvoiceFromTask(input: String!): Int
  createMenuItem(input: CreateMenuItemMutationInput!): CreateMenuItemMutationPayload
  updateMenuItem(input: UpdateOrVersionMenuItemMutationInput!): UpdateOrVersionMenuItemMutationPayload
  createQuote(input: CreateQuoteMutationInput!): CreateQuoteMutationPayload
  updateQuote(input: UpdateQuoteMutationInput!): UpdateQuoteMutationPayload
  passwordAuth(input: PasswordAuthInput!): PasswordAuthPayload
  codeExchangeAuth(input: CodeExchangeAuthInput!): CodeExchangeAuthPayload
  magicLinkAuth(input: MagicLinkAuthInput!): MagicLinkAuthPayload
  googleAccessTokenAuth(input: GoogleAccessTokenAuthInput!): GoogleAccessTokenAuthPayload
  verifyToken(input: VerifyInput!): VerifyPayload
  refreshToken(input: RefreshInput!): RefreshPayload
  deleteTokenCookie(input: DeleteJSONWebTokenCookieInput!): DeleteJSONWebTokenCookiePayload
  deleteRefreshTokenCookie(input: DeleteRefreshTokenCookieInput!): DeleteRefreshTokenCookiePayload
  revokeToken(input: RevokeInput!): RevokePayload
  createClient(input: CreateClientInput!): CreateClientPayload
  updateClient(input: UpdateClientInput!): UpdateClientPayload
  deleteUser(input: UUIDInput!): UUID
  createWmsClient(input: CreateWmsClientInput!): CreateWmsClientPayload
  updateWmsClient(input: UpdateWmsClientInput!): UpdateWmsClientPayload
  onboardClient(input: OnboardClientInput!): OnboardClientPayload
  createTeam(input: CreateTeamMutationInput!): CreateTeamMutationPayload
  updateTeam(input: UpdateTeamMutationInput!): UpdateTeamMutationPayload
  deleteTeam(input: UUIDInput!): UUID
  createUserTeam(input: UserTeamInput!): UUID
  deleteUserTeam(input: DeleteUserTeamInput!): UUID
  createStage(input: CreateStageMutationInput!): CreateStageMutationPayload
  updateStage(input: UpdateStageMutationInput!): UpdateStageMutationPayload
  deleteStage(input: UUIDInput!): UUID
  createIndustry(input: CreateIndustryMutationInput!): CreateIndustryMutationPayload
  updateIndustry(input: UpdateIndustryMutationInput!): UpdateIndustryMutationPayload
  deleteIndustry(input: DeleteIndustryMutationInput!): DeleteIndustryMutationPayload
  createCompanyTag(input: CreateCompanyTagMutationInput!): CreateCompanyTagMutationPayload
  updateCompanyTag(input: UpdateCompanyTagMutationInput!): UpdateCompanyTagMutationPayload
  deleteCompanyTag(input: DeleteCompanyTagMutationInput!): DeleteCompanyTagMutationPayload
  createUserNote(input: CreateUserNoteMutationInput!): CreateUserNoteMutationPayload
  updateUserNote(input: UpdateUserNoteMutationInput!): UpdateUserNoteMutationPayload
  deleteUserNote(input: UUIDInput!): UUID
  createUserFeedback(input: CreateUserFeedbackMutationInput!): CreateUserFeedbackMutationPayload
  updateUserFeedback(input: UpdateUserFeedbackMutationInput!): UpdateUserFeedbackMutationPayload
  deleteUserFeedback(input: UUIDInput!): UUID
  createTeamPaymentSetupIntent(input: SetupPaymentInput!): String
  upsertUserSurvey(input: UpsertUserSurveyMutationInput!): UpsertUserSurveyMutationPayload
}

type CreateTaskMutationPayload {
  id: String
  associates: [String]
  qaStaff: [String]
  categories: [String]
  departments: [String]
  createdAt: DateTime
  updatedAt: DateTime
  description: String
  dueDate: DateTime
  links: String
  repeat: Boolean
  repeatDetails: JSONString
  enumStatus: enum_status
  version: Decimal
  completedAt: DateTime
  testing: Boolean
  internal: Boolean
  title: String
  timecap: Decimal
  requestDate: DateTime
  completionDate: DateTime
  urgent: Boolean
  evening: Boolean
  weekend: Boolean
  isPublic: Boolean
  query: String
  userTeamIndex: Decimal
  dataSpreadsheet: String
  dataCategory: String
  dataCategoryNotes: String
  dataSolution: data_solution
  dataTargetSources: JSONString
  dataTargetFilters: JSONString
  dataTargetColumns: JSONString
  dataTargetQuantity: Int
  dataSampleTargetQuantity: Int
  qaProcess: String
  qaSampleSize: Int
  qaTargetPercentage: Decimal
  deliveryInstructions: String
  deliveryTargetChannels: JSONString
  billingStatus: billing_status
  indexByTeam: Int
  indexByRequester: Int
  dataSampleDeliveredQuantity: Int
  dataDeliveredQuantity: Int
  projectType: String
  projectConfirmedAt: DateTime
  projectDeliveredAt: DateTime
  delegationFeedback: String
  delegationImprovements: String
  createdBy: String
  updatedBy: String

  """The project that this task belongs to"""
  project: String

  """The chosen quote that this task will be billed against"""
  quote: String
  requester: String
  userTeam: String
  manager: String
  projectLead: String
  status: String
  type: String
  subTasks: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

"""An enumeration."""
enum enum_status {
  """Backlog"""
  BACKLOG

  """In Progress"""
  IN_PROGRESS

  """In Review"""
  IN_REVIEW

  """Requested"""
  REQUESTED

  """Blocked"""
  BLOCKED

  """Completed"""
  COMPLETED
}

"""An enumeration."""
enum data_solution {
  """Lead Generation"""
  LG

  """Competitive Research"""
  CR

  """Investors Lookup"""
  IL

  """Marketing Lookup"""
  ML

  """Other"""
  OT
}

"""An enumeration."""
enum billing_status {
  """Estimated"""
  EST

  """Invoiced"""
  INV

  """Paid"""
  PAD

  """Voided"""
  VOI

  """Other"""
  OT
}

type ErrorType {
  field: String!
  messages: [String!]!
}

input CreateTaskMutationInput {
  id: String
  associates: [String]
  qaStaff: [String]
  categories: [String]
  departments: [String]
  description: String
  dueDate: DateTime!
  links: String
  repeat: Boolean
  repeatDetails: JSONString!
  enumStatus: enum_status
  version: Decimal
  completedAt: DateTime
  testing: Boolean
  internal: Boolean
  title: String!
  timecap: Decimal
  requestDate: DateTime!
  completionDate: DateTime
  urgent: Boolean
  evening: Boolean
  weekend: Boolean
  isPublic: Boolean
  query: String
  userTeamIndex: Decimal
  dataSpreadsheet: String
  dataCategory: String
  dataCategoryNotes: String
  dataSolution: data_solution
  dataTargetSources: JSONString
  dataTargetFilters: JSONString
  dataTargetColumns: JSONString
  dataTargetQuantity: Int
  dataSampleTargetQuantity: Int
  qaProcess: String
  qaSampleSize: Int
  qaTargetPercentage: Decimal
  deliveryInstructions: String
  deliveryTargetChannels: JSONString
  billingStatus: billing_status
  indexByTeam: Int
  indexByRequester: Int
  dataSampleDeliveredQuantity: Int
  dataDeliveredQuantity: Int
  projectType: String
  projectConfirmedAt: DateTime
  projectDeliveredAt: DateTime
  delegationFeedback: String
  delegationImprovements: String

  """The project that this task belongs to"""
  project: String

  """The chosen quote that this task will be billed against"""
  quote: String
  requester: String
  userTeam: String
  manager: String
  projectLead: String
  status: String
  type: String
  subTasks: String
  clientMutationId: String
}

type UpdateTaskMutationPayload {
  id: String
  associates: [String]
  qaStaff: [String]
  categories: [String]
  departments: [String]
  createdAt: DateTime
  updatedAt: DateTime
  description: String
  dueDate: DateTime
  links: String
  repeat: Boolean
  repeatDetails: JSONString
  enumStatus: enum_status
  version: Decimal
  completedAt: DateTime
  testing: Boolean
  internal: Boolean
  title: String
  timecap: Decimal
  requestDate: DateTime
  completionDate: DateTime
  urgent: Boolean
  evening: Boolean
  weekend: Boolean
  isPublic: Boolean
  query: String
  userTeamIndex: Decimal
  dataSpreadsheet: String
  dataCategory: String
  dataCategoryNotes: String
  dataSolution: data_solution
  dataTargetSources: JSONString
  dataTargetFilters: JSONString
  dataTargetColumns: JSONString
  dataTargetQuantity: Int
  dataSampleTargetQuantity: Int
  qaProcess: String
  qaSampleSize: Int
  qaTargetPercentage: Decimal
  deliveryInstructions: String
  deliveryTargetChannels: JSONString
  billingStatus: billing_status
  indexByTeam: Int
  indexByRequester: Int
  dataSampleDeliveredQuantity: Int
  dataDeliveredQuantity: Int
  projectType: String
  projectConfirmedAt: DateTime
  projectDeliveredAt: DateTime
  delegationFeedback: String
  delegationImprovements: String
  createdBy: String
  updatedBy: String

  """The project that this task belongs to"""
  project: String

  """The chosen quote that this task will be billed against"""
  quote: String
  requester: String
  userTeam: String
  manager: String
  projectLead: String
  status: String
  type: String
  subTasks: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input UpdateTaskMutationInput {
  id: String
  associates: [String]
  qaStaff: [String]
  categories: [String]
  departments: [String]
  description: String
  dueDate: DateTime
  links: String
  repeat: Boolean
  repeatDetails: JSONString
  enumStatus: enum_status
  version: Decimal
  completedAt: DateTime
  testing: Boolean
  internal: Boolean
  title: String
  timecap: Decimal
  requestDate: DateTime
  completionDate: DateTime
  urgent: Boolean
  evening: Boolean
  weekend: Boolean
  isPublic: Boolean
  query: String
  userTeamIndex: Decimal
  dataSpreadsheet: String
  dataCategory: String
  dataCategoryNotes: String
  dataSolution: data_solution
  dataTargetSources: JSONString
  dataTargetFilters: JSONString
  dataTargetColumns: JSONString
  dataTargetQuantity: Int
  dataSampleTargetQuantity: Int
  qaProcess: String
  qaSampleSize: Int
  qaTargetPercentage: Decimal
  deliveryInstructions: String
  deliveryTargetChannels: JSONString
  billingStatus: billing_status
  indexByTeam: Int
  indexByRequester: Int
  dataSampleDeliveredQuantity: Int
  dataDeliveredQuantity: Int
  projectType: String
  projectConfirmedAt: DateTime
  projectDeliveredAt: DateTime
  delegationFeedback: String
  delegationImprovements: String

  """The project that this task belongs to"""
  project: String

  """The chosen quote that this task will be billed against"""
  quote: String
  requester: String
  userTeam: String
  manager: String
  projectLead: String
  status: String
  type: String
  subTasks: String
  clientMutationId: String
}

input UUIDInput {
  id: UUID!
}

type CreateTaskStatusMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  status: String
  labelColor: String
  createdBy: String
  updatedBy: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input CreateTaskStatusMutationInput {
  id: String
  status: String!
  labelColor: String
  clientMutationId: String
}

type UpdateTaskStatusMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  status: String
  labelColor: String
  createdBy: String
  updatedBy: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input UpdateTaskStatusMutationInput {
  id: String
  status: String
  labelColor: String
  clientMutationId: String
}

type CreateTaskExpenseMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  expenseItem: String
  cost: Decimal
  receiptLink: String
  sentInvoice: Boolean
  createdBy: String
  updatedBy: String
  task: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input CreateTaskExpenseMutationInput {
  id: String
  expenseItem: String!
  cost: Decimal
  receiptLink: String!
  sentInvoice: Boolean
  task: String
  clientMutationId: String
}

type UpdateTaskExpenseMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  expenseItem: String
  cost: Decimal
  receiptLink: String
  sentInvoice: Boolean
  createdBy: String
  updatedBy: String
  task: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input UpdateTaskExpenseMutationInput {
  id: String
  expenseItem: String
  cost: Decimal
  receiptLink: String
  sentInvoice: Boolean
  task: String
  clientMutationId: String
}

type CreateTaskFeedbackMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  question: JSONString
  answer: JSONString
  comment: JSONString
  reason: String
  isComplete: Boolean
  createdBy: String
  updatedBy: String
  giver: String
  receiver: String
  task: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input CreateTaskFeedbackMutationInput {
  id: String
  question: JSONString
  answer: JSONString
  comment: JSONString
  reason: String
  isComplete: Boolean
  giver: String
  receiver: String
  task: String
  clientMutationId: String
}

type UpdateTaskFeedbackMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  question: JSONString
  answer: JSONString
  comment: JSONString
  reason: String
  isComplete: Boolean
  createdBy: String
  updatedBy: String
  giver: String
  receiver: String
  task: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input UpdateTaskFeedbackMutationInput {
  id: String
  question: JSONString
  answer: JSONString
  comment: JSONString
  reason: String
  isComplete: Boolean
  giver: String
  receiver: String
  task: String
  clientMutationId: String
}

type CreateTaskInterestMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  label: String
  description: String
  hubspotLabel: String
  users: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input CreateTaskInterestMutationInput {
  id: String
  label: String!
  description: String
  hubspotLabel: String
  users: String
  clientMutationId: String
}

type UpdateTaskInterestMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  label: String
  description: String
  hubspotLabel: String
  users: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input UpdateTaskInterestMutationInput {
  id: String
  label: String
  description: String
  hubspotLabel: String
  users: String
  clientMutationId: String
}

type CreateTaskTypeMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  type: String
  description: String
  documentation: String
  labelColor: String
  visible: Boolean
  createdBy: String
  updatedBy: String
  users: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input CreateTaskTypeMutationInput {
  id: String
  type: String!
  description: String!
  documentation: String
  labelColor: String
  visible: Boolean
  users: String
  clientMutationId: String
}

type UpdateTaskTypeMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  type: String
  description: String
  documentation: String
  labelColor: String
  visible: Boolean
  createdBy: String
  updatedBy: String
  users: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input UpdateTaskTypeMutationInput {
  id: String
  type: String
  description: String
  documentation: String
  labelColor: String
  visible: Boolean
  users: String
  clientMutationId: String
}

type CreateTaskDepartmentMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  description: String
  createdBy: String
  updatedBy: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input CreateTaskDepartmentMutationInput {
  id: String
  name: String!
  description: String!
  clientMutationId: String
}

type UpdateTaskDepartmentMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  description: String
  createdBy: String
  updatedBy: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input UpdateTaskDepartmentMutationInput {
  id: String
  name: String
  description: String
  clientMutationId: String
}

type CreateTaskCategoryMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  description: String
  createdBy: String
  updatedBy: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input CreateTaskCategoryMutationInput {
  id: String
  name: String!
  description: String!
  clientMutationId: String
}

type UpdateTaskCategoryMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  description: String
  createdBy: String
  updatedBy: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input UpdateTaskCategoryMutationInput {
  id: String
  name: String
  description: String
  clientMutationId: String
}

type CreateTaskFileMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  fileLink: String
  name: String
  fileType: String
  createdBy: String
  updatedBy: String
  task: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input CreateTaskFileMutationInput {
  id: String
  fileLink: String!
  name: String!
  fileType: String!
  task: String
  clientMutationId: String
}

type UpdateTaskFileMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  fileLink: String
  name: String
  fileType: String
  createdBy: String
  updatedBy: String
  task: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input UpdateTaskFileMutationInput {
  id: String
  fileLink: String
  name: String
  fileType: String
  task: String
  clientMutationId: String
}

type CreateTaskReviewMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  satisfactionRating: Int
  satisfactionFeedback: String
  nps: Int
  npsFeedback: String
  status: status
  extraQuestions: JSONString
  task: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

"""An enumeration."""
enum status {
  """Started"""
  STARTED

  """Completed"""
  COMPLETED
}

input CreateTaskReviewMutationInput {
  id: String
  satisfactionRating: Int!
  satisfactionFeedback: String
  nps: Int
  npsFeedback: String
  status: status
  extraQuestions: JSONString
  task: String!
  clientMutationId: String
}

type UpdateTaskReviewMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  satisfactionRating: Int
  satisfactionFeedback: String
  nps: Int
  npsFeedback: String
  status: status
  extraQuestions: JSONString
  task: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input UpdateTaskReviewMutationInput {
  id: String
  satisfactionRating: Int
  satisfactionFeedback: String
  nps: Int
  npsFeedback: String
  status: status
  extraQuestions: JSONString
  task: String
  clientMutationId: String
}

input UpsertTaskReviewInput {
  satisfactionRating: Int
  satisfactionFeedback: String
  status: String
}

type CreateProjectMutationPayload {
  id: String
  createdAt: DateTime
  quotes: [String]
  updatedAt: DateTime

  """The name of this project"""
  title: String

  """This task's repetition schedule, if any"""
  frequency: String
  createdBy: String
  updatedBy: String

  """The account (team) that this project is for"""
  team: String

  """The member of the team that requested this project"""
  requester: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input CreateProjectMutationInput {
  id: String
  quotes: [String]

  """The name of this project"""
  title: String

  """This task's repetition schedule, if any"""
  frequency: String

  """The account (team) that this project is for"""
  team: String!

  """The member of the team that requested this project"""
  requester: String!
  clientMutationId: String
}

type UpdateProjectMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime

  """The name of this project"""
  title: String

  """This task's repetition schedule, if any"""
  frequency: String
  createdBy: String
  updatedBy: String

  """The account (team) that this project is for"""
  team: String

  """The member of the team that requested this project"""
  requester: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input UpdateProjectMutationInput {
  id: String

  """The name of this project"""
  title: String

  """This task's repetition schedule, if any"""
  frequency: String

  """The account (team) that this project is for"""
  team: String

  """The member of the team that requested this project"""
  requester: String
  clientMutationId: String
}

input EmailListUserInput {
  userId: UUID!
  emailListId: UUID!
}

type CreateEmailListMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  type: String
  description: String
  createdBy: String
  updatedBy: String
  users: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input CreateEmailListMutationInput {
  id: String
  type: String!
  description: String!
  users: String
  clientMutationId: String
}

type UpdateEmailListMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  type: String
  description: String
  createdBy: String
  updatedBy: String
  users: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input UpdateEmailListMutationInput {
  id: String
  type: String
  description: String
  users: String
  clientMutationId: String
}

type CreateMessageTemplateMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  goal: String
  content: String
  subject: String
  createdBy: String
  updatedBy: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input CreateMessageTemplateMutationInput {
  id: String
  goal: String!
  content: String
  subject: String
  clientMutationId: String
}

type UpdateMessageTemplateMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  goal: String
  content: String
  subject: String
  createdBy: String
  updatedBy: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input UpdateMessageTemplateMutationInput {
  id: String
  goal: String
  content: String
  subject: String
  clientMutationId: String
}

type CreateMarketingChannelMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  label: String
  show: Boolean
  value: Int
  createdBy: String
  updatedBy: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input CreateMarketingChannelMutationInput {
  id: String
  label: String!
  show: Boolean
  value: Int
  clientMutationId: String
}

type UpdateMarketingChannelMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  label: String
  show: Boolean
  value: Int
  createdBy: String
  updatedBy: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input UpdateMarketingChannelMutationInput {
  id: String
  label: String
  show: Boolean
  value: Int
  clientMutationId: String
}

type CreateContactLogMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  body: String
  dateSent: DateTime
  responseReceived: Boolean
  email: String
  createdBy: String
  updatedBy: String
  messageType: String
  partner: String
  client: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input CreateContactLogMutationInput {
  id: String
  body: String!
  dateSent: DateTime
  responseReceived: Boolean
  email: String!
  messageType: String
  partner: String
  client: String
  clientMutationId: String
}

type UpdateContactLogMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  body: String
  dateSent: DateTime
  responseReceived: Boolean
  email: String
  createdBy: String
  updatedBy: String
  messageType: String
  partner: String
  client: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input UpdateContactLogMutationInput {
  id: String
  body: String
  dateSent: DateTime
  responseReceived: Boolean
  email: String
  messageType: String
  partner: String
  client: String
  clientMutationId: String
}

type CreateUserTestimonialMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  userQuote: String
  userFname: String
  userLname: String
  userHeadshot: String
  teamLogo: String
  website: String
  teamName: String
  title: String
  createdBy: String
  updatedBy: String
  user: String
  team: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input CreateUserTestimonialMutationInput {
  id: String
  userQuote: String!
  userFname: String!
  userLname: String!
  userHeadshot: String
  teamLogo: String
  website: String
  teamName: String
  title: String
  user: String
  team: String
  clientMutationId: String
}

type UpdateUserTestimonialMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  userQuote: String
  userFname: String
  userLname: String
  userHeadshot: String
  teamLogo: String
  website: String
  teamName: String
  title: String
  createdBy: String
  updatedBy: String
  user: String
  team: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input UpdateUserTestimonialMutationInput {
  id: String
  userQuote: String
  userFname: String
  userLname: String
  userHeadshot: String
  teamLogo: String
  website: String
  teamName: String
  title: String
  user: String
  team: String
  clientMutationId: String
}

type CreateUserLeadMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  firstName: String
  lastName: String
  email: String
  phone: String
  contactMode: String
  preferredContactMode: String
  company: String
  website: String
  startupSize: String
  startupType: JSONString
  leadPriorities: JSONString
  otherComments: String
  leadSource: String
  referralCode: String
  utmSource: String
  utmMedium: String
  utmCampaign: String
  utmTerm: String
  utmContent: String
  gclid: String
  fbclid: String
  complete: Boolean
  knowToDelegate: Boolean
  taskCards: JSONString
  slot: DateTime
  startupStage: String
  role: String
  timezone: String
  createdBy: String
  updatedBy: String
  user: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input CreateUserLeadMutationInput {
  id: String
  leadInterests: [String]
  firstName: String!
  lastName: String!
  email: String!
  phone: String
  contactMode: String
  preferredContactMode: String
  company: String
  website: String
  startupSize: String
  startupType: JSONString
  leadPriorities: JSONString
  otherComments: String
  leadSource: String
  referralCode: String
  utmSource: String
  utmMedium: String
  utmCampaign: String
  utmTerm: String
  utmContent: String
  gclid: String
  fbclid: String
  complete: Boolean
  knowToDelegate: Boolean
  taskCards: JSONString
  slot: DateTime
  startupStage: String
  role: String
  timezone: String
  user: String
  clientMutationId: String
}

type UpdateUserLeadMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  firstName: String
  lastName: String
  email: String
  phone: String
  contactMode: String
  preferredContactMode: String
  company: String
  website: String
  startupSize: String
  startupType: JSONString
  leadPriorities: JSONString
  otherComments: String
  leadSource: String
  referralCode: String
  utmSource: String
  utmMedium: String
  utmCampaign: String
  utmTerm: String
  utmContent: String
  gclid: String
  fbclid: String
  complete: Boolean
  knowToDelegate: Boolean
  taskCards: JSONString
  slot: DateTime
  startupStage: String
  role: String
  timezone: String
  createdBy: String
  updatedBy: String
  user: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input UpdateUserLeadMutationInput {
  id: String
  leadInterests: [String]
  firstName: String
  lastName: String
  email: String
  phone: String
  contactMode: String
  preferredContactMode: String
  company: String
  website: String
  startupSize: String
  startupType: JSONString
  leadPriorities: JSONString
  otherComments: String
  leadSource: String
  referralCode: String
  utmSource: String
  utmMedium: String
  utmCampaign: String
  utmTerm: String
  utmContent: String
  gclid: String
  fbclid: String
  complete: Boolean
  knowToDelegate: Boolean
  taskCards: JSONString
  slot: DateTime
  startupStage: String
  role: String
  timezone: String
  user: String
  clientMutationId: String
}

type CreateMarketingEmailLogMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  objectId: String
  topic: topic
  referenceModel: String
  recipient: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

"""An enumeration."""
enum topic {
  """Task Feedback Ask"""
  TASK_FEEDBACK_ASK
}

input CreateMarketingEmailLogMutationInput {
  id: String
  objectId: String!
  topic: topic!
  referenceModel: String!
  recipient: String!
  clientMutationId: String
}

type UpdateMarketingEmailLogMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  objectId: String
  topic: topic
  referenceModel: String
  recipient: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input UpdateMarketingEmailLogMutationInput {
  id: String
  objectId: String
  topic: topic
  referenceModel: String
  recipient: String
  clientMutationId: String
}

type CreatePromoCodeMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  code: String
  label: String
  project: String
  resource: String
  type: String
  value: Int
  createdBy: String
  updatedBy: String
  referrer: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input CreatePromoCodeMutationInput {
  id: String
  code: String!
  label: String!
  project: String
  resource: String
  type: String
  value: Int
  referrer: String
  clientMutationId: String
}

type UpdatePromoCodeMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  code: String
  label: String
  project: String
  resource: String
  type: String
  value: Int
  createdBy: String
  updatedBy: String
  referrer: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input UpdatePromoCodeMutationInput {
  id: String
  code: String
  label: String
  project: String
  resource: String
  type: String
  value: Int
  referrer: String
  clientMutationId: String
}

type CreateWorkHoursMutationPayload {
  id: String
  createdAt: DateTime
  startedAt: DateTime
  endedAt: DateTime
  timeSpent: Int
  log: String
  link: String
  workType: String
  paidOut: Boolean
  sentInvoice: Boolean
  updatedAt: DateTime
  createdBy: String
  updatedBy: String
  task: String
  team: String
  associate: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input CreateWorkHoursMutationInput {
  id: String
  startedAt: DateTime
  endedAt: DateTime
  timeSpent: Int
  log: String!
  link: String
  workType: String
  paidOut: Boolean
  sentInvoice: Boolean
  task: String
  team: String
  associate: String
  clientMutationId: String
}

type UpdateWorkHoursMutationPayload {
  id: String
  createdAt: DateTime
  startedAt: DateTime
  endedAt: DateTime
  timeSpent: Int
  log: String
  link: String
  workType: String
  paidOut: Boolean
  sentInvoice: Boolean
  updatedAt: DateTime
  createdBy: String
  updatedBy: String
  task: String
  team: String
  associate: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input UpdateWorkHoursMutationInput {
  id: String
  startedAt: DateTime
  endedAt: DateTime
  timeSpent: Int
  log: String
  link: String
  workType: String
  paidOut: Boolean
  sentInvoice: Boolean
  task: String
  team: String
  associate: String
  clientMutationId: String
}

input MarkWorkHoursInput {
  filters: MarkWorkHoursFiltersInput!
  fields: MarkWorkHoursFieldInput!
}

input MarkWorkHoursFiltersInput {
  teamId: UUID
  associateId: UUID
  start: DateTime!
  end: DateTime!
  workType: [String!]
}

input MarkWorkHoursFieldInput {
  paidOut: Boolean
  sentInvoice: Boolean
}

input StartWorkHoursFiltersInput {
  taskId: UUID!
  log: String!
  link: String
  workType: String!
}

type CreateMenuItemMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime

  """The price that the menu item is being offered at"""
  price: Decimal

  """The name of the menu item to display"""
  name: String

  """Internal identifier used for this menu item"""
  code: String

  """
  How this price is to be calculated, i.e addition, subtraction or a multiplier
  """
  operator: String

  """If this menu item supersedes an older one, this would be its parent"""
  parent: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input CreateMenuItemMutationInput {
  id: String

  """The price that the menu item is being offered at"""
  price: Decimal

  """The name of the menu item to display"""
  name: String!

  """Internal identifier used for this menu item"""
  code: String

  """
  How this price is to be calculated, i.e addition, subtraction or a multiplier
  """
  operator: String!

  """If this menu item supersedes an older one, this would be its parent"""
  parent: String
  clientMutationId: String
}

type UpdateOrVersionMenuItemMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime

  """The price that the menu item is being offered at"""
  price: Decimal

  """The name of the menu item to display"""
  name: String

  """Internal identifier used for this menu item"""
  code: String

  """
  How this price is to be calculated, i.e addition, subtraction or a multiplier
  """
  operator: String

  """If this menu item supersedes an older one, this would be its parent"""
  parent: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input UpdateOrVersionMenuItemMutationInput {
  id: String

  """The price that the menu item is being offered at"""
  price: Decimal

  """The name of the menu item to display"""
  name: String

  """Internal identifier used for this menu item"""
  code: String

  """
  How this price is to be calculated, i.e addition, subtraction or a multiplier
  """
  operator: String

  """If this menu item supersedes an older one, this would be its parent"""
  parent: String
  clientMutationId: String
}

type CreateQuoteMutationPayload {
  id: String
  createdAt: DateTime
  price: Decimal
  menuItems: [String]
  updatedAt: DateTime

  """A helpful name to identify this quote"""
  description: String

  """The total price per row, excluding add-ons, in cents"""
  pricePerRow: Int

  """The total price of add-ons in cents"""
  priceOfAddons: Int
  createdBy: String
  updatedBy: String

  """The project that this quote relates to"""
  project: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input CreateQuoteMutationInput {
  id: String
  menuItems: [String]

  """A helpful name to identify this quote"""
  description: String

  """The total price per row, excluding add-ons, in cents"""
  pricePerRow: Int

  """The total price of add-ons in cents"""
  priceOfAddons: Int

  """The project that this quote relates to"""
  project: String
  clientMutationId: String
}

type UpdateQuoteMutationPayload {
  project: String

  """A helpful name to identify this quote"""
  description: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input UpdateQuoteMutationInput {
  project: String

  """A helpful name to identify this quote"""
  description: String
  clientMutationId: String
}

type PasswordAuthPayload {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  user: UserNode
  clientMutationId: String
  token: String!
  refreshToken: String!
}

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

input PasswordAuthInput {
  clientMutationId: String
  username: String!
  password: String!
}

type CodeExchangeAuthPayload {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  user: UserNode
  clientMutationId: String
  token: String!
  refreshToken: String!
}

input CodeExchangeAuthInput {
  clientMutationId: String
  code: String!
}

type MagicLinkAuthPayload {
  user: UserNode
  clientMutationId: String
}

input MagicLinkAuthInput {
  clientMutationId: String
  code: String!
}

type GoogleAccessTokenAuthPayload {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  user: UserNode
  clientMutationId: String
  token: String!
  refreshToken: String!
}

input GoogleAccessTokenAuthInput {
  clientMutationId: String
  accessToken: String!
}

type VerifyPayload {
  payload: GenericScalar!
  clientMutationId: String
}

input VerifyInput {
  token: String
  clientMutationId: String
}

type RefreshPayload {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  clientMutationId: String
  token: String!
  refreshToken: String!
}

input RefreshInput {
  refreshToken: String
  clientMutationId: String
}

type DeleteJSONWebTokenCookiePayload {
  deleted: Boolean!
  clientMutationId: String
}

input DeleteJSONWebTokenCookieInput {
  clientMutationId: String
}

type DeleteRefreshTokenCookiePayload {
  deleted: Boolean!
  clientMutationId: String
}

input DeleteRefreshTokenCookieInput {
  clientMutationId: String
}

type RevokePayload {
  revoked: Int!
  clientMutationId: String
}

input RevokeInput {
  refreshToken: String
  clientMutationId: String
}

type CreateClientPayload {
  lastName: String
  firstName: String
  email: String
  userProfile: UserProfileNode
  id: String
  updatedAt: DateTime

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input CreateClientInput {
  lastName: String
  firstName: String
  email: String
  userProfile: UserProfileSerializerInput
  id: String
  team: String
  teamData: CreateTeamSerializerInput
  groups: [String]
  clientMutationId: String
}

input UserProfileSerializerInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  address: String
  city: String
  secondaryEmail: String
  country: String
  phone: String
  timezone: String
  contactMode: String
  auth0Id: String
  profilePicture: String
  hourlyRate: Decimal
  salary: Int
  title: String
  titleDescription: String
  birthDate: Date
  otherServices: String
  role: String
  department: department
  billing: Boolean
  onEmailList: Boolean
  setupComplete: Boolean
  utmSource: String
  utmMedium: String
  utmCampaign: String
  utmTerm: String
  utmContent: String
  gclid: String
  fbclid: String
  tasksIndex: Int
  lastTaskRequestedAt: DateTime
  preferredContactMode: String
  company: String
  website: String
  startupSize: String
  startupType: JSONString
  leadPriorities: JSONString
  otherComments: String
  leadSource: String
  surveyComplete: Boolean
  leadFlag: Boolean

  """How satisfied the user was with Pareto."""
  satisfaction: satisfaction

  """The level of engagement the user had with Pareto."""
  engagement: engagement
  status: String
  referredBy: String
  marketingChannel: String
  manager: String
  contactOwner: String
}

"""An enumeration."""
enum department {
  """Marketing"""
  MKT

  """Product"""
  PRD

  """Operations"""
  OPS

  """HR & Recruiting"""
  HRR

  """Sales"""
  SAL

  """Finance"""
  FIN

  """Legal"""
  LGL

  """Engineering"""
  ENG
}

"""An enumeration."""
enum satisfaction {
  """"""
  UNSUBMITTED

  """Delighted"""
  DELIGHTED

  """Satisfied"""
  SATISFIED

  """Not Satisfied"""
  NOT_SATISFIED

  """Very Unsatisfied"""
  VERY_UNSATISFIED
}

"""An enumeration."""
enum engagement {
  """"""
  UNSUBMITTED

  """Multi-team"""
  MULTI_TEAM

  """Single Team"""
  SINGLE_TEAM

  """Individual"""
  INDIVIDUAL

  """Zero"""
  ZERO
}

input CreateTeamSerializerInput {
  id: String
  industries: [String]
  tags: [String]
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  website: String
  description: String
  slug: String
  credits: Decimal
  subscribed: Boolean
  billingEmail: String
  hourlyRate: Decimal
  tasksIndex: Int
  lastTaskRequestedAt: DateTime
  monthlyBudget: Decimal
  toolsUsed: String
  linkedin: String

  """The total funding received by the company."""
  totalFunding: Decimal

  """The total spent amount by the team on Pareto."""
  spend: Decimal

  """Whether the team is women-founded."""
  womenFounded: Boolean
  stripeAccountId: String
  createdBy: String
  updatedBy: String
  stage: String
  partner: String
  users: String
}

type UpdateClientPayload {
  lastName: String
  firstName: String
  email: String
  userProfile: UserProfileNode
  id: String
  updatedAt: DateTime

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input UpdateClientInput {
  lastName: String
  firstName: String
  email: String
  userProfile: UserProfileSerializerInput
  id: String
  team: String
  teamData: CreateTeamSerializerInput
  groups: [String]
  clientMutationId: String
}

type CreateWmsClientPayload {
  email: String
  updatedAt: DateTime
  id: ID
  clientMutationId: String
}

input CreateWmsClientInput {
  clientMutationId: String
  email: String!
  firstName: String!
  lastName: String!
  groups: [String]
  phone: String
  secondaryEmail: String
  address: String
  city: String
  country: String
  company: String
  website: String
  contactOwner: ID
  timezone: String
  preferredContactMode: String
  status: ID
  department: String
  role: String
  otherServices: String
  name: String
  billingEmail: String
  partner: ID
  hourlyRate: Decimal
  credits: Decimal
  subscription: ID
  description: String
  team: ID
}

type UpdateWmsClientPayload {
  email: String
  id: ID
  updatedAt: DateTime
  clientMutationId: String
}

input UpdateWmsClientInput {
  clientMutationId: String
  id: ID
  email: String
  firstName: String
  lastName: String
  groups: [String]
  phone: String
  secondaryEmail: String
  address: String
  city: String
  country: String
  company: String
  website: String
  contactOwner: ID
  timezone: String
  preferredContactMode: String
  status: ID
  department: String
  role: String
  otherServices: String
  onEmailList: Boolean
  name: String
  billingEmail: String
  partner: ID
  hourlyRate: Decimal
  credits: Decimal
  description: String
  team: ID
  satisfaction: String
  engagement: String
}

type OnboardClientPayload {
  email: String
  id: ID
  updatedAt: DateTime
  clientMutationId: String
}

input OnboardClientInput {
  clientMutationId: String
  id: ID
  email: String
  firstName: String
  lastName: String
  groups: [String]
  phone: String
  secondaryEmail: String
  address: String
  city: String
  country: String
  company: String
  website: String
  contactOwner: ID
  timezone: String
  preferredContactMode: String
  status: ID
  department: String
  role: String
  otherServices: String
  onEmailList: Boolean
  name: String
  billingEmail: String
  partner: ID
  hourlyRate: Decimal
  credits: Decimal
  subscription: ID
  description: String
  team: ID
}

type CreateTeamMutationPayload {
  id: String
  industries: [String]
  tags: [String]
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  website: String
  description: String
  slug: String
  credits: Decimal
  subscribed: Boolean
  billingEmail: String
  hourlyRate: Decimal
  tasksIndex: Int
  lastTaskRequestedAt: DateTime
  monthlyBudget: Decimal
  toolsUsed: String
  linkedin: String

  """The total funding received by the company."""
  totalFunding: Decimal

  """The total spent amount by the team on Pareto."""
  spend: Decimal

  """Whether the team is women-founded."""
  womenFounded: Boolean
  stripeAccountId: String
  createdBy: String
  updatedBy: String
  stage: String
  partner: String
  users: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input CreateTeamMutationInput {
  id: String
  industries: [String]
  tags: [String]
  name: String!
  website: String
  description: String
  slug: String
  credits: Decimal
  subscribed: Boolean
  billingEmail: String
  hourlyRate: Decimal
  tasksIndex: Int
  lastTaskRequestedAt: DateTime
  monthlyBudget: Decimal
  toolsUsed: String
  linkedin: String

  """The total funding received by the company."""
  totalFunding: Decimal

  """The total spent amount by the team on Pareto."""
  spend: Decimal

  """Whether the team is women-founded."""
  womenFounded: Boolean
  stripeAccountId: String
  stage: String
  partner: String
  clientMutationId: String
}

type UpdateTeamMutationPayload {
  id: String
  industries: [String]
  tags: [String]
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  website: String
  description: String
  slug: String
  credits: Decimal
  subscribed: Boolean
  billingEmail: String
  hourlyRate: Decimal
  tasksIndex: Int
  lastTaskRequestedAt: DateTime
  monthlyBudget: Decimal
  toolsUsed: String
  linkedin: String

  """The total funding received by the company."""
  totalFunding: Decimal

  """The total spent amount by the team on Pareto."""
  spend: Decimal

  """Whether the team is women-founded."""
  womenFounded: Boolean
  stripeAccountId: String
  createdBy: String
  updatedBy: String
  stage: String
  partner: String
  users: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input UpdateTeamMutationInput {
  id: String
  industries: [String]
  tags: [String]
  name: String
  website: String
  description: String
  slug: String
  credits: Decimal
  subscribed: Boolean
  billingEmail: String
  hourlyRate: Decimal
  tasksIndex: Int
  lastTaskRequestedAt: DateTime
  monthlyBudget: Decimal
  toolsUsed: String
  linkedin: String

  """The total funding received by the company."""
  totalFunding: Decimal

  """The total spent amount by the team on Pareto."""
  spend: Decimal

  """Whether the team is women-founded."""
  womenFounded: Boolean
  stripeAccountId: String
  stage: String
  partner: String
  clientMutationId: String
}

input UserTeamInput {
  userId: UUID!
  teamId: UUID!
}

input DeleteUserTeamInput {
  userId: UUID!
  teamId: UUID!
}

type CreateStageMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  label: String
  description: String
  value: Int
  createdBy: String
  updatedBy: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input CreateStageMutationInput {
  id: String
  label: String
  description: String
  value: Int
  clientMutationId: String
}

type UpdateStageMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  label: String
  description: String
  value: Int
  createdBy: String
  updatedBy: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input UpdateStageMutationInput {
  id: String
  label: String
  description: String
  value: Int
  clientMutationId: String
}

type CreateIndustryMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  label: String
  value: Int

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input CreateIndustryMutationInput {
  id: String
  label: String!
  value: Int
  clientMutationId: String
}

type UpdateIndustryMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  label: String
  value: Int

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input UpdateIndustryMutationInput {
  id: String
  label: String
  value: Int
  clientMutationId: String
}

type DeleteIndustryMutationPayload {
  id: UUID!
  clientMutationId: String
}

input DeleteIndustryMutationInput {
  clientMutationId: String
  id: UUID!
}

type CreateCompanyTagMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  description: String
  createdBy: String
  updatedBy: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input CreateCompanyTagMutationInput {
  id: String
  name: String!
  description: String
  clientMutationId: String
}

type UpdateCompanyTagMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  description: String
  createdBy: String
  updatedBy: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input UpdateCompanyTagMutationInput {
  id: String
  name: String
  description: String
  clientMutationId: String
}

type DeleteCompanyTagMutationPayload {
  id: UUID!
  clientMutationId: String
}

input DeleteCompanyTagMutationInput {
  clientMutationId: String
  id: UUID!
}

type CreateUserNoteMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  note: String
  date: Date
  user: String
  notetaker: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input CreateUserNoteMutationInput {
  id: String
  note: String!
  date: Date
  user: String
  notetaker: String
  clientMutationId: String
}

type UpdateUserNoteMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  note: String
  date: Date
  user: String
  notetaker: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input UpdateUserNoteMutationInput {
  id: String
  note: String
  date: Date
  user: String
  notetaker: String
  clientMutationId: String
}

type CreateUserFeedbackMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  survey: String
  nps: Int
  reason: String
  comments: String
  createdBy: String
  updatedBy: String
  user: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input CreateUserFeedbackMutationInput {
  id: String
  survey: String!
  nps: Int!
  reason: String
  comments: String
  user: String!
  clientMutationId: String
}

type UpdateUserFeedbackMutationPayload {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  survey: String
  nps: Int
  reason: String
  comments: String
  createdBy: String
  updatedBy: String
  user: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input UpdateUserFeedbackMutationInput {
  id: String
  survey: String
  nps: Int
  reason: String
  comments: String
  user: String
  clientMutationId: String
}

input SetupPaymentInput {
  teamId: UUID!
}

type UpsertUserSurveyMutationPayload {
  email: String
  clientMutationId: String
}

input UpsertUserSurveyMutationInput {
  clientMutationId: String
  email: String!
  firstName: String
  lastName: String
  utmSource: String
  utmMedium: String
  utmContent: String
  utmCampaign: String
  utmTerm: String
  gclid: String
  fbclid: String
  company: String
  website: String
  startupSize: String
  startupType: JSONString
  leadSource: String
  leadPriorities: JSONString
  otherComments: String
  referralCode: String
  preferredContactMode: String
  surveyComplete: Boolean
}