
> @aztlan/ui@0.11.0 build
> tsc --noErrorTruncation

src/ui/form/Form/SimpleForm.tsx(66,12): error TS2322: Type '{ label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; type?: string; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; multiple?: boolean; options?: any[]; type?: string; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; options?: any[]; placeholder?: string; openOnReset?: boolean; valueKey?: string; convertItemToString?: (...args: any[]) => any; convertValueToItem?: (...args: any[]) => any; multiple?: boolean; type?: string; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; type?: string; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; placeholder?: string; autoComplete?: string; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; rows?: number; type?: string; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; options?: any[]; type?: string; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; multiple?: boolean; options?: any[]; type?: string; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; type?: string; multiple?: boolean; options?: any[]; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; multiple?: boolean; options?: any[]; type?: string; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; options?: any[]; placeholder?: string; openOnReset?: boolean; valueKey?: string; convertItemToString?: (...args: any[]) => any; convertValueToItem?: (...args: any[]) => any; multiple?: boolean; type?: string; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; type?: string; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; placeholder?: string; autoComplete?: string; multiple?: boolean; options?: any[]; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; rows?: number; type?: string; multiple?: boolean; options?: any[]; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; options?: any[]; type?: string; multiple?: boolean; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; multiple?: boolean; options?: any[]; type?: string; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; type?: string; options?: any[]; placeholder?: string; openOnReset?: boolean; valueKey?: string; convertItemToString?: (...args: any[]) => any; convertValueToItem?: (...args: any[]) => any; multiple?: boolean; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; multiple?: boolean; options?: any[]; type?: string; placeholder?: string; openOnReset?: boolean; valueKey?: string; convertItemToString?: (...args: any[]) => any; convertValueToItem?: (...args: any[]) => any; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; options?: any[]; placeholder?: string; openOnReset?: boolean; valueKey?: string; convertItemToString?: (...args: any[]) => any; convertValueToItem?: (...args: any[]) => any; multiple?: boolean; type?: string; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; type?: string; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; placeholder?: string; autoComplete?: string; options?: any[]; openOnReset?: boolean; valueKey?: string; convertItemToString?: (...args: any[]) => any; convertValueToItem?: (...args: any[]) => any; multiple?: boolean; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; rows?: number; type?: string; options?: any[]; placeholder?: string; openOnReset?: boolean; valueKey?: string; convertItemToString?: (...args: any[]) => any; convertValueToItem?: (...args: any[]) => any; multiple?: boolean; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; options?: any[]; type?: string; placeholder?: string; openOnReset?: boolean; valueKey?: string; convertItemToString?: (...args: any[]) => any; convertValueToItem?: (...args: any[]) => any; multiple?: boolean; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; multiple?: boolean; options?: any[]; type?: string; placeholder?: string; openOnReset?: boolean; valueKey?: string; convertItemToString?: (...args: any[]) => any; convertValueToItem?: (...args: any[]) => any; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; type?: string; placeholder?: string; autoComplete?: string; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; multiple?: boolean; options?: any[]; type?: string; placeholder?: string; autoComplete?: string; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; options?: any[]; placeholder?: string; openOnReset?: boolean; valueKey?: string; convertItemToString?: (...args: any[]) => any; convertValueToItem?: (...args: any[]) => any; multiple?: boolean; type?: string; autoComplete?: string; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; type?: string; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; placeholder?: string; autoComplete?: string; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; rows?: number; type?: string; placeholder?: string; autoComplete?: string; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; options?: any[]; type?: string; placeholder?: string; autoComplete?: string; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; multiple?: boolean; options?: any[]; type?: string; placeholder?: string; autoComplete?: string; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; type?: string; rows?: number; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; multiple?: boolean; options?: any[]; type?: string; rows?: number; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; options?: any[]; placeholder?: string; openOnReset?: boolean; valueKey?: string; convertItemToString?: (...args: any[]) => any; convertValueToItem?: (...args: any[]) => any; multiple?: boolean; type?: string; rows?: number; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; type?: string; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; placeholder?: string; autoComplete?: string; rows?: number; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; rows?: number; type?: string; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; options?: any[]; type?: string; rows?: number; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; multiple?: boolean; options?: any[]; type?: string; rows?: number; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; type?: string; options?: any[]; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; multiple?: boolean; options?: any[]; type?: string; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; options?: any[]; placeholder?: string; openOnReset?: boolean; valueKey?: string; convertItemToString?: (...args: any[]) => any; convertValueToItem?: (...args: any[]) => any; multiple?: boolean; type?: string; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; type?: string; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; placeholder?: string; autoComplete?: string; options?: any[]; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; rows?: number; type?: string; options?: any[]; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; options?: any[]; type?: string; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; multiple?: boolean; options?: any[]; type?: string; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; type?: string; multiple?: boolean; options?: any[]; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; multiple?: boolean; options?: any[]; type?: string; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; options?: any[]; placeholder?: string; openOnReset?: boolean; valueKey?: string; convertItemToString?: (...args: any[]) => any; convertValueToItem?: (...args: any[]) => any; multiple?: boolean; type?: string; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; type?: string; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; placeholder?: string; autoComplete?: string; multiple?: boolean; options?: any[]; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; rows?: number; type?: string; multiple?: boolean; options?: any[]; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; options?: any[]; type?: string; multiple?: boolean; key: string; } | { label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; multiple?: boolean; options?: any[]; type?: string; key: string; }' is not assignable to type 'IntrinsicAttributes & ((Pick<InferPropsInner<Pick<{ className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; loading: Requireable<boolean>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, never>> & Partial<InferPropsInner<Pick<{ className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; loading: Requireable<boolean>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, "label" | "style" | "name" | "className" | "disabled" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition">>> & InferPropsInner<Pick<{ type: Requireable<string>; }, never>> & Partial<InferPropsInner<Pick<{ type: Requireable<string>; }, "type">>> & { className: string; }, "label" | "style" | "name" | "className" | "disabled" | "type" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition"> & Pick<InferProps<{ optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; type: Requireable<string>; }>, never> & Pick<InferPropsInner<Pick<{ className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; loading: Requireable<boolean>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, never>> & Partial<InferPropsInner<Pick<{ className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; loading: Requireable<boolean>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, "label" | "style" | "name" | "className" | "disabled" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition">>> & InferPropsInner<Pick<{ type: Requireable<string>; }, never>> & Partial<InferPropsInner<Pick<{ type: Requireable<string>; }, "type">>> & { className: string; }, "style" | "className" | "loading">) | (Pick<InferPropsInner<Pick<{ multiple: Requireable<boolean>; disabled: Requireable<boolean>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, never>> & Partial<InferPropsInner<Pick<{ multiple: Requireable<boolean>; disabled: Requireable<boolean>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, "label" | "style" | "name" | "className" | "disabled" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "multiple" | "options">>> & InferPropsInner<Pick<{ type: Requireable<string>; }, never>> & Partial<InferPropsInner<Pick<{ type: Requireable<string>; }, "type">>> & { className: string; }, "label" | "style" | "name" | "className" | "disabled" | "type" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "multiple" | "options"> & Pick<InferProps<{ optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; type: Requireable<string>; }>, never> & Pick<InferPropsInner<Pick<{ multiple: Requireable<boolean>; disabled: Requireable<boolean>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, never>> & Partial<InferPropsInner<Pick<{ multiple: Requireable<boolean>; disabled: Requireable<boolean>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, "label" | "style" | "name" | "className" | "disabled" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "multiple" | "options">>> & InferPropsInner<Pick<{ type: Requireable<string>; }, never>> & Partial<InferPropsInner<Pick<{ type: Requireable<string>; }, "type">>> & { className: string; }, "style" | "className" | "loading" | "multiple" | "options">) | (Pick<InferPropsInner<Pick<{ placeholder: Requireable<string>; openOnReset: Requireable<boolean>; valueKey: Requireable<string>; convertItemToString: Requireable<(...args: any[]) => any>; convertValueToItem: Requireable<(...args: any[]) => any>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, never>> & Partial<InferPropsInner<Pick<{ placeholder: Requireable<string>; openOnReset: Requireable<boolean>; valueKey: Requireable<string>; convertItemToString: Requireable<(...args: any[]) => any>; convertValueToItem: Requireable<(...args: any[]) => any>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, "label" | "style" | "name" | "className" | "disabled" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "options" | "placeholder" | "openOnReset" | "valueKey" | "convertItemToString" | "convertValueToItem">>> & InferPropsInner<Pick<{ multiple: Requireable<boolean>; placeholder: Requireable<string>; openOnReset: Requireable<boolean>; valueKey: Requireable<string>; convertItemToString: Requireable<(...args: any[]) => any>; convertValueToItem: Requireable<(...args: any[]) => any>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, never>> & Partial<InferPropsInner<Pick<{ multiple: Requireable<boolean>; placeholder: Requireable<string>; openOnReset: Requireable<boolean>; valueKey: Requireable<string>; convertItemToString: Requireable<(...args: any[]) => any>; convertValueToItem: Requireable<(...args: any[]) => any>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, "label" | "style" | "name" | "className" | "disabled" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "multiple" | "options" | "placeholder" | "openOnReset" | "valueKey" | "convertItemToString" | "convertValueToItem">>> & InferPropsInner<Pick<{ type: Requireable<string>; }, never>> & Partial<InferPropsInner<Pick<{ type: Requireable<string>; }, "type">>> & { className: string; }, "label" | "style" | "name" | "className" | "disabled" | "type" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "multiple" | "options" | "placeholder" | "openOnReset" | "valueKey" | "convertItemToString" | "convertValueToItem"> & Pick<InferProps<{ optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; type: Requireable<string>; }>, never> & Pick<InferPropsInner<Pick<{ placeholder: Requireable<string>; openOnReset: Requireable<boolean>; valueKey: Requireable<string>; convertItemToString: Requireable<(...args: any[]) => any>; convertValueToItem: Requireable<(...args: any[]) => any>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, never>> & Partial<InferPropsInner<Pick<{ placeholder: Requireable<string>; openOnReset: Requireable<boolean>; valueKey: Requireable<string>; convertItemToString: Requireable<(...args: any[]) => any>; convertValueToItem: Requireable<(...args: any[]) => any>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, "label" | "style" | "name" | "className" | "disabled" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "options" | "placeholder" | "openOnReset" | "valueKey" | "convertItemToString" | "convertValueToItem">>> & InferPropsInner<Pick<{ multiple: Requireable<boolean>; placeholder: Requireable<string>; openOnReset: Requireable<boolean>; valueKey: Requireable<string>; convertItemToString: Requireable<(...args: any[]) => any>; convertValueToItem: Requireable<(...args: any[]) => any>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, never>> & Partial<InferPropsInner<Pick<{ multiple: Requireable<boolean>; placeholder: Requireable<string>; openOnReset: Requireable<boolean>; valueKey: Requireable<string>; convertItemToString: Requireable<(...args: any[]) => any>; convertValueToItem: Requireable<(...args: any[]) => any>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, "label" | "style" | "name" | "className" | "disabled" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "multiple" | "options" | "placeholder" | "openOnReset" | "valueKey" | "convertItemToString" | "convertValueToItem">>> & InferPropsInner<Pick<{ type: Requireable<string>; }, never>> & Partial<InferPropsInner<Pick<{ type: Requireable<string>; }, "type">>> & { className: string; }, "style" | "className" | "loading" | "multiple" | "options" | "placeholder" | "openOnReset" | "valueKey" | "convertItemToString" | "convertValueToItem">) | (Pick<InferPropsInner<Pick<{ type: Requireable<string>; autoComplete: Validator<string>; placeholder: Requireable<string>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; loading: Requireable<boolean>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, never>> & Partial<InferPropsInner<Pick<{ type: Requireable<string>; autoComplete: Validator<string>; placeholder: Requireable<string>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; loading: Requireable<boolean>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, "label" | "style" | "name" | "className" | "disabled" | "type" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "placeholder" | "autoComplete">>> & InferPropsInner<Pick<{ type: Requireable<string>; }, never>> & Partial<InferPropsInner<Pick<{ type: Requireable<string>; }, "type">>> & { className: string; }, "label" | "style" | "name" | "className" | "disabled" | "type" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "placeholder" | "autoComplete"> & Pick<InferProps<{ optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; type: Requireable<string>; }>, never> & Pick<InferPropsInner<Pick<{ type: Requireable<string>; autoComplete: Validator<string>; placeholder: Requireable<string>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; loading: Requireable<boolean>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, never>> & Partial<InferPropsInner<Pick<{ type: Requireable<string>; autoComplete: Validator<string>; placeholder: Requireable<string>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; loading: Requireable<boolean>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, "label" | "style" | "name" | "className" | "disabled" | "type" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "placeholder" | "autoComplete">>> & InferPropsInner<Pick<{ type: Requireable<string>; }, never>> & Partial<InferPropsInner<Pick<{ type: Requireable<string>; }, "type">>> & { className: string; }, "style" | "className" | "loading" | "placeholder" | "autoComplete">) | (Pick<InferPropsInner<Pick<{ rows: Requireable<number>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; loading: Requireable<boolean>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, never>> & Partial<InferPropsInner<Pick<{ rows: Requireable<number>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; loading: Requireable<boolean>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, "label" | "style" | "name" | "className" | "disabled" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "rows">>> & InferPropsInner<Pick<{ type: Requireable<string>; }, never>> & Partial<InferPropsInner<Pick<{ type: Requireable<string>; }, "type">>> & { className: string; }, "label" | "style" | "name" | "className" | "disabled" | "type" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "rows"> & Pick<InferProps<{ optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; type: Requireable<string>; }>, never> & Pick<InferPropsInner<Pick<{ rows: Requireable<number>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; loading: Requireable<boolean>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, never>> & Partial<InferPropsInner<Pick<{ rows: Requireable<number>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; loading: Requireable<boolean>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, "label" | "style" | "name" | "className" | "disabled" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "rows">>> & InferPropsInner<Pick<{ type: Requireable<string>; }, never>> & Partial<InferPropsInner<Pick<{ type: Requireable<string>; }, "type">>> & { className: string; }, "style" | "className" | "loading" | "rows">) | (Pick<InferPropsInner<Pick<{ options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, never>> & Partial<InferPropsInner<Pick<{ options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, "label" | "style" | "name" | "className" | "disabled" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "options">>> & InferPropsInner<Pick<{ type: Requireable<string>; }, never>> & Partial<InferPropsInner<Pick<{ type: Requireable<string>; }, "type">>> & { className: string; }, "label" | "style" | "name" | "className" | "disabled" | "type" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "options"> & Pick<InferProps<{ optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; type: Requireable<string>; }>, never> & Pick<InferPropsInner<Pick<{ options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, never>> & Partial<InferPropsInner<Pick<{ options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, "label" | "style" | "name" | "className" | "disabled" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "options">>> & InferPropsInner<Pick<{ type: Requireable<string>; }, never>> & Partial<InferPropsInner<Pick<{ type: Requireable<string>; }, "type">>> & { className: string; }, "style" | "className" | "loading" | "options">) | (Pick<InferPropsInner<Pick<{ multiple: Requireable<boolean>; disabled: Requireable<boolean>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, never>> & Partial<InferPropsInner<Pick<{ multiple: Requireable<boolean>; disabled: Requireable<boolean>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, "label" | "style" | "name" | "className" | "disabled" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "multiple" | "options">>> & InferPropsInner<Pick<{ type: Requireable<string>; }, never>> & Partial<InferPropsInner<Pick<{ type: Requireable<string>; }, "type">>> & { className: string; }, "label" | "style" | "name" | "className" | "disabled" | "type" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "multiple" | "options"> & Pick<InferProps<{ optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; type: Requireable<string>; }>, never> & Pick<InferPropsInner<Pick<{ multiple: Requireable<boolean>; disabled: Requireable<boolean>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, never>> & Partial<InferPropsInner<Pick<{ multiple: Requireable<boolean>; disabled: Requireable<boolean>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, "label" | "style" | "name" | "className" | "disabled" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "multiple" | "options">>> & InferPropsInner<Pick<{ type: Requireable<string>; }, never>> & Partial<InferPropsInner<Pick<{ type: Requireable<string>; }, "type">>> & { className: string; }, "style" | "className" | "loading" | "multiple" | "options">))'.
  Type '{ label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; type?: string; key: string; }' is not assignable to type 'IntrinsicAttributes & ((Pick<InferPropsInner<Pick<{ className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; loading: Requireable<boolean>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, never>> & Partial<InferPropsInner<Pick<{ className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; loading: Requireable<boolean>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, "label" | "style" | "name" | "className" | "disabled" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition">>> & InferPropsInner<Pick<{ type: Requireable<string>; }, never>> & Partial<InferPropsInner<Pick<{ type: Requireable<string>; }, "type">>> & { className: string; }, "label" | "style" | "name" | "className" | "disabled" | "type" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition"> & Pick<InferProps<{ optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; type: Requireable<string>; }>, never> & Pick<InferPropsInner<Pick<{ className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; loading: Requireable<boolean>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, never>> & Partial<InferPropsInner<Pick<{ className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; loading: Requireable<boolean>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, "label" | "style" | "name" | "className" | "disabled" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition">>> & InferPropsInner<Pick<{ type: Requireable<string>; }, never>> & Partial<InferPropsInner<Pick<{ type: Requireable<string>; }, "type">>> & { className: string; }, "style" | "className" | "loading">) | (Pick<InferPropsInner<Pick<{ multiple: Requireable<boolean>; disabled: Requireable<boolean>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, never>> & Partial<InferPropsInner<Pick<{ multiple: Requireable<boolean>; disabled: Requireable<boolean>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, "label" | "style" | "name" | "className" | "disabled" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "multiple" | "options">>> & InferPropsInner<Pick<{ type: Requireable<string>; }, never>> & Partial<InferPropsInner<Pick<{ type: Requireable<string>; }, "type">>> & { className: string; }, "label" | "style" | "name" | "className" | "disabled" | "type" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "multiple" | "options"> & Pick<InferProps<{ optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; type: Requireable<string>; }>, never> & Pick<InferPropsInner<Pick<{ multiple: Requireable<boolean>; disabled: Requireable<boolean>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, never>> & Partial<InferPropsInner<Pick<{ multiple: Requireable<boolean>; disabled: Requireable<boolean>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, "label" | "style" | "name" | "className" | "disabled" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "multiple" | "options">>> & InferPropsInner<Pick<{ type: Requireable<string>; }, never>> & Partial<InferPropsInner<Pick<{ type: Requireable<string>; }, "type">>> & { className: string; }, "style" | "className" | "loading" | "multiple" | "options">) | (Pick<InferPropsInner<Pick<{ placeholder: Requireable<string>; openOnReset: Requireable<boolean>; valueKey: Requireable<string>; convertItemToString: Requireable<(...args: any[]) => any>; convertValueToItem: Requireable<(...args: any[]) => any>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, never>> & Partial<InferPropsInner<Pick<{ placeholder: Requireable<string>; openOnReset: Requireable<boolean>; valueKey: Requireable<string>; convertItemToString: Requireable<(...args: any[]) => any>; convertValueToItem: Requireable<(...args: any[]) => any>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, "label" | "style" | "name" | "className" | "disabled" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "options" | "placeholder" | "openOnReset" | "valueKey" | "convertItemToString" | "convertValueToItem">>> & InferPropsInner<Pick<{ multiple: Requireable<boolean>; placeholder: Requireable<string>; openOnReset: Requireable<boolean>; valueKey: Requireable<string>; convertItemToString: Requireable<(...args: any[]) => any>; convertValueToItem: Requireable<(...args: any[]) => any>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, never>> & Partial<InferPropsInner<Pick<{ multiple: Requireable<boolean>; placeholder: Requireable<string>; openOnReset: Requireable<boolean>; valueKey: Requireable<string>; convertItemToString: Requireable<(...args: any[]) => any>; convertValueToItem: Requireable<(...args: any[]) => any>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, "label" | "style" | "name" | "className" | "disabled" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "multiple" | "options" | "placeholder" | "openOnReset" | "valueKey" | "convertItemToString" | "convertValueToItem">>> & InferPropsInner<Pick<{ type: Requireable<string>; }, never>> & Partial<InferPropsInner<Pick<{ type: Requireable<string>; }, "type">>> & { className: string; }, "label" | "style" | "name" | "className" | "disabled" | "type" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "multiple" | "options" | "placeholder" | "openOnReset" | "valueKey" | "convertItemToString" | "convertValueToItem"> & Pick<InferProps<{ optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; type: Requireable<string>; }>, never> & Pick<InferPropsInner<Pick<{ placeholder: Requireable<string>; openOnReset: Requireable<boolean>; valueKey: Requireable<string>; convertItemToString: Requireable<(...args: any[]) => any>; convertValueToItem: Requireable<(...args: any[]) => any>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, never>> & Partial<InferPropsInner<Pick<{ placeholder: Requireable<string>; openOnReset: Requireable<boolean>; valueKey: Requireable<string>; convertItemToString: Requireable<(...args: any[]) => any>; convertValueToItem: Requireable<(...args: any[]) => any>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, "label" | "style" | "name" | "className" | "disabled" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "options" | "placeholder" | "openOnReset" | "valueKey" | "convertItemToString" | "convertValueToItem">>> & InferPropsInner<Pick<{ multiple: Requireable<boolean>; placeholder: Requireable<string>; openOnReset: Requireable<boolean>; valueKey: Requireable<string>; convertItemToString: Requireable<(...args: any[]) => any>; convertValueToItem: Requireable<(...args: any[]) => any>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, never>> & Partial<InferPropsInner<Pick<{ multiple: Requireable<boolean>; placeholder: Requireable<string>; openOnReset: Requireable<boolean>; valueKey: Requireable<string>; convertItemToString: Requireable<(...args: any[]) => any>; convertValueToItem: Requireable<(...args: any[]) => any>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, "label" | "style" | "name" | "className" | "disabled" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "multiple" | "options" | "placeholder" | "openOnReset" | "valueKey" | "convertItemToString" | "convertValueToItem">>> & InferPropsInner<Pick<{ type: Requireable<string>; }, never>> & Partial<InferPropsInner<Pick<{ type: Requireable<string>; }, "type">>> & { className: string; }, "style" | "className" | "loading" | "multiple" | "options" | "placeholder" | "openOnReset" | "valueKey" | "convertItemToString" | "convertValueToItem">) | (Pick<InferPropsInner<Pick<{ type: Requireable<string>; autoComplete: Validator<string>; placeholder: Requireable<string>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; loading: Requireable<boolean>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, never>> & Partial<InferPropsInner<Pick<{ type: Requireable<string>; autoComplete: Validator<string>; placeholder: Requireable<string>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; loading: Requireable<boolean>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, "label" | "style" | "name" | "className" | "disabled" | "type" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "placeholder" | "autoComplete">>> & InferPropsInner<Pick<{ type: Requireable<string>; }, never>> & Partial<InferPropsInner<Pick<{ type: Requireable<string>; }, "type">>> & { className: string; }, "label" | "style" | "name" | "className" | "disabled" | "type" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "placeholder" | "autoComplete"> & Pick<InferProps<{ optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; type: Requireable<string>; }>, never> & Pick<InferPropsInner<Pick<{ type: Requireable<string>; autoComplete: Validator<string>; placeholder: Requireable<string>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; loading: Requireable<boolean>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, never>> & Partial<InferPropsInner<Pick<{ type: Requireable<string>; autoComplete: Validator<string>; placeholder: Requireable<string>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; loading: Requireable<boolean>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, "label" | "style" | "name" | "className" | "disabled" | "type" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "placeholder" | "autoComplete">>> & InferPropsInner<Pick<{ type: Requireable<string>; }, never>> & Partial<InferPropsInner<Pick<{ type: Requireable<string>; }, "type">>> & { className: string; }, "style" | "className" | "loading" | "placeholder" | "autoComplete">) | (Pick<InferPropsInner<Pick<{ rows: Requireable<number>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; loading: Requireable<boolean>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, never>> & Partial<InferPropsInner<Pick<{ rows: Requireable<number>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; loading: Requireable<boolean>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, "label" | "style" | "name" | "className" | "disabled" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "rows">>> & InferPropsInner<Pick<{ type: Requireable<string>; }, never>> & Partial<InferPropsInner<Pick<{ type: Requireable<string>; }, "type">>> & { className: string; }, "label" | "style" | "name" | "className" | "disabled" | "type" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "rows"> & Pick<InferProps<{ optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; type: Requireable<string>; }>, never> & Pick<InferPropsInner<Pick<{ rows: Requireable<number>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; loading: Requireable<boolean>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, never>> & Partial<InferPropsInner<Pick<{ rows: Requireable<number>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; loading: Requireable<boolean>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, "label" | "style" | "name" | "className" | "disabled" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "rows">>> & InferPropsInner<Pick<{ type: Requireable<string>; }, never>> & Partial<InferPropsInner<Pick<{ type: Requireable<string>; }, "type">>> & { className: string; }, "style" | "className" | "loading" | "rows">) | (Pick<InferPropsInner<Pick<{ options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, never>> & Partial<InferPropsInner<Pick<{ options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, "label" | "style" | "name" | "className" | "disabled" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "options">>> & InferPropsInner<Pick<{ type: Requireable<string>; }, never>> & Partial<InferPropsInner<Pick<{ type: Requireable<string>; }, "type">>> & { className: string; }, "label" | "style" | "name" | "className" | "disabled" | "type" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "options"> & Pick<InferProps<{ optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; type: Requireable<string>; }>, never> & Pick<InferPropsInner<Pick<{ options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, never>> & Partial<InferPropsInner<Pick<{ options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, "label" | "style" | "name" | "className" | "disabled" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "options">>> & InferPropsInner<Pick<{ type: Requireable<string>; }, never>> & Partial<InferPropsInner<Pick<{ type: Requireable<string>; }, "type">>> & { className: string; }, "style" | "className" | "loading" | "options">) | (Pick<InferPropsInner<Pick<{ multiple: Requireable<boolean>; disabled: Requireable<boolean>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, never>> & Partial<InferPropsInner<Pick<{ multiple: Requireable<boolean>; disabled: Requireable<boolean>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, "label" | "style" | "name" | "className" | "disabled" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "multiple" | "options">>> & InferPropsInner<Pick<{ type: Requireable<string>; }, never>> & Partial<InferPropsInner<Pick<{ type: Requireable<string>; }, "type">>> & { className: string; }, "label" | "style" | "name" | "className" | "disabled" | "type" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "multiple" | "options"> & Pick<InferProps<{ optional: Requireable<boolean>; disabled: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; type: Requireable<string>; }>, never> & Pick<InferPropsInner<Pick<{ multiple: Requireable<boolean>; disabled: Requireable<boolean>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, never>> & Partial<InferPropsInner<Pick<{ multiple: Requireable<boolean>; disabled: Requireable<boolean>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, "label" | "style" | "name" | "className" | "disabled" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "multiple" | "options">>> & InferPropsInner<Pick<{ type: Requireable<string>; }, never>> & Partial<InferPropsInner<Pick<{ type: Requireable<string>; }, "type">>> & { className: string; }, "style" | "className" | "loading" | "multiple" | "options">))'.
    Type '{ label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; type?: string; key: string; }' is not assignable to type 'Pick<InferPropsInner<Pick<{ multiple: Requireable<boolean>; disabled: Requireable<boolean>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, never>> & Partial<InferPropsInner<Pick<{ multiple: Requireable<boolean>; disabled: Requireable<boolean>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, "label" | "style" | "name" | "className" | "disabled" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "multiple" | "options">>> & InferPropsInner<Pick<{ type: Requireable<string>; }, never>> & Partial<InferPropsInner<Pick<{ type: Requireable<string>; }, "type">>> & { className: string; }, "label" | "style" | "name" | "className" | "disabled" | "type" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "multiple" | "options">'.
      Property 'className' is optional in type '{ label?: string; style?: { [x: string]: string; }; name?: string; className?: string; disabled?: boolean; description?: string; loading?: boolean; optional?: boolean; spanLabel?: number; spanLabelDesktop?: number; spanContent?: number; spanContentDesktop?: number; mockLabel?: boolean; registerProps?: object; extensions?: ((...args: any[]) => any)[]; condition?: unknown; type?: string; key: string; }' but required in type 'Pick<InferPropsInner<Pick<{ multiple: Requireable<boolean>; disabled: Requireable<boolean>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, never>> & Partial<InferPropsInner<Pick<{ multiple: Requireable<boolean>; disabled: Requireable<boolean>; options: Validator<any[]>; loading: Requireable<boolean>; className: Requireable<string>; style: Requireable<{ [x: string]: string; }>; optional: Requireable<boolean>; spanLabel: Requireable<number>; spanLabelDesktop: Requireable<number>; spanContent: Requireable<number>; spanContentDesktop: Requireable<number>; name: Validator<string>; label: Requireable<string>; description: Requireable<string>; mockLabel: Requireable<boolean>; registerProps: Requireable<object>; extensions: Requireable<((...args: any[]) => any)[]>; condition: (props: any, propName: any, componentName: any) => Error; }, "label" | "style" | "name" | "className" | "disabled" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "multiple" | "options">>> & InferPropsInner<Pick<{ type: Requireable<string>; }, never>> & Partial<InferPropsInner<Pick<{ type: Requireable<string>; }, "type">>> & { className: string; }, "label" | "style" | "name" | "className" | "disabled" | "type" | "description" | "loading" | "optional" | "spanLabel" | "spanLabelDesktop" | "spanContent" | "spanContentDesktop" | "mockLabel" | "registerProps" | "extensions" | "condition" | "multiple" | "options">'.
