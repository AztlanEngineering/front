(self["webpackChunk_aztlan_template_react"] = self["webpackChunk_aztlan_template_react"] || []).push([["vendors-node_modules_react-relay_index_js"],{

/***/ "../../node_modules/react-relay/index.js":
/*!***********************************************!*\
  !*** ../../node_modules/react-relay/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Relay v16.0.0
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

module.exports = __webpack_require__(/*! ./lib/index.js */ "../../node_modules/react-relay/lib/index.js");


/***/ }),

/***/ "../../node_modules/react-relay/lib/ReactRelayContainerUtils.js":
/*!**********************************************************************!*\
  !*** ../../node_modules/react-relay/lib/ReactRelayContainerUtils.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";


function getComponentName(component) {
  return component.displayName || component.name || 'Component';
}
function getContainerName(Component) {
  return 'Relay(' + getComponentName(Component) + ')';
}
module.exports = {
  getComponentName: getComponentName,
  getContainerName: getContainerName
};

/***/ }),

/***/ "../../node_modules/react-relay/lib/ReactRelayFragmentContainer.js":
/*!*************************************************************************!*\
  !*** ../../node_modules/react-relay/lib/ReactRelayFragmentContainer.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);
var _objectSpread2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ "../../node_modules/@babel/runtime/helpers/objectSpread2.js"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectWithoutPropertiesLoose */ "../../node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js"));
var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/assertThisInitialized */ "../../node_modules/@babel/runtime/helpers/assertThisInitialized.js"));
var _inheritsLoose2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inheritsLoose */ "../../node_modules/@babel/runtime/helpers/inheritsLoose.js"));
var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../node_modules/@babel/runtime/helpers/defineProperty.js"));
var _excluded = ["componentRef", "__relayContext", "__rootIsQueryRenderer"];
var buildReactRelayContainer = __webpack_require__(/*! ./buildReactRelayContainer */ "../../node_modules/react-relay/lib/buildReactRelayContainer.js");
var _require = __webpack_require__(/*! ./ReactRelayContainerUtils */ "../../node_modules/react-relay/lib/ReactRelayContainerUtils.js"),
  getContainerName = _require.getContainerName;
var _require2 = __webpack_require__(/*! ./RelayContext */ "../../node_modules/react-relay/lib/RelayContext.js"),
  assertRelayContext = _require2.assertRelayContext;
var areEqual = __webpack_require__(/*! fbjs/lib/areEqual */ "../../node_modules/fbjs/lib/areEqual.js");
var React = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
var _require3 = __webpack_require__(/*! relay-runtime */ "../../node_modules/relay-runtime/index.js"),
  createFragmentSpecResolver = _require3.createFragmentSpecResolver,
  getDataIDsFromObject = _require3.getDataIDsFromObject,
  isScalarAndEqual = _require3.isScalarAndEqual;
function createContainerWithFragments(Component, fragments) {
  var _class;
  var containerName = getContainerName(Component);
  return _class = /*#__PURE__*/function (_React$Component) {
    (0, _inheritsLoose2["default"])(_class, _React$Component);
    function _class(props) {
      var _props$__rootIsQueryR, _this;
      _this = _React$Component.call(this, props) || this;
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_handleFragmentDataUpdate", function () {
        var resolverFromThisUpdate = _this.state.resolver;
        _this.setState(function (updatedState) {
          return resolverFromThisUpdate === updatedState.resolver ? {
            data: updatedState.resolver.resolve(),
            relayProp: getRelayProp(updatedState.relayProp.environment)
          } : null;
        });
      });
      var relayContext = assertRelayContext(props.__relayContext);
      var rootIsQueryRenderer = (_props$__rootIsQueryR = props.__rootIsQueryRenderer) !== null && _props$__rootIsQueryR !== void 0 ? _props$__rootIsQueryR : false;
      var resolver = createFragmentSpecResolver(relayContext, containerName, fragments, props, rootIsQueryRenderer);
      _this.state = {
        data: resolver.resolve(),
        prevProps: props,
        prevPropsContext: relayContext,
        relayProp: getRelayProp(relayContext.environment),
        resolver: resolver
      };
      return _this;
    }
    _class.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
      var _nextProps$__rootIsQu;
      var prevProps = prevState.prevProps;
      var relayContext = assertRelayContext(nextProps.__relayContext);
      var rootIsQueryRenderer = (_nextProps$__rootIsQu = nextProps.__rootIsQueryRenderer) !== null && _nextProps$__rootIsQu !== void 0 ? _nextProps$__rootIsQu : false;
      var prevIDs = getDataIDsFromObject(fragments, prevProps);
      var nextIDs = getDataIDsFromObject(fragments, nextProps);
      var resolver = prevState.resolver;
      if (prevState.prevPropsContext.environment !== relayContext.environment || !areEqual(prevIDs, nextIDs)) {
        resolver = createFragmentSpecResolver(relayContext, containerName, fragments, nextProps, rootIsQueryRenderer);
        return {
          data: resolver.resolve(),
          prevPropsContext: relayContext,
          prevProps: nextProps,
          relayProp: getRelayProp(relayContext.environment),
          resolver: resolver
        };
      } else {
        resolver.setProps(nextProps);
        var data = resolver.resolve();
        if (data !== prevState.data) {
          return {
            data: data,
            prevProps: nextProps,
            prevPropsContext: relayContext,
            relayProp: getRelayProp(relayContext.environment)
          };
        }
      }
      return null;
    };
    var _proto = _class.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this._subscribeToNewResolverAndRerenderIfStoreHasChanged();
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
      if (this.state.resolver !== prevState.resolver) {
        prevState.resolver.dispose();
        this._subscribeToNewResolverAndRerenderIfStoreHasChanged();
      } else {
        this._rerenderIfStoreHasChanged();
      }
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.state.resolver.dispose();
    };
    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
      if (nextState.data !== this.state.data) {
        return true;
      }
      var keys = Object.keys(nextProps);
      for (var ii = 0; ii < keys.length; ii++) {
        var key = keys[ii];
        if (key === '__relayContext') {
          if (nextState.prevPropsContext.environment !== this.state.prevPropsContext.environment) {
            return true;
          }
        } else {
          if (!fragments.hasOwnProperty(key) && !isScalarAndEqual(nextProps[key], this.props[key])) {
            return true;
          }
        }
      }
      return false;
    };
    _proto._rerenderIfStoreHasChanged = function _rerenderIfStoreHasChanged() {
      var _this$state = this.state,
        data = _this$state.data,
        resolver = _this$state.resolver;
      var maybeNewData = resolver.resolve();
      if (data !== maybeNewData) {
        this.setState({
          data: maybeNewData
        });
      }
    };
    _proto._subscribeToNewResolverAndRerenderIfStoreHasChanged = function _subscribeToNewResolverAndRerenderIfStoreHasChanged() {
      var _this$state2 = this.state,
        data = _this$state2.data,
        resolver = _this$state2.resolver;
      var maybeNewData = resolver.resolve();
      resolver.setCallback(this.props, this._handleFragmentDataUpdate);
      if (data !== maybeNewData) {
        this.setState({
          data: maybeNewData
        });
      }
    };
    _proto.render = function render() {
      var _this$props = this.props,
        componentRef = _this$props.componentRef,
        __relayContext = _this$props.__relayContext,
        __rootIsQueryRenderer = _this$props.__rootIsQueryRenderer,
        props = (0, _objectWithoutPropertiesLoose2["default"])(_this$props, _excluded);
      return React.createElement(Component, (0, _objectSpread2["default"])((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, props), this.state.data), {}, {
        ref: componentRef,
        relay: this.state.relayProp
      }));
    };
    return _class;
  }(React.Component), (0, _defineProperty2["default"])(_class, "displayName", containerName), _class;
}
function getRelayProp(environment) {
  return {
    environment: environment
  };
}
function createContainer(Component, fragmentSpec) {
  return buildReactRelayContainer(Component, fragmentSpec, createContainerWithFragments);
}
module.exports = {
  createContainer: createContainer
};

/***/ }),

/***/ "../../node_modules/react-relay/lib/ReactRelayLocalQueryRenderer.js":
/*!**************************************************************************!*\
  !*** ../../node_modules/react-relay/lib/ReactRelayLocalQueryRenderer.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var ReactRelayContext = __webpack_require__(/*! ./ReactRelayContext */ "../../node_modules/react-relay/lib/ReactRelayContext.js");
var ReactRelayQueryRendererContext = __webpack_require__(/*! ./ReactRelayQueryRendererContext */ "../../node_modules/react-relay/lib/ReactRelayQueryRendererContext.js");
var areEqual = __webpack_require__(/*! fbjs/lib/areEqual */ "../../node_modules/fbjs/lib/areEqual.js");
var React = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
var _require = __webpack_require__(/*! relay-runtime */ "../../node_modules/relay-runtime/index.js"),
  createOperationDescriptor = _require.createOperationDescriptor,
  deepFreeze = _require.deepFreeze,
  getRequest = _require.getRequest;
var useLayoutEffect = React.useLayoutEffect,
  useState = React.useState,
  useRef = React.useRef,
  useMemo = React.useMemo;
var queryRendererContext = {
  rootIsQueryRenderer: true
};
function useDeepCompare(value) {
  var latestValue = React.useRef(value);
  if (!areEqual(latestValue.current, value)) {
    if (true) {
      deepFreeze(value);
    }
    latestValue.current = value;
  }
  return latestValue.current;
}
function ReactRelayLocalQueryRenderer(props) {
  var environment = props.environment,
    query = props.query,
    variables = props.variables,
    render = props.render;
  var latestVariables = useDeepCompare(variables);
  var operation = useMemo(function () {
    var request = getRequest(query);
    return createOperationDescriptor(request, latestVariables);
  }, [query, latestVariables]);
  var relayContext = useMemo(function () {
    return {
      environment: environment
    };
  }, [environment]);
  var dataRef = useRef(null);
  var _useState = useState(null),
    forceUpdate = _useState[1];
  var cleanupFnRef = useRef(null);
  var snapshot = useMemo(function () {
    environment.check(operation);
    var res = environment.lookup(operation.fragment);
    dataRef.current = res.data;
    var retainDisposable = environment.retain(operation);
    var subscribeDisposable = environment.subscribe(res, function (newSnapshot) {
      dataRef.current = newSnapshot.data;
      forceUpdate(dataRef.current);
    });
    var disposed = false;
    function nextCleanupFn() {
      if (!disposed) {
        disposed = true;
        cleanupFnRef.current = null;
        retainDisposable.dispose();
        subscribeDisposable.dispose();
      }
    }
    if (cleanupFnRef.current) {
      cleanupFnRef.current();
    }
    cleanupFnRef.current = nextCleanupFn;
    return res;
  }, [environment, operation]);
  useLayoutEffect(function () {
    var cleanupFn = cleanupFnRef.current;
    return function () {
      cleanupFn && cleanupFn();
    };
  }, [snapshot]);
  return /*#__PURE__*/React.createElement(ReactRelayContext.Provider, {
    value: relayContext
  }, /*#__PURE__*/React.createElement(ReactRelayQueryRendererContext.Provider, {
    value: queryRendererContext
  }, render({
    props: dataRef.current
  })));
}
module.exports = ReactRelayLocalQueryRenderer;

/***/ }),

/***/ "../../node_modules/react-relay/lib/ReactRelayPaginationContainer.js":
/*!***************************************************************************!*\
  !*** ../../node_modules/react-relay/lib/ReactRelayPaginationContainer.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);
var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "../../node_modules/@babel/runtime/helpers/extends.js"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectWithoutPropertiesLoose */ "../../node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js"));
var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/assertThisInitialized */ "../../node_modules/@babel/runtime/helpers/assertThisInitialized.js"));
var _inheritsLoose2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inheritsLoose */ "../../node_modules/@babel/runtime/helpers/inheritsLoose.js"));
var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../node_modules/@babel/runtime/helpers/defineProperty.js"));
var _objectSpread3 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ "../../node_modules/@babel/runtime/helpers/objectSpread2.js"));
var _excluded = ["componentRef"],
  _excluded2 = ["componentRef", "__relayContext", "__rootIsQueryRenderer"],
  _excluded3 = ["componentRef", "__relayContext", "__rootIsQueryRenderer"];
var buildReactRelayContainer = __webpack_require__(/*! ./buildReactRelayContainer */ "../../node_modules/react-relay/lib/buildReactRelayContainer.js");
var getRootVariablesForFragments = __webpack_require__(/*! ./getRootVariablesForFragments */ "../../node_modules/react-relay/lib/getRootVariablesForFragments.js");
var _require = __webpack_require__(/*! ./ReactRelayContainerUtils */ "../../node_modules/react-relay/lib/ReactRelayContainerUtils.js"),
  getComponentName = _require.getComponentName,
  getContainerName = _require.getContainerName;
var ReactRelayContext = __webpack_require__(/*! ./ReactRelayContext */ "../../node_modules/react-relay/lib/ReactRelayContext.js");
var ReactRelayQueryFetcher = __webpack_require__(/*! ./ReactRelayQueryFetcher */ "../../node_modules/react-relay/lib/ReactRelayQueryFetcher.js");
var _require2 = __webpack_require__(/*! ./RelayContext */ "../../node_modules/react-relay/lib/RelayContext.js"),
  assertRelayContext = _require2.assertRelayContext;
var areEqual = __webpack_require__(/*! fbjs/lib/areEqual */ "../../node_modules/fbjs/lib/areEqual.js");
var invariant = __webpack_require__(/*! invariant */ "../../node_modules/invariant/browser.js");
var React = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
var _require3 = __webpack_require__(/*! relay-runtime */ "../../node_modules/relay-runtime/index.js"),
  ConnectionInterface = _require3.ConnectionInterface,
  Observable = _require3.Observable,
  RelayFeatureFlags = _require3.RelayFeatureFlags,
  createFragmentSpecResolver = _require3.createFragmentSpecResolver,
  createOperationDescriptor = _require3.createOperationDescriptor,
  getDataIDsFromObject = _require3.getDataIDsFromObject,
  getRequest = _require3.getRequest,
  getVariablesFromObject = _require3.getVariablesFromObject,
  isScalarAndEqual = _require3.isScalarAndEqual;
var warning = __webpack_require__(/*! fbjs/lib/warning */ "../../node_modules/fbjs/lib/warning.js");
var FORWARD = 'forward';
function createGetConnectionFromProps(metadata) {
  var path = metadata.path;
  !path ?  true ? invariant(false, 'ReactRelayPaginationContainer: Unable to synthesize a ' + 'getConnectionFromProps function.') : 0 : void 0;
  return function (props) {
    var data = props[metadata.fragmentName];
    for (var i = 0; i < path.length; i++) {
      if (!data || typeof data !== 'object') {
        return null;
      }
      data = data[path[i]];
    }
    return data;
  };
}
function createGetFragmentVariables(metadata) {
  var countVariable = metadata.count;
  !countVariable ?  true ? invariant(false, 'ReactRelayPaginationContainer: Unable to synthesize a ' + 'getFragmentVariables function.') : 0 : void 0;
  return function (prevVars, totalCount) {
    return (0, _objectSpread3["default"])((0, _objectSpread3["default"])({}, prevVars), {}, (0, _defineProperty2["default"])({}, countVariable, totalCount));
  };
}
function findConnectionMetadata(fragments) {
  var foundConnectionMetadata = null;
  var isRelayModern = false;
  for (var fragmentName in fragments) {
    var fragment = fragments[fragmentName];
    var connectionMetadata = fragment.metadata && fragment.metadata.connection;
    if (fragment.metadata !== undefined) {
      isRelayModern = true;
    }
    if (connectionMetadata) {
      !(connectionMetadata.length === 1) ?  true ? invariant(false, 'ReactRelayPaginationContainer: Only a single @connection is ' + 'supported, `%s` has %s.', fragmentName, connectionMetadata.length) : 0 : void 0;
      !!foundConnectionMetadata ?  true ? invariant(false, 'ReactRelayPaginationContainer: Only a single fragment with ' + '@connection is supported.') : 0 : void 0;
      foundConnectionMetadata = (0, _objectSpread3["default"])((0, _objectSpread3["default"])({}, connectionMetadata[0]), {}, {
        fragmentName: fragmentName
      });
    }
  }
  !(!isRelayModern || foundConnectionMetadata !== null) ?  true ? invariant(false, 'ReactRelayPaginationContainer: A @connection directive must be present.') : 0 : void 0;
  return foundConnectionMetadata || {};
}
function toObserver(observerOrCallback) {
  return typeof observerOrCallback === 'function' ? {
    error: observerOrCallback,
    complete: observerOrCallback,
    unsubscribe: function unsubscribe(subscription) {
      typeof observerOrCallback === 'function' && observerOrCallback();
    }
  } : observerOrCallback || {};
}
function createContainerWithFragments(Component, fragments, connectionConfig) {
  var _class;
  var componentName = getComponentName(Component);
  var containerName = getContainerName(Component);
  var metadata = findConnectionMetadata(fragments);
  var getConnectionFromProps = connectionConfig.getConnectionFromProps || createGetConnectionFromProps(metadata);
  var direction = connectionConfig.direction || metadata.direction;
  !direction ?  true ? invariant(false, 'ReactRelayPaginationContainer: Unable to infer direction of the ' + 'connection, possibly because both first and last are provided.') : 0 : void 0;
  var getFragmentVariables = connectionConfig.getFragmentVariables || createGetFragmentVariables(metadata);
  return _class = /*#__PURE__*/function (_React$Component) {
    (0, _inheritsLoose2["default"])(_class, _React$Component);
    function _class(props) {
      var _props$__rootIsQueryR, _this;
      _this = _React$Component.call(this, props) || this;
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_handleFragmentDataUpdate", function () {
        _this.setState({
          data: _this._resolver.resolve()
        });
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_hasMore", function () {
        var connectionData = _this._getConnectionData();
        return !!(connectionData && connectionData.hasMore && connectionData.cursor);
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_isLoading", function () {
        return !!_this._refetchSubscription;
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_refetchConnection", function (totalCount, observerOrCallback, refetchVariables) {
        if (!_this._canFetchPage('refetchConnection')) {
          return {
            dispose: function dispose() {}
          };
        }
        _this._refetchVariables = refetchVariables;
        var paginatingVariables = {
          count: totalCount,
          cursor: null,
          totalCount: totalCount
        };
        var fetch = _this._fetchPage(paginatingVariables, toObserver(observerOrCallback), {
          force: true
        });
        return {
          dispose: fetch.unsubscribe
        };
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_loadMore", function (pageSize, observerOrCallback, options) {
        if (!_this._canFetchPage('loadMore')) {
          return {
            dispose: function dispose() {}
          };
        }
        var observer = toObserver(observerOrCallback);
        var connectionData = _this._getConnectionData();
        if (!connectionData) {
          Observable.create(function (sink) {
            return sink.complete();
          }).subscribe(observer);
          return null;
        }
        var totalCount = connectionData.edgeCount + pageSize;
        if (options && options.force) {
          return _this._refetchConnection(totalCount, observerOrCallback);
        }
        var _ConnectionInterface$ = ConnectionInterface.get(),
          END_CURSOR = _ConnectionInterface$.END_CURSOR,
          START_CURSOR = _ConnectionInterface$.START_CURSOR;
        var cursor = connectionData.cursor;
         true ? warning(cursor != null && cursor !== '', 'ReactRelayPaginationContainer: Cannot `loadMore` without valid `%s` (got `%s`)', direction === FORWARD ? END_CURSOR : START_CURSOR, cursor) : 0;
        var paginatingVariables = {
          count: pageSize,
          cursor: cursor,
          totalCount: totalCount
        };
        var fetch = _this._fetchPage(paginatingVariables, observer, options);
        return {
          dispose: fetch.unsubscribe
        };
      });
      var relayContext = assertRelayContext(props.__relayContext);
      var rootIsQueryRenderer = (_props$__rootIsQueryR = props.__rootIsQueryRenderer) !== null && _props$__rootIsQueryR !== void 0 ? _props$__rootIsQueryR : false;
      _this._isARequestInFlight = false;
      _this._refetchSubscription = null;
      _this._refetchVariables = null;
      if (RelayFeatureFlags.ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT === true) {
        _this._resolver = createFragmentSpecResolver(relayContext, containerName, fragments, props, rootIsQueryRenderer);
      } else {
        _this._resolver = createFragmentSpecResolver(relayContext, containerName, fragments, props, rootIsQueryRenderer, _this._handleFragmentDataUpdate);
      }
      _this.state = {
        data: _this._resolver.resolve(),
        prevContext: relayContext,
        contextForChildren: relayContext,
        relayProp: _this._buildRelayProp(relayContext),
        resolverGeneration: 0
      };
      _this._isUnmounted = false;
      _this._hasFetched = false;
      return _this;
    }
    var _proto = _class.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this._isUnmounted = false;
      if (RelayFeatureFlags.ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT === true) {
        this._subscribeToNewResolverAndRerenderIfStoreHasChanged();
      }
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
      if (RelayFeatureFlags.ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT === true) {
        if (prevState.resolverGeneration !== this.state.resolverGeneration) {
          this._subscribeToNewResolverAndRerenderIfStoreHasChanged();
        } else {
          this._rerenderIfStoreHasChanged();
        }
      }
    };
    _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {
      var _this2 = this;
      var _nextProps$__rootIsQu;
      var relayContext = assertRelayContext(nextProps.__relayContext);
      var rootIsQueryRenderer = (_nextProps$__rootIsQu = nextProps.__rootIsQueryRenderer) !== null && _nextProps$__rootIsQu !== void 0 ? _nextProps$__rootIsQu : false;
      var prevIDs = getDataIDsFromObject(fragments, this.props);
      var nextIDs = getDataIDsFromObject(fragments, nextProps);
      var prevRootVariables = getRootVariablesForFragments(fragments, this.props);
      var nextRootVariables = getRootVariablesForFragments(fragments, nextProps);
      if (relayContext.environment !== this.state.prevContext.environment || !areEqual(prevRootVariables, nextRootVariables) || !areEqual(prevIDs, nextIDs)) {
        this._cleanup();
        if (RelayFeatureFlags.ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT === true) {
          this._resolver = createFragmentSpecResolver(relayContext, containerName, fragments, nextProps, rootIsQueryRenderer);
        } else {
          this._resolver = createFragmentSpecResolver(relayContext, containerName, fragments, nextProps, rootIsQueryRenderer, this._handleFragmentDataUpdate);
        }
        this.setState(function (prevState) {
          return {
            prevContext: relayContext,
            contextForChildren: relayContext,
            relayProp: _this2._buildRelayProp(relayContext),
            resolverGeneration: prevState.resolverGeneration + 1
          };
        });
      } else if (!this._hasFetched) {
        this._resolver.setProps(nextProps);
      }
      var data = this._resolver.resolve();
      if (data !== this.state.data) {
        this.setState({
          data: data
        });
      }
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this._isUnmounted = true;
      this._cleanup();
    };
    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
      if (nextState.data !== this.state.data || nextState.relayProp !== this.state.relayProp || nextState.resolverGeneration !== this.state.resolverGeneration) {
        return true;
      }
      var keys = Object.keys(nextProps);
      for (var ii = 0; ii < keys.length; ii++) {
        var key = keys[ii];
        if (key === '__relayContext') {
          if (nextState.prevContext.environment !== this.state.prevContext.environment) {
            return true;
          }
        } else {
          if (!fragments.hasOwnProperty(key) && !isScalarAndEqual(nextProps[key], this.props[key])) {
            return true;
          }
        }
      }
      return false;
    };
    _proto._buildRelayProp = function _buildRelayProp(relayContext) {
      return {
        hasMore: this._hasMore,
        isLoading: this._isLoading,
        loadMore: this._loadMore,
        refetchConnection: this._refetchConnection,
        environment: relayContext.environment
      };
    };
    _proto._rerenderIfStoreHasChanged = function _rerenderIfStoreHasChanged() {
      var data = this.state.data;
      var maybeNewData = this._resolver.resolve();
      if (data !== maybeNewData) {
        this.setState({
          data: maybeNewData
        });
      }
    };
    _proto._subscribeToNewResolverAndRerenderIfStoreHasChanged = function _subscribeToNewResolverAndRerenderIfStoreHasChanged() {
      var data = this.state.data;
      var maybeNewData = this._resolver.resolve();
      this._resolver.setCallback(this.props, this._handleFragmentDataUpdate);
      if (data !== maybeNewData) {
        this.setState({
          data: maybeNewData
        });
      }
    };
    _proto._getConnectionData = function _getConnectionData() {
      var _this$props = this.props,
        _ = _this$props.componentRef,
        restProps = (0, _objectWithoutPropertiesLoose2["default"])(_this$props, _excluded);
      var props = (0, _objectSpread3["default"])((0, _objectSpread3["default"])({}, restProps), this.state.data);
      var connectionData = getConnectionFromProps(props);
      if (connectionData == null) {
        return null;
      }
      var _ConnectionInterface$2 = ConnectionInterface.get(),
        EDGES = _ConnectionInterface$2.EDGES,
        PAGE_INFO = _ConnectionInterface$2.PAGE_INFO,
        HAS_NEXT_PAGE = _ConnectionInterface$2.HAS_NEXT_PAGE,
        HAS_PREV_PAGE = _ConnectionInterface$2.HAS_PREV_PAGE,
        END_CURSOR = _ConnectionInterface$2.END_CURSOR,
        START_CURSOR = _ConnectionInterface$2.START_CURSOR;
      !(typeof connectionData === 'object') ?  true ? invariant(false, 'ReactRelayPaginationContainer: Expected `getConnectionFromProps()` in `%s`' + 'to return `null` or a plain object with %s and %s properties, got `%s`.', componentName, EDGES, PAGE_INFO, connectionData) : 0 : void 0;
      var edges = connectionData[EDGES];
      var pageInfo = connectionData[PAGE_INFO];
      if (edges == null || pageInfo == null) {
        return null;
      }
      !Array.isArray(edges) ?  true ? invariant(false, 'ReactRelayPaginationContainer: Expected `getConnectionFromProps()` in `%s`' + 'to return an object with %s: Array, got `%s`.', componentName, EDGES, edges) : 0 : void 0;
      !(typeof pageInfo === 'object') ?  true ? invariant(false, 'ReactRelayPaginationContainer: Expected `getConnectionFromProps()` in `%s`' + 'to return an object with %s: Object, got `%s`.', componentName, PAGE_INFO, pageInfo) : 0 : void 0;
      var hasMore = direction === FORWARD ? pageInfo[HAS_NEXT_PAGE] : pageInfo[HAS_PREV_PAGE];
      var cursor = direction === FORWARD ? pageInfo[END_CURSOR] : pageInfo[START_CURSOR];
      if (typeof hasMore !== 'boolean' || edges.length !== 0 && typeof cursor === 'undefined') {
         true ? warning(false, 'ReactRelayPaginationContainer: Cannot paginate without %s fields in `%s`. ' + 'Be sure to fetch %s (got `%s`) and %s (got `%s`).', PAGE_INFO, componentName, direction === FORWARD ? HAS_NEXT_PAGE : HAS_PREV_PAGE, hasMore, direction === FORWARD ? END_CURSOR : START_CURSOR, cursor) : 0;
        return null;
      }
      return {
        cursor: cursor,
        edgeCount: edges.length,
        hasMore: hasMore
      };
    };
    _proto._getQueryFetcher = function _getQueryFetcher() {
      if (!this._queryFetcher) {
        this._queryFetcher = new ReactRelayQueryFetcher();
      }
      return this._queryFetcher;
    };
    _proto._canFetchPage = function _canFetchPage(method) {
      if (this._isUnmounted) {
         true ? warning(false, 'ReactRelayPaginationContainer: Unexpected call of `%s` ' + 'on unmounted container `%s`. It looks like some instances ' + 'of your container still trying to fetch data but they already ' + 'unmounted. Please make sure you clear all timers, intervals, async ' + 'calls, etc that may trigger `%s` call.', method, containerName, method) : 0;
        return false;
      }
      return true;
    };
    _proto._fetchPage = function _fetchPage(paginatingVariables, observer, options) {
      var _this3 = this;
      var _assertRelayContext = assertRelayContext(this.props.__relayContext),
        environment = _assertRelayContext.environment;
      var _this$props2 = this.props,
        _ = _this$props2.componentRef,
        __relayContext = _this$props2.__relayContext,
        __rootIsQueryRenderer = _this$props2.__rootIsQueryRenderer,
        restProps = (0, _objectWithoutPropertiesLoose2["default"])(_this$props2, _excluded2);
      var props = (0, _objectSpread3["default"])((0, _objectSpread3["default"])({}, restProps), this.state.data);
      var fragmentVariables;
      var rootVariables = getRootVariablesForFragments(fragments, restProps);
      fragmentVariables = getVariablesFromObject(fragments, restProps);
      fragmentVariables = (0, _objectSpread3["default"])((0, _objectSpread3["default"])((0, _objectSpread3["default"])({}, rootVariables), fragmentVariables), this._refetchVariables);
      var fetchVariables = connectionConfig.getVariables(props, {
        count: paginatingVariables.count,
        cursor: paginatingVariables.cursor
      }, fragmentVariables);
      !(typeof fetchVariables === 'object' && fetchVariables !== null) ?  true ? invariant(false, 'ReactRelayPaginationContainer: Expected `getVariables()` to ' + 'return an object, got `%s` in `%s`.', fetchVariables, componentName) : 0 : void 0;
      fetchVariables = (0, _objectSpread3["default"])((0, _objectSpread3["default"])({}, fetchVariables), this._refetchVariables);
      fragmentVariables = (0, _objectSpread3["default"])((0, _objectSpread3["default"])({}, fetchVariables), fragmentVariables);
      var cacheConfig = options ? {
        force: !!options.force
      } : undefined;
      if (cacheConfig != null && (options === null || options === void 0 ? void 0 : options.metadata) != null) {
        cacheConfig.metadata = options === null || options === void 0 ? void 0 : options.metadata;
      }
      var request = getRequest(connectionConfig.query);
      var operation = createOperationDescriptor(request, fetchVariables, cacheConfig);
      var refetchSubscription = null;
      if (this._refetchSubscription) {
        this._refetchSubscription.unsubscribe();
      }
      this._hasFetched = true;
      var onNext = function onNext(payload, complete) {
        var prevData = _this3._resolver.resolve();
        _this3._resolver.setVariables(getFragmentVariables(fragmentVariables, paginatingVariables.totalCount), operation.request.node);
        var nextData = _this3._resolver.resolve();
        if (!areEqual(prevData, nextData)) {
          _this3.setState({
            data: nextData,
            contextForChildren: {
              environment: _this3.props.__relayContext.environment
            }
          }, complete);
        } else {
          complete();
        }
      };
      var cleanup = function cleanup() {
        if (_this3._refetchSubscription === refetchSubscription) {
          _this3._refetchSubscription = null;
          _this3._isARequestInFlight = false;
        }
      };
      this._isARequestInFlight = true;
      refetchSubscription = this._getQueryFetcher().execute({
        environment: environment,
        operation: operation,
        preservePreviousReferences: true
      }).mergeMap(function (payload) {
        return Observable.create(function (sink) {
          onNext(payload, function () {
            sink.next();
            sink.complete();
          });
        });
      })["do"]({
        error: cleanup,
        complete: cleanup,
        unsubscribe: cleanup
      }).subscribe(observer || {});
      this._refetchSubscription = this._isARequestInFlight ? refetchSubscription : null;
      return refetchSubscription;
    };
    _proto._cleanup = function _cleanup() {
      this._resolver.dispose();
      this._refetchVariables = null;
      this._hasFetched = false;
      if (this._refetchSubscription) {
        this._refetchSubscription.unsubscribe();
        this._refetchSubscription = null;
        this._isARequestInFlight = false;
      }
      if (this._queryFetcher) {
        this._queryFetcher.dispose();
      }
    };
    _proto.render = function render() {
      var _this$props3 = this.props,
        componentRef = _this$props3.componentRef,
        __relayContext = _this$props3.__relayContext,
        __rootIsQueryRenderer = _this$props3.__rootIsQueryRenderer,
        props = (0, _objectWithoutPropertiesLoose2["default"])(_this$props3, _excluded3);
      return /*#__PURE__*/React.createElement(ReactRelayContext.Provider, {
        value: this.state.contextForChildren
      }, /*#__PURE__*/React.createElement(Component, (0, _extends2["default"])({}, props, this.state.data, {
        ref: componentRef,
        relay: this.state.relayProp
      })));
    };
    return _class;
  }(React.Component), (0, _defineProperty2["default"])(_class, "displayName", containerName), _class;
}
function createContainer(Component, fragmentSpec, connectionConfig) {
  return buildReactRelayContainer(Component, fragmentSpec, function (ComponentClass, fragments) {
    return createContainerWithFragments(ComponentClass, fragments, connectionConfig);
  });
}
module.exports = {
  createContainer: createContainer
};

/***/ }),

/***/ "../../node_modules/react-relay/lib/ReactRelayQueryFetcher.js":
/*!********************************************************************!*\
  !*** ../../node_modules/react-relay/lib/ReactRelayQueryFetcher.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);
var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../node_modules/@babel/runtime/helpers/defineProperty.js"));
var invariant = __webpack_require__(/*! invariant */ "../../node_modules/invariant/browser.js");
var _require = __webpack_require__(/*! relay-runtime */ "../../node_modules/relay-runtime/index.js"),
  fetchQuery = _require.__internal.fetchQuery,
  createOperationDescriptor = _require.createOperationDescriptor,
  isRelayModernEnvironment = _require.isRelayModernEnvironment;
var ReactRelayQueryFetcher = /*#__PURE__*/function () {
  function ReactRelayQueryFetcher(args) {
    (0, _defineProperty2["default"])(this, "_selectionReferences", []);
    (0, _defineProperty2["default"])(this, "_didFetchFinish", false);
    if (args != null) {
      this._cacheSelectionReference = args.cacheSelectionReference;
      this._selectionReferences = args.selectionReferences;
    }
  }
  var _proto = ReactRelayQueryFetcher.prototype;
  _proto.getSelectionReferences = function getSelectionReferences() {
    return {
      cacheSelectionReference: this._cacheSelectionReference,
      selectionReferences: this._selectionReferences
    };
  };
  _proto.lookupInStore = function lookupInStore(environment, operation, fetchPolicy) {
    if (fetchPolicy === 'store-and-network' || fetchPolicy === 'store-or-network') {
      if (environment.check(operation).status === 'available') {
        this._retainCachedOperation(environment, operation);
        return environment.lookup(operation.fragment);
      }
    }
    return null;
  };
  _proto.getFetchResult = function getFetchResult() {
    if (this._didFetchFinish) {
      if (this._error != null) {
        return {
          error: this._error
        };
      } else if (this._snapshot != null) {
        return {
          snapshot: this._snapshot
        };
      }
    } else {
      return null;
    }
  };
  _proto.execute = function execute(_ref) {
    var _this = this;
    var environment = _ref.environment,
      operation = _ref.operation,
      _ref$preservePrevious = _ref.preservePreviousReferences,
      preservePreviousReferences = _ref$preservePrevious === void 0 ? false : _ref$preservePrevious;
    var reference = environment.retain(operation);
    var error = function error() {
      _this._selectionReferences = _this._selectionReferences.concat(reference);
    };
    var complete = function complete() {
      if (!preservePreviousReferences) {
        _this.disposeSelectionReferences();
      }
      _this._selectionReferences = _this._selectionReferences.concat(reference);
    };
    var unsubscribe = function unsubscribe() {
      _this._selectionReferences = _this._selectionReferences.concat(reference);
    };
    if (!isRelayModernEnvironment(environment)) {
      return environment.execute({
        operation: operation
      })["do"]({
        error: error,
        complete: complete,
        unsubscribe: unsubscribe
      });
    }
    return fetchQuery(environment, operation)["do"]({
      error: error,
      complete: complete,
      unsubscribe: unsubscribe
    });
  };
  _proto.setOnDataChange = function setOnDataChange(onDataChange) {
    !this._fetchOptions ?  true ? invariant(false, 'ReactRelayQueryFetcher: `setOnDataChange` should have been called after having called `fetch`') : 0 : void 0;
    if (typeof onDataChange === 'function') {
      this._fetchOptions.onDataChangeCallbacks = this._fetchOptions.onDataChangeCallbacks || [];
      this._fetchOptions.onDataChangeCallbacks.push(onDataChange);
      if (this._didFetchFinish) {
        if (this._error != null) {
          onDataChange({
            error: this._error
          });
        } else if (this._snapshot != null) {
          onDataChange({
            snapshot: this._snapshot
          });
        }
      }
    }
  };
  _proto.fetch = function fetch(fetchOptions, cacheConfigOverride) {
    var _this2 = this;
    var environment = fetchOptions.environment,
      operation = fetchOptions.operation,
      onDataChange = fetchOptions.onDataChange;
    var fetchHasReturned = false;
    var _error;
    this.disposeRequest();
    var oldOnDataChangeCallbacks = this._fetchOptions && this._fetchOptions.onDataChangeCallbacks;
    this._fetchOptions = {
      environment: environment,
      onDataChangeCallbacks: oldOnDataChangeCallbacks || [],
      operation: operation
    };
    if (onDataChange && this._fetchOptions.onDataChangeCallbacks.indexOf(onDataChange) === -1) {
      this._fetchOptions.onDataChangeCallbacks.push(onDataChange);
    }
    var operationOverride = cacheConfigOverride ? createOperationDescriptor(operation.request.node, operation.request.variables, cacheConfigOverride) : operation;
    var request = this.execute({
      environment: environment,
      operation: operationOverride
    })["finally"](function () {
      _this2._pendingRequest = null;
    }).subscribe({
      next: function next() {
        _this2._didFetchFinish = true;
        _this2._error = null;
        _this2._onQueryDataAvailable({
          notifyFirstResult: fetchHasReturned
        });
      },
      error: function error(err) {
        _this2._didFetchFinish = true;
        _this2._error = err;
        _this2._snapshot = null;
        var onDataChangeCallbacks = _this2._fetchOptions && _this2._fetchOptions.onDataChangeCallbacks;
        if (fetchHasReturned) {
          if (onDataChangeCallbacks) {
            onDataChangeCallbacks.forEach(function (onDataChange) {
              onDataChange({
                error: err
              });
            });
          }
        } else {
          _error = err;
        }
      }
    });
    this._pendingRequest = {
      dispose: function dispose() {
        request.unsubscribe();
      }
    };
    fetchHasReturned = true;
    if (_error) {
      throw _error;
    }
    return this._snapshot;
  };
  _proto.retry = function retry(cacheConfigOverride) {
    !this._fetchOptions ?  true ? invariant(false, 'ReactRelayQueryFetcher: `retry` should be called after having called `fetch`') : 0 : void 0;
    return this.fetch({
      environment: this._fetchOptions.environment,
      operation: this._fetchOptions.operation,
      onDataChange: null
    }, cacheConfigOverride);
  };
  _proto.dispose = function dispose() {
    this.disposeRequest();
    this.disposeSelectionReferences();
  };
  _proto.disposeRequest = function disposeRequest() {
    this._error = null;
    this._snapshot = null;
    if (this._pendingRequest) {
      this._pendingRequest.dispose();
    }
    if (this._rootSubscription) {
      this._rootSubscription.dispose();
      this._rootSubscription = null;
    }
  };
  _proto._retainCachedOperation = function _retainCachedOperation(environment, operation) {
    this._disposeCacheSelectionReference();
    this._cacheSelectionReference = environment.retain(operation);
  };
  _proto._disposeCacheSelectionReference = function _disposeCacheSelectionReference() {
    this._cacheSelectionReference && this._cacheSelectionReference.dispose();
    this._cacheSelectionReference = null;
  };
  _proto.disposeSelectionReferences = function disposeSelectionReferences() {
    this._disposeCacheSelectionReference();
    this._selectionReferences.forEach(function (r) {
      return r.dispose();
    });
    this._selectionReferences = [];
  };
  _proto._onQueryDataAvailable = function _onQueryDataAvailable(_ref2) {
    var _this3 = this;
    var notifyFirstResult = _ref2.notifyFirstResult;
    !this._fetchOptions ?  true ? invariant(false, 'ReactRelayQueryFetcher: `_onQueryDataAvailable` should have been called after having called `fetch`') : 0 : void 0;
    var _this$_fetchOptions = this._fetchOptions,
      environment = _this$_fetchOptions.environment,
      onDataChangeCallbacks = _this$_fetchOptions.onDataChangeCallbacks,
      operation = _this$_fetchOptions.operation;
    if (this._snapshot) {
      return;
    }
    this._snapshot = environment.lookup(operation.fragment);
    this._rootSubscription = environment.subscribe(this._snapshot, function (snapshot) {
      if (_this3._fetchOptions != null) {
        var maybeNewOnDataChangeCallbacks = _this3._fetchOptions.onDataChangeCallbacks;
        if (Array.isArray(maybeNewOnDataChangeCallbacks)) {
          maybeNewOnDataChangeCallbacks.forEach(function (onDataChange) {
            return onDataChange({
              snapshot: snapshot
            });
          });
        }
      }
    });
    if (this._snapshot && notifyFirstResult && Array.isArray(onDataChangeCallbacks)) {
      var snapshot = this._snapshot;
      onDataChangeCallbacks.forEach(function (onDataChange) {
        return onDataChange({
          snapshot: snapshot
        });
      });
    }
  };
  return ReactRelayQueryFetcher;
}();
module.exports = ReactRelayQueryFetcher;

/***/ }),

/***/ "../../node_modules/react-relay/lib/ReactRelayQueryRenderer.js":
/*!*********************************************************************!*\
  !*** ../../node_modules/react-relay/lib/ReactRelayQueryRenderer.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);
var _objectSpread2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ "../../node_modules/@babel/runtime/helpers/objectSpread2.js"));
var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/assertThisInitialized */ "../../node_modules/@babel/runtime/helpers/assertThisInitialized.js"));
var _inheritsLoose2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inheritsLoose */ "../../node_modules/@babel/runtime/helpers/inheritsLoose.js"));
var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../node_modules/@babel/runtime/helpers/defineProperty.js"));
var ReactRelayContext = __webpack_require__(/*! ./ReactRelayContext */ "../../node_modules/react-relay/lib/ReactRelayContext.js");
var ReactRelayQueryFetcher = __webpack_require__(/*! ./ReactRelayQueryFetcher */ "../../node_modules/react-relay/lib/ReactRelayQueryFetcher.js");
var ReactRelayQueryRendererContext = __webpack_require__(/*! ./ReactRelayQueryRendererContext */ "../../node_modules/react-relay/lib/ReactRelayQueryRendererContext.js");
var areEqual = __webpack_require__(/*! fbjs/lib/areEqual */ "../../node_modules/fbjs/lib/areEqual.js");
var React = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
var _require = __webpack_require__(/*! relay-runtime */ "../../node_modules/relay-runtime/index.js"),
  createOperationDescriptor = _require.createOperationDescriptor,
  deepFreeze = _require.deepFreeze,
  getRequest = _require.getRequest;
var requestCache = {};
var queryRendererContext = {
  rootIsQueryRenderer: true
};
var ReactRelayQueryRenderer = /*#__PURE__*/function (_React$Component) {
  (0, _inheritsLoose2["default"])(ReactRelayQueryRenderer, _React$Component);
  function ReactRelayQueryRenderer(props) {
    var _this;
    _this = _React$Component.call(this, props) || this;
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_handleDataChange", function (params) {
      var error = params.error == null ? null : params.error;
      var snapshot = params.snapshot == null ? null : params.snapshot;
      _this.setState(function (prevState) {
        var prevRequestCacheKey = prevState.requestCacheKey;
        if (prevRequestCacheKey) {
          delete requestCache[prevRequestCacheKey];
        }
        if (snapshot === prevState.snapshot && error === prevState.error) {
          return null;
        }
        return {
          renderProps: getRenderProps(error, snapshot, prevState.queryFetcher, prevState.retryCallbacks),
          snapshot: snapshot,
          requestCacheKey: null
        };
      });
    });
    var retryCallbacks = {
      handleDataChange: null,
      handleRetryAfterError: null
    };
    var queryFetcher;
    var requestCacheKey;
    if (props.query) {
      var query = props.query;
      var request = getRequest(query);
      requestCacheKey = getRequestCacheKey(request.params, props.variables);
      queryFetcher = requestCache[requestCacheKey] ? requestCache[requestCacheKey].queryFetcher : new ReactRelayQueryFetcher();
    } else {
      queryFetcher = new ReactRelayQueryFetcher();
    }
    _this._maybeHiddenOrFastRefresh = false;
    _this.state = (0, _objectSpread2["default"])({
      prevPropsEnvironment: props.environment,
      prevPropsVariables: props.variables,
      prevQuery: props.query,
      queryFetcher: queryFetcher,
      retryCallbacks: retryCallbacks
    }, fetchQueryAndComputeStateFromProps(props, queryFetcher, retryCallbacks, requestCacheKey));
    return _this;
  }
  ReactRelayQueryRenderer.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
    if (prevState.prevQuery !== nextProps.query || prevState.prevPropsEnvironment !== nextProps.environment || !areEqual(prevState.prevPropsVariables, nextProps.variables)) {
      return resetQueryStateForUpdate(nextProps, prevState);
    }
    return null;
  };
  var _proto = ReactRelayQueryRenderer.prototype;
  _proto.componentDidMount = function componentDidMount() {
    var _this2 = this;
    if (this._maybeHiddenOrFastRefresh === true) {
      this._maybeHiddenOrFastRefresh = false;
      this.setState(function (prevState) {
        var newState = resetQueryStateForUpdate(_this2.props, prevState);
        var requestCacheKey = newState.requestCacheKey,
          queryFetcher = newState.queryFetcher;
        if (requestCacheKey != null && requestCache[requestCacheKey] != null) {
          queryFetcher.setOnDataChange(_this2._handleDataChange);
        }
        return newState;
      });
      return;
    }
    var _this$state = this.state,
      retryCallbacks = _this$state.retryCallbacks,
      queryFetcher = _this$state.queryFetcher,
      requestCacheKey = _this$state.requestCacheKey;
    if (requestCacheKey) {
      delete requestCache[requestCacheKey];
    }
    retryCallbacks.handleDataChange = this._handleDataChange;
    retryCallbacks.handleRetryAfterError = function (error) {
      return _this2.setState(function (prevState) {
        var prevRequestCacheKey = prevState.requestCacheKey;
        if (prevRequestCacheKey) {
          delete requestCache[prevRequestCacheKey];
        }
        return {
          renderProps: getLoadingRenderProps(),
          requestCacheKey: null
        };
      });
    };
    if (this.props.query) {
      queryFetcher.setOnDataChange(this._handleDataChange);
    }
  };
  _proto.componentDidUpdate = function componentDidUpdate(_prevProps, prevState) {
    var _this$state2 = this.state,
      queryFetcher = _this$state2.queryFetcher,
      requestCacheKey = _this$state2.requestCacheKey;
    if (requestCacheKey) {
      delete requestCache[requestCacheKey];
      delete this.state.requestCacheKey;
    }
    if (this.props.query && queryFetcher !== prevState.queryFetcher) {
      queryFetcher.setOnDataChange(this._handleDataChange);
    }
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.state.queryFetcher.dispose();
    this._maybeHiddenOrFastRefresh = true;
  };
  _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
    return nextProps.render !== this.props.render || nextState.renderProps !== this.state.renderProps;
  };
  _proto.render = function render() {
    var _this$state3 = this.state,
      renderProps = _this$state3.renderProps,
      relayContext = _this$state3.relayContext;
    if (true) {
      deepFreeze(renderProps);
    }
    return /*#__PURE__*/React.createElement(ReactRelayContext.Provider, {
      value: relayContext
    }, /*#__PURE__*/React.createElement(ReactRelayQueryRendererContext.Provider, {
      value: queryRendererContext
    }, this.props.render(renderProps)));
  };
  return ReactRelayQueryRenderer;
}(React.Component);
function getLoadingRenderProps() {
  return {
    error: null,
    props: null,
    retry: null
  };
}
function getEmptyRenderProps() {
  return {
    error: null,
    props: {},
    retry: null
  };
}
function getRenderProps(error, snapshot, queryFetcher, retryCallbacks) {
  return {
    error: error ? error : null,
    props: snapshot ? snapshot.data : null,
    retry: function retry(cacheConfigOverride) {
      var syncSnapshot = queryFetcher.retry(cacheConfigOverride);
      if (syncSnapshot && typeof retryCallbacks.handleDataChange === 'function') {
        retryCallbacks.handleDataChange({
          snapshot: syncSnapshot
        });
      } else if (error && typeof retryCallbacks.handleRetryAfterError === 'function') {
        retryCallbacks.handleRetryAfterError(error);
      }
    }
  };
}
function getRequestCacheKey(request, variables) {
  return JSON.stringify({
    id: request.cacheID ? request.cacheID : request.id,
    variables: variables
  });
}
function resetQueryStateForUpdate(props, prevState) {
  var query = props.query;
  var prevSelectionReferences = prevState.queryFetcher.getSelectionReferences();
  prevState.queryFetcher.disposeRequest();
  var queryFetcher;
  if (query) {
    var request = getRequest(query);
    var requestCacheKey = getRequestCacheKey(request.params, props.variables);
    queryFetcher = requestCache[requestCacheKey] ? requestCache[requestCacheKey].queryFetcher : new ReactRelayQueryFetcher(prevSelectionReferences);
  } else {
    queryFetcher = new ReactRelayQueryFetcher(prevSelectionReferences);
  }
  return (0, _objectSpread2["default"])({
    prevQuery: props.query,
    prevPropsEnvironment: props.environment,
    prevPropsVariables: props.variables,
    queryFetcher: queryFetcher
  }, fetchQueryAndComputeStateFromProps(props, queryFetcher, prevState.retryCallbacks));
}
function fetchQueryAndComputeStateFromProps(props, queryFetcher, retryCallbacks, requestCacheKey) {
  var environment = props.environment,
    query = props.query,
    variables = props.variables,
    cacheConfig = props.cacheConfig;
  var genericEnvironment = environment;
  if (query) {
    var request = getRequest(query);
    var operation = createOperationDescriptor(request, variables, cacheConfig);
    var relayContext = {
      environment: genericEnvironment
    };
    if (typeof requestCacheKey === 'string' && requestCache[requestCacheKey]) {
      var snapshot = requestCache[requestCacheKey].snapshot;
      if (snapshot) {
        return {
          error: null,
          relayContext: relayContext,
          renderProps: getRenderProps(null, snapshot, queryFetcher, retryCallbacks),
          snapshot: snapshot,
          requestCacheKey: requestCacheKey
        };
      } else {
        return {
          error: null,
          relayContext: relayContext,
          renderProps: getLoadingRenderProps(),
          snapshot: null,
          requestCacheKey: requestCacheKey
        };
      }
    }
    try {
      var storeSnapshot = queryFetcher.lookupInStore(genericEnvironment, operation, props.fetchPolicy);
      var querySnapshot = queryFetcher.fetch({
        environment: genericEnvironment,
        onDataChange: null,
        operation: operation
      });
      var _snapshot = querySnapshot || storeSnapshot;
      requestCacheKey = requestCacheKey || getRequestCacheKey(request.params, props.variables);
      requestCache[requestCacheKey] = {
        queryFetcher: queryFetcher,
        snapshot: _snapshot
      };
      if (!_snapshot) {
        return {
          error: null,
          relayContext: relayContext,
          renderProps: getLoadingRenderProps(),
          snapshot: null,
          requestCacheKey: requestCacheKey
        };
      }
      return {
        error: null,
        relayContext: relayContext,
        renderProps: getRenderProps(null, _snapshot, queryFetcher, retryCallbacks),
        snapshot: _snapshot,
        requestCacheKey: requestCacheKey
      };
    } catch (error) {
      return {
        error: error,
        relayContext: relayContext,
        renderProps: getRenderProps(error, null, queryFetcher, retryCallbacks),
        snapshot: null,
        requestCacheKey: requestCacheKey
      };
    }
  } else {
    queryFetcher.dispose();
    var _relayContext = {
      environment: genericEnvironment
    };
    return {
      error: null,
      relayContext: _relayContext,
      renderProps: getEmptyRenderProps(),
      requestCacheKey: null
    };
  }
}
module.exports = ReactRelayQueryRenderer;

/***/ }),

/***/ "../../node_modules/react-relay/lib/ReactRelayQueryRendererContext.js":
/*!****************************************************************************!*\
  !*** ../../node_modules/react-relay/lib/ReactRelayQueryRendererContext.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var React = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
module.exports = React.createContext({
  rootIsQueryRenderer: false
});

/***/ }),

/***/ "../../node_modules/react-relay/lib/ReactRelayRefetchContainer.js":
/*!************************************************************************!*\
  !*** ../../node_modules/react-relay/lib/ReactRelayRefetchContainer.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);
var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "../../node_modules/@babel/runtime/helpers/extends.js"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectWithoutPropertiesLoose */ "../../node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js"));
var _objectSpread2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ "../../node_modules/@babel/runtime/helpers/objectSpread2.js"));
var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/assertThisInitialized */ "../../node_modules/@babel/runtime/helpers/assertThisInitialized.js"));
var _inheritsLoose2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inheritsLoose */ "../../node_modules/@babel/runtime/helpers/inheritsLoose.js"));
var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../../node_modules/@babel/runtime/helpers/defineProperty.js"));
var _excluded = ["componentRef", "__relayContext", "__rootIsQueryRenderer"];
var buildReactRelayContainer = __webpack_require__(/*! ./buildReactRelayContainer */ "../../node_modules/react-relay/lib/buildReactRelayContainer.js");
var getRootVariablesForFragments = __webpack_require__(/*! ./getRootVariablesForFragments */ "../../node_modules/react-relay/lib/getRootVariablesForFragments.js");
var _require = __webpack_require__(/*! ./ReactRelayContainerUtils */ "../../node_modules/react-relay/lib/ReactRelayContainerUtils.js"),
  getContainerName = _require.getContainerName;
var ReactRelayContext = __webpack_require__(/*! ./ReactRelayContext */ "../../node_modules/react-relay/lib/ReactRelayContext.js");
var ReactRelayQueryFetcher = __webpack_require__(/*! ./ReactRelayQueryFetcher */ "../../node_modules/react-relay/lib/ReactRelayQueryFetcher.js");
var _require2 = __webpack_require__(/*! ./RelayContext */ "../../node_modules/react-relay/lib/RelayContext.js"),
  assertRelayContext = _require2.assertRelayContext;
var areEqual = __webpack_require__(/*! fbjs/lib/areEqual */ "../../node_modules/fbjs/lib/areEqual.js");
var React = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
var _require3 = __webpack_require__(/*! relay-runtime */ "../../node_modules/relay-runtime/index.js"),
  Observable = _require3.Observable,
  createFragmentSpecResolver = _require3.createFragmentSpecResolver,
  createOperationDescriptor = _require3.createOperationDescriptor,
  getDataIDsFromObject = _require3.getDataIDsFromObject,
  getRequest = _require3.getRequest,
  getVariablesFromObject = _require3.getVariablesFromObject,
  isScalarAndEqual = _require3.isScalarAndEqual;
var warning = __webpack_require__(/*! fbjs/lib/warning */ "../../node_modules/fbjs/lib/warning.js");
function createContainerWithFragments(Component, fragments, taggedNode) {
  var _class;
  var containerName = getContainerName(Component);
  return _class = /*#__PURE__*/function (_React$Component) {
    (0, _inheritsLoose2["default"])(_class, _React$Component);
    function _class(props) {
      var _props$__rootIsQueryR, _this;
      _this = _React$Component.call(this, props) || this;
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_handleFragmentDataUpdate", function () {
        var resolverFromThisUpdate = _this.state.resolver;
        _this.setState(function (updatedState) {
          return resolverFromThisUpdate === updatedState.resolver ? {
            data: updatedState.resolver.resolve()
          } : null;
        });
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_refetch", function (refetchVariables, renderVariables, observerOrCallback, options) {
        if (_this._isUnmounted) {
           true ? warning(false, 'ReactRelayRefetchContainer: Unexpected call of `refetch` ' + 'on unmounted container `%s`. It looks like some instances ' + 'of your container still trying to refetch the data but they already ' + 'unmounted. Please make sure you clear all timers, intervals, async ' + 'calls, etc that may trigger `refetch`.', containerName) : 0;
          return {
            dispose: function dispose() {}
          };
        }
        var _assertRelayContext = assertRelayContext(_this.props.__relayContext),
          environment = _assertRelayContext.environment;
        var rootVariables = getRootVariablesForFragments(fragments, _this.props);
        var fetchVariables = typeof refetchVariables === 'function' ? refetchVariables(_this._getFragmentVariables()) : refetchVariables;
        fetchVariables = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, rootVariables), fetchVariables);
        var fragmentVariables = renderVariables ? (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, fetchVariables), renderVariables) : fetchVariables;
        var cacheConfig = options ? {
          force: !!options.force
        } : undefined;
        if (cacheConfig != null && (options === null || options === void 0 ? void 0 : options.metadata) != null) {
          cacheConfig.metadata = options === null || options === void 0 ? void 0 : options.metadata;
        }
        var observer = typeof observerOrCallback === 'function' ? {
          next: observerOrCallback,
          error: observerOrCallback
        } : observerOrCallback || {};
        var query = getRequest(taggedNode);
        var operation = createOperationDescriptor(query, fetchVariables, cacheConfig);
        _this.state.localVariables = fetchVariables;
        _this._refetchSubscription && _this._refetchSubscription.unsubscribe();
        var refetchSubscription;
        var storeSnapshot = _this._getQueryFetcher().lookupInStore(environment, operation, options === null || options === void 0 ? void 0 : options.fetchPolicy);
        if (storeSnapshot != null) {
          _this.state.resolver.setVariables(fragmentVariables, operation.request.node);
          _this.setState(function (latestState) {
            return {
              data: latestState.resolver.resolve(),
              contextForChildren: {
                environment: _this.props.__relayContext.environment
              }
            };
          }, function () {
            observer.next && observer.next();
            observer.complete && observer.complete();
          });
          return {
            dispose: function dispose() {}
          };
        }
        _this._getQueryFetcher().execute({
          environment: environment,
          operation: operation,
          preservePreviousReferences: true
        }).mergeMap(function (response) {
          _this.state.resolver.setVariables(fragmentVariables, operation.request.node);
          return Observable.create(function (sink) {
            return _this.setState(function (latestState) {
              return {
                data: latestState.resolver.resolve(),
                contextForChildren: {
                  environment: _this.props.__relayContext.environment
                }
              };
            }, function () {
              sink.next();
              sink.complete();
            });
          });
        })["finally"](function () {
          if (_this._refetchSubscription === refetchSubscription) {
            _this._refetchSubscription = null;
          }
        }).subscribe((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, observer), {}, {
          start: function start(subscription) {
            _this._refetchSubscription = refetchSubscription = subscription;
            observer.start && observer.start(subscription);
          }
        }));
        return {
          dispose: function dispose() {
            refetchSubscription && refetchSubscription.unsubscribe();
          }
        };
      });
      var relayContext = assertRelayContext(props.__relayContext);
      var rootIsQueryRenderer = (_props$__rootIsQueryR = props.__rootIsQueryRenderer) !== null && _props$__rootIsQueryR !== void 0 ? _props$__rootIsQueryR : false;
      _this._refetchSubscription = null;
      var resolver = createFragmentSpecResolver(relayContext, containerName, fragments, props, rootIsQueryRenderer);
      _this.state = {
        data: resolver.resolve(),
        localVariables: null,
        prevProps: props,
        prevPropsContext: relayContext,
        contextForChildren: relayContext,
        relayProp: getRelayProp(relayContext.environment, _this._refetch),
        resolver: resolver
      };
      _this._isUnmounted = false;
      return _this;
    }
    var _proto = _class.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this._isUnmounted = false;
      this._subscribeToNewResolverAndRerenderIfStoreHasChanged();
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
      if (this.state.resolver !== prevState.resolver) {
        prevState.resolver.dispose();
        this._queryFetcher && this._queryFetcher.dispose();
        this._refetchSubscription && this._refetchSubscription.unsubscribe();
        this._subscribeToNewResolverAndRerenderIfStoreHasChanged();
      } else {
        this._rerenderIfStoreHasChanged();
      }
    };
    _class.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
      var _nextProps$__rootIsQu;
      var prevProps = prevState.prevProps;
      var relayContext = assertRelayContext(nextProps.__relayContext);
      var rootIsQueryRenderer = (_nextProps$__rootIsQu = nextProps.__rootIsQueryRenderer) !== null && _nextProps$__rootIsQu !== void 0 ? _nextProps$__rootIsQu : false;
      var prevIDs = getDataIDsFromObject(fragments, prevProps);
      var nextIDs = getDataIDsFromObject(fragments, nextProps);
      var prevRootVariables = getRootVariablesForFragments(fragments, prevProps);
      var nextRootVariables = getRootVariablesForFragments(fragments, nextProps);
      var resolver = prevState.resolver;
      if (prevState.prevPropsContext.environment !== relayContext.environment || !areEqual(prevRootVariables, nextRootVariables) || !areEqual(prevIDs, nextIDs)) {
        resolver = createFragmentSpecResolver(relayContext, containerName, fragments, nextProps, rootIsQueryRenderer);
        return {
          data: resolver.resolve(),
          localVariables: null,
          prevProps: nextProps,
          prevPropsContext: relayContext,
          contextForChildren: relayContext,
          relayProp: getRelayProp(relayContext.environment, prevState.relayProp.refetch),
          resolver: resolver
        };
      } else if (!prevState.localVariables) {
        resolver.setProps(nextProps);
      }
      var data = resolver.resolve();
      if (data !== prevState.data) {
        return {
          data: data,
          prevProps: nextProps
        };
      }
      return null;
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this._isUnmounted = true;
      this.state.resolver.dispose();
      this._queryFetcher && this._queryFetcher.dispose();
      this._refetchSubscription && this._refetchSubscription.unsubscribe();
    };
    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
      if (nextState.data !== this.state.data || nextState.relayProp !== this.state.relayProp) {
        return true;
      }
      var keys = Object.keys(nextProps);
      for (var ii = 0; ii < keys.length; ii++) {
        var key = keys[ii];
        if (key === '__relayContext') {
          if (this.state.prevPropsContext.environment !== nextState.prevPropsContext.environment) {
            return true;
          }
        } else {
          if (!fragments.hasOwnProperty(key) && !isScalarAndEqual(nextProps[key], this.props[key])) {
            return true;
          }
        }
      }
      return false;
    };
    _proto._rerenderIfStoreHasChanged = function _rerenderIfStoreHasChanged() {
      var _this$state = this.state,
        data = _this$state.data,
        resolver = _this$state.resolver;
      var maybeNewData = resolver.resolve();
      if (data !== maybeNewData) {
        this.setState({
          data: maybeNewData
        });
      }
    };
    _proto._subscribeToNewResolverAndRerenderIfStoreHasChanged = function _subscribeToNewResolverAndRerenderIfStoreHasChanged() {
      var _this$state2 = this.state,
        data = _this$state2.data,
        resolver = _this$state2.resolver;
      var maybeNewData = resolver.resolve();
      resolver.setCallback(this.props, this._handleFragmentDataUpdate);
      if (data !== maybeNewData) {
        this.setState({
          data: maybeNewData
        });
      }
    };
    _proto._getFragmentVariables = function _getFragmentVariables() {
      return getVariablesFromObject(fragments, this.props);
    };
    _proto._getQueryFetcher = function _getQueryFetcher() {
      if (!this._queryFetcher) {
        this._queryFetcher = new ReactRelayQueryFetcher();
      }
      return this._queryFetcher;
    };
    _proto.render = function render() {
      var _this$props = this.props,
        componentRef = _this$props.componentRef,
        __relayContext = _this$props.__relayContext,
        __rootIsQueryRenderer = _this$props.__rootIsQueryRenderer,
        props = (0, _objectWithoutPropertiesLoose2["default"])(_this$props, _excluded);
      var _this$state3 = this.state,
        relayProp = _this$state3.relayProp,
        contextForChildren = _this$state3.contextForChildren;
      return /*#__PURE__*/React.createElement(ReactRelayContext.Provider, {
        value: contextForChildren
      }, /*#__PURE__*/React.createElement(Component, (0, _extends2["default"])({}, props, this.state.data, {
        ref: componentRef,
        relay: relayProp
      })));
    };
    return _class;
  }(React.Component), (0, _defineProperty2["default"])(_class, "displayName", containerName), _class;
}
function getRelayProp(environment, refetch) {
  return {
    environment: environment,
    refetch: refetch
  };
}
function createContainer(Component, fragmentSpec, taggedNode) {
  return buildReactRelayContainer(Component, fragmentSpec, function (ComponentClass, fragments) {
    return createContainerWithFragments(ComponentClass, fragments, taggedNode);
  });
}
module.exports = {
  createContainer: createContainer
};

/***/ }),

/***/ "../../node_modules/react-relay/lib/RelayContext.js":
/*!**********************************************************!*\
  !*** ../../node_modules/react-relay/lib/RelayContext.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isRelayEnvironment = __webpack_require__(/*! ./isRelayEnvironment */ "../../node_modules/react-relay/lib/isRelayEnvironment.js");
var invariant = __webpack_require__(/*! invariant */ "../../node_modules/invariant/browser.js");
function assertRelayContext(relay) {
  !isRelayContext(relay) ?  true ? invariant(false, 'RelayContext: Expected `context.relay` to be an object conforming to ' + 'the `RelayContext` interface, got `%s`.', relay) : 0 : void 0;
  return relay;
}
function isRelayContext(context) {
  return typeof context === 'object' && context !== null && !Array.isArray(context) && isRelayEnvironment(context.environment);
}
module.exports = {
  assertRelayContext: assertRelayContext,
  isRelayContext: isRelayContext
};

/***/ }),

/***/ "../../node_modules/react-relay/lib/assertFragmentMap.js":
/*!***************************************************************!*\
  !*** ../../node_modules/react-relay/lib/assertFragmentMap.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var invariant = __webpack_require__(/*! invariant */ "../../node_modules/invariant/browser.js");
function assertFragmentMap(componentName, fragmentSpec) {
  !(fragmentSpec && typeof fragmentSpec === 'object') ?  true ? invariant(false, 'Could not create Relay Container for `%s`. ' + 'Expected a set of GraphQL fragments, got `%s` instead.', componentName, fragmentSpec) : 0 : void 0;
  for (var key in fragmentSpec) {
    if (fragmentSpec.hasOwnProperty(key)) {
      var fragment = fragmentSpec[key];
      !(fragment && (typeof fragment === 'object' || typeof fragment === 'function')) ?  true ? invariant(false, 'Could not create Relay Container for `%s`. ' + 'The value of fragment `%s` was expected to be a fragment, got `%s` instead.', componentName, key, fragment) : 0 : void 0;
    }
  }
}
module.exports = assertFragmentMap;

/***/ }),

/***/ "../../node_modules/react-relay/lib/buildReactRelayContainer.js":
/*!**********************************************************************!*\
  !*** ../../node_modules/react-relay/lib/buildReactRelayContainer.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);
var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "../../node_modules/@babel/runtime/helpers/extends.js"));
var assertFragmentMap = __webpack_require__(/*! ./assertFragmentMap */ "../../node_modules/react-relay/lib/assertFragmentMap.js");
var _require = __webpack_require__(/*! ./ReactRelayContainerUtils */ "../../node_modules/react-relay/lib/ReactRelayContainerUtils.js"),
  getComponentName = _require.getComponentName,
  getContainerName = _require.getContainerName;
var ReactRelayContext = __webpack_require__(/*! ./ReactRelayContext */ "../../node_modules/react-relay/lib/ReactRelayContext.js");
var ReactRelayQueryRendererContext = __webpack_require__(/*! ./ReactRelayQueryRendererContext */ "../../node_modules/react-relay/lib/ReactRelayQueryRendererContext.js");
var invariant = __webpack_require__(/*! invariant */ "../../node_modules/invariant/browser.js");
var React = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
var _require2 = __webpack_require__(/*! relay-runtime */ "../../node_modules/relay-runtime/index.js"),
  getFragment = _require2.getFragment;
var useContext = React.useContext;
function buildReactRelayContainer(ComponentClass, fragmentSpec, createContainerWithFragments) {
  var containerName = getContainerName(ComponentClass);
  assertFragmentMap(getComponentName(ComponentClass), fragmentSpec);
  var fragments = {};
  for (var key in fragmentSpec) {
    fragments[key] = getFragment(fragmentSpec[key]);
  }
  var Container = createContainerWithFragments(ComponentClass, fragments);
  Container.displayName = containerName;
  function forwardRef(props, ref) {
    var _queryRendererContext;
    var context = useContext(ReactRelayContext);
    !(context != null) ?  true ? invariant(false, '`%s` tried to render a context that was not valid this means that ' + '`%s` was rendered outside of a query renderer.', containerName, containerName) : 0 : void 0;
    var queryRendererContext = useContext(ReactRelayQueryRendererContext);
    return /*#__PURE__*/React.createElement(Container, (0, _extends2["default"])({}, props, {
      __relayContext: context,
      __rootIsQueryRenderer: (_queryRendererContext = queryRendererContext === null || queryRendererContext === void 0 ? void 0 : queryRendererContext.rootIsQueryRenderer) !== null && _queryRendererContext !== void 0 ? _queryRendererContext : false,
      componentRef: props.componentRef || ref
    }));
  }
  forwardRef.displayName = containerName;
  var ForwardContainer = React.forwardRef(forwardRef);
  if (true) {
    ForwardContainer.__ComponentClass = ComponentClass;
    ForwardContainer.displayName = containerName;
  }
  return ForwardContainer;
}
module.exports = buildReactRelayContainer;

/***/ }),

/***/ "../../node_modules/react-relay/lib/getRootVariablesForFragments.js":
/*!**************************************************************************!*\
  !*** ../../node_modules/react-relay/lib/getRootVariablesForFragments.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);
var _objectSpread2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ "../../node_modules/@babel/runtime/helpers/objectSpread2.js"));
var _require = __webpack_require__(/*! relay-runtime */ "../../node_modules/relay-runtime/index.js"),
  getSelector = _require.getSelector;
function getRootVariablesForFragments(fragments, props) {
  var rootVariables = {};
  Object.keys(fragments).forEach(function (key) {
    var _selector$selectors$, _selector$selectors$2, _selector$owner$varia;
    var fragmentNode = fragments[key];
    var fragmentRef = props[key];
    var selector = getSelector(fragmentNode, fragmentRef);
    var fragmentOwnerVariables = selector != null && selector.kind === 'PluralReaderSelector' ? (_selector$selectors$ = (_selector$selectors$2 = selector.selectors[0]) === null || _selector$selectors$2 === void 0 ? void 0 : _selector$selectors$2.owner.variables) !== null && _selector$selectors$ !== void 0 ? _selector$selectors$ : {} : (_selector$owner$varia = selector === null || selector === void 0 ? void 0 : selector.owner.variables) !== null && _selector$owner$varia !== void 0 ? _selector$owner$varia : {};
    rootVariables = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, rootVariables), fragmentOwnerVariables);
  });
  return rootVariables;
}
module.exports = getRootVariablesForFragments;

/***/ }),

/***/ "../../node_modules/react-relay/lib/index.js":
/*!***************************************************!*\
  !*** ../../node_modules/react-relay/lib/index.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var ReactRelayContext = __webpack_require__(/*! ./ReactRelayContext */ "../../node_modules/react-relay/lib/ReactRelayContext.js");
var ReactRelayFragmentContainer = __webpack_require__(/*! ./ReactRelayFragmentContainer */ "../../node_modules/react-relay/lib/ReactRelayFragmentContainer.js");
var ReactRelayLocalQueryRenderer = __webpack_require__(/*! ./ReactRelayLocalQueryRenderer */ "../../node_modules/react-relay/lib/ReactRelayLocalQueryRenderer.js");
var ReactRelayPaginationContainer = __webpack_require__(/*! ./ReactRelayPaginationContainer */ "../../node_modules/react-relay/lib/ReactRelayPaginationContainer.js");
var ReactRelayQueryRenderer = __webpack_require__(/*! ./ReactRelayQueryRenderer */ "../../node_modules/react-relay/lib/ReactRelayQueryRenderer.js");
var ReactRelayRefetchContainer = __webpack_require__(/*! ./ReactRelayRefetchContainer */ "../../node_modules/react-relay/lib/ReactRelayRefetchContainer.js");
var EntryPointContainer = __webpack_require__(/*! ./relay-hooks/EntryPointContainer.react */ "../../node_modules/react-relay/lib/relay-hooks/EntryPointContainer.react.js");
var loadEntryPoint = __webpack_require__(/*! ./relay-hooks/loadEntryPoint */ "../../node_modules/react-relay/lib/relay-hooks/loadEntryPoint.js");
var _require = __webpack_require__(/*! ./relay-hooks/loadQuery */ "../../node_modules/react-relay/lib/relay-hooks/loadQuery.js"),
  loadQuery = _require.loadQuery;
var ProfilerContext = __webpack_require__(/*! ./relay-hooks/ProfilerContext */ "../../node_modules/react-relay/lib/relay-hooks/ProfilerContext.js");
var RelayEnvironmentProvider = __webpack_require__(/*! ./relay-hooks/RelayEnvironmentProvider */ "../../node_modules/react-relay/lib/relay-hooks/RelayEnvironmentProvider.js");
var useClientQuery = __webpack_require__(/*! ./relay-hooks/useClientQuery */ "../../node_modules/react-relay/lib/relay-hooks/useClientQuery.js");
var useEntryPointLoader = __webpack_require__(/*! ./relay-hooks/useEntryPointLoader */ "../../node_modules/react-relay/lib/relay-hooks/useEntryPointLoader.js");
var useFragment = __webpack_require__(/*! ./relay-hooks/useFragment */ "../../node_modules/react-relay/lib/relay-hooks/useFragment.js");
var useLazyLoadQuery = __webpack_require__(/*! ./relay-hooks/useLazyLoadQuery */ "../../node_modules/react-relay/lib/relay-hooks/useLazyLoadQuery.js");
var useMutation = __webpack_require__(/*! ./relay-hooks/useMutation */ "../../node_modules/react-relay/lib/relay-hooks/useMutation.js");
var usePaginationFragment = __webpack_require__(/*! ./relay-hooks/usePaginationFragment */ "../../node_modules/react-relay/lib/relay-hooks/usePaginationFragment.js");
var usePreloadedQuery = __webpack_require__(/*! ./relay-hooks/usePreloadedQuery */ "../../node_modules/react-relay/lib/relay-hooks/usePreloadedQuery.js");
var useQueryLoader = __webpack_require__(/*! ./relay-hooks/useQueryLoader */ "../../node_modules/react-relay/lib/relay-hooks/useQueryLoader.js");
var useRefetchableFragment = __webpack_require__(/*! ./relay-hooks/useRefetchableFragment */ "../../node_modules/react-relay/lib/relay-hooks/useRefetchableFragment.js");
var useRelayEnvironment = __webpack_require__(/*! ./relay-hooks/useRelayEnvironment */ "../../node_modules/react-relay/lib/relay-hooks/useRelayEnvironment.js");
var useSubscribeToInvalidationState = __webpack_require__(/*! ./relay-hooks/useSubscribeToInvalidationState */ "../../node_modules/react-relay/lib/relay-hooks/useSubscribeToInvalidationState.js");
var useSubscription = __webpack_require__(/*! ./relay-hooks/useSubscription */ "../../node_modules/react-relay/lib/relay-hooks/useSubscription.js");
var RelayRuntime = __webpack_require__(/*! relay-runtime */ "../../node_modules/relay-runtime/index.js");
module.exports = {
  ConnectionHandler: RelayRuntime.ConnectionHandler,
  QueryRenderer: ReactRelayQueryRenderer,
  LocalQueryRenderer: ReactRelayLocalQueryRenderer,
  MutationTypes: RelayRuntime.MutationTypes,
  RangeOperations: RelayRuntime.RangeOperations,
  ReactRelayContext: ReactRelayContext,
  applyOptimisticMutation: RelayRuntime.applyOptimisticMutation,
  commitLocalUpdate: RelayRuntime.commitLocalUpdate,
  commitMutation: RelayRuntime.commitMutation,
  createFragmentContainer: ReactRelayFragmentContainer.createContainer,
  createPaginationContainer: ReactRelayPaginationContainer.createContainer,
  createRefetchContainer: ReactRelayRefetchContainer.createContainer,
  fetchQuery_DEPRECATED: RelayRuntime.fetchQuery_DEPRECATED,
  graphql: RelayRuntime.graphql,
  readInlineData: RelayRuntime.readInlineData,
  requestSubscription: RelayRuntime.requestSubscription,
  EntryPointContainer: EntryPointContainer,
  RelayEnvironmentProvider: RelayEnvironmentProvider,
  ProfilerContext: ProfilerContext,
  fetchQuery: RelayRuntime.fetchQuery,
  loadQuery: loadQuery,
  loadEntryPoint: loadEntryPoint,
  useClientQuery: useClientQuery,
  useFragment: useFragment,
  useLazyLoadQuery: useLazyLoadQuery,
  useEntryPointLoader: useEntryPointLoader,
  useQueryLoader: useQueryLoader,
  useMutation: useMutation,
  usePaginationFragment: usePaginationFragment,
  usePreloadedQuery: usePreloadedQuery,
  useRefetchableFragment: useRefetchableFragment,
  useRelayEnvironment: useRelayEnvironment,
  useSubscribeToInvalidationState: useSubscribeToInvalidationState,
  useSubscription: useSubscription
};

/***/ }),

/***/ "../../node_modules/react-relay/lib/isRelayEnvironment.js":
/*!****************************************************************!*\
  !*** ../../node_modules/react-relay/lib/isRelayEnvironment.js ***!
  \****************************************************************/
/***/ ((module) => {

"use strict";


function isRelayEnvironment(environment) {
  return typeof environment === 'object' && environment !== null && typeof environment.check === 'function' && typeof environment.lookup === 'function' && typeof environment.retain === 'function' && typeof environment.execute === 'function' && typeof environment.subscribe === 'function';
}
module.exports = isRelayEnvironment;

/***/ }),

/***/ "../../node_modules/react-relay/lib/relay-hooks/useClientQuery.js":
/*!************************************************************************!*\
  !*** ../../node_modules/react-relay/lib/relay-hooks/useClientQuery.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);
var _objectSpread2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ "../../node_modules/@babel/runtime/helpers/objectSpread2.js"));
var useLazyLoadQuery = __webpack_require__(/*! ./useLazyLoadQuery */ "../../node_modules/react-relay/lib/relay-hooks/useLazyLoadQuery.js");
function useClientQuery(gqlQuery, variables, options) {
  var query = gqlQuery;
  return useLazyLoadQuery(query, variables, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, options), {}, {
    fetchPolicy: 'store-only'
  }));
}
module.exports = useClientQuery;

/***/ }),

/***/ "../../node_modules/@babel/runtime/helpers/assertThisInitialized.js":
/*!**************************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/assertThisInitialized.js ***!
  \**************************************************************************/
/***/ ((module) => {

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
module.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "../../node_modules/@babel/runtime/helpers/extends.js":
/*!************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/extends.js ***!
  \************************************************************/
/***/ ((module) => {

function _extends() {
  module.exports = _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  return _extends.apply(this, arguments);
}
module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "../../node_modules/@babel/runtime/helpers/inheritsLoose.js":
/*!******************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/inheritsLoose.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var setPrototypeOf = __webpack_require__(/*! ./setPrototypeOf.js */ "../../node_modules/@babel/runtime/helpers/setPrototypeOf.js");
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  setPrototypeOf(subClass, superClass);
}
module.exports = _inheritsLoose, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "../../node_modules/@babel/runtime/helpers/setPrototypeOf.js":
/*!*******************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/setPrototypeOf.js ***!
  \*******************************************************************/
/***/ ((module) => {

function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  return _setPrototypeOf(o, p);
}
module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ })

}]);
//# sourceMappingURL=vendors-node_modules_react-relay_index_js.js.map?c593a