{"version":3,"file":"RelayModernRecord.js.js?5c503","mappings":"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","sources":["webpack://@aztlan/template-react/../../node_modules/relay-runtime/lib/store/RelayModernRecord.js"],"sourcesContent":["'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\")[\"default\"];\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\nvar _toPropertyKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toPropertyKey\"));\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\nvar deepFreeze = require('../util/deepFreeze');\nvar _require = require('./ClientID'),\n  generateClientObjectClientID = _require.generateClientObjectClientID,\n  isClientID = _require.isClientID;\nvar _require2 = require('./experimental-live-resolvers/LiveResolverSuspenseSentinel'),\n  isSuspenseSentinel = _require2.isSuspenseSentinel;\nvar _require3 = require('./RelayStoreUtils'),\n  ACTOR_IDENTIFIER_KEY = _require3.ACTOR_IDENTIFIER_KEY,\n  ERRORS_KEY = _require3.ERRORS_KEY,\n  ID_KEY = _require3.ID_KEY,\n  INVALIDATED_AT_KEY = _require3.INVALIDATED_AT_KEY,\n  REF_KEY = _require3.REF_KEY,\n  REFS_KEY = _require3.REFS_KEY,\n  RELAY_RESOLVER_VALUE_KEY = _require3.RELAY_RESOLVER_VALUE_KEY,\n  ROOT_ID = _require3.ROOT_ID,\n  TYPENAME_KEY = _require3.TYPENAME_KEY;\nvar areEqual = require(\"fbjs/lib/areEqual\");\nvar invariant = require('invariant');\nvar warning = require(\"fbjs/lib/warning\");\nfunction clone(record) {\n  return (0, _objectSpread2[\"default\"])({}, record);\n}\nfunction copyFields(source, sink) {\n  for (var key in source) {\n    if (source.hasOwnProperty(key)) {\n      if (key !== ID_KEY && key !== TYPENAME_KEY) {\n        sink[key] = source[key];\n      }\n    }\n  }\n}\nfunction create(dataID, typeName) {\n  var record = {};\n  record[ID_KEY] = dataID;\n  record[TYPENAME_KEY] = typeName;\n  return record;\n}\nfunction fromObject(json) {\n  return json;\n}\nfunction getDataID(record) {\n  return record[ID_KEY];\n}\nfunction getFields(record) {\n  if (ERRORS_KEY in record) {\n    return Object.keys(record).filter(function (field) {\n      return field !== ERRORS_KEY;\n    });\n  }\n  return Object.keys(record);\n}\nfunction getType(record) {\n  return record[TYPENAME_KEY];\n}\nfunction getErrors(record, storageKey) {\n  var _record$ERRORS_KEY;\n  return (_record$ERRORS_KEY = record[ERRORS_KEY]) === null || _record$ERRORS_KEY === void 0 ? void 0 : _record$ERRORS_KEY[storageKey];\n}\nfunction getValue(record, storageKey) {\n  var value = record[storageKey];\n  if (value && typeof value === 'object') {\n    !(!value.hasOwnProperty(REF_KEY) && !value.hasOwnProperty(REFS_KEY)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernRecord.getValue(): Expected a scalar (non-link) value for `%s.%s` ' + 'but found %s.', record[ID_KEY], storageKey, value.hasOwnProperty(REF_KEY) ? 'a linked record' : 'plural linked records') : invariant(false) : void 0;\n  }\n  return value;\n}\nfunction hasValue(record, storageKey) {\n  return storageKey in record;\n}\nfunction getLinkedRecordID(record, storageKey) {\n  var maybeLink = record[storageKey];\n  if (maybeLink == null) {\n    return maybeLink;\n  }\n  var link = maybeLink;\n  !(typeof link === 'object' && link && typeof link[REF_KEY] === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernRecord.getLinkedRecordID(): Expected `%s.%s` to be a linked ID, ' + 'was `%s`.%s', record[ID_KEY], storageKey, JSON.stringify(link), typeof link === 'object' && link[REFS_KEY] !== undefined ? ' It appears to be a plural linked record: did you mean to call ' + 'getLinkedRecords() instead of getLinkedRecord()?' : '') : invariant(false) : void 0;\n  return link[REF_KEY];\n}\nfunction hasLinkedRecordID(record, storageKey) {\n  var maybeLink = record[storageKey];\n  if (maybeLink == null) {\n    return false;\n  }\n  var link = maybeLink;\n  return typeof link === 'object' && link && typeof link[REF_KEY] === 'string';\n}\nfunction getLinkedRecordIDs(record, storageKey) {\n  var links = record[storageKey];\n  if (links == null) {\n    return links;\n  }\n  !(typeof links === 'object' && Array.isArray(links[REFS_KEY])) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernRecord.getLinkedRecordIDs(): Expected `%s.%s` to contain an array ' + 'of linked IDs, got `%s`.%s', record[ID_KEY], storageKey, JSON.stringify(links), typeof links === 'object' && links[REF_KEY] !== undefined ? ' It appears to be a singular linked record: did you mean to call ' + 'getLinkedRecord() instead of getLinkedRecords()?' : '') : invariant(false) : void 0;\n  return links[REFS_KEY];\n}\nfunction hasLinkedRecordIDs(record, storageKey) {\n  var links = record[storageKey];\n  if (links == null) {\n    return false;\n  }\n  return typeof links === 'object' && Array.isArray(links[REFS_KEY]) && links[REFS_KEY].every(function (link) {\n    return typeof link === 'string';\n  });\n}\nfunction getInvalidationEpoch(record) {\n  if (record == null) {\n    return null;\n  }\n  var invalidatedAt = record[INVALIDATED_AT_KEY];\n  if (typeof invalidatedAt !== 'number') {\n    return null;\n  }\n  return invalidatedAt;\n}\nfunction update(prevRecord, nextRecord) {\n  var _updated2;\n  if (process.env.NODE_ENV !== \"production\") {\n    var _getType, _getType2;\n    var prevID = getDataID(prevRecord);\n    var nextID = getDataID(nextRecord);\n    process.env.NODE_ENV !== \"production\" ? warning(prevID === nextID, 'RelayModernRecord: Invalid record update, expected both versions of ' + 'the record to have the same id, got `%s` and `%s`.', prevID, nextID) : void 0;\n    var prevType = (_getType = getType(prevRecord)) !== null && _getType !== void 0 ? _getType : null;\n    var nextType = (_getType2 = getType(nextRecord)) !== null && _getType2 !== void 0 ? _getType2 : null;\n    process.env.NODE_ENV !== \"production\" ? warning(isClientID(nextID) && nextID !== ROOT_ID || prevType === nextType, 'RelayModernRecord: Invalid record update, expected both versions of ' + 'record `%s` to have the same `%s` but got conflicting types `%s` ' + 'and `%s`. The GraphQL server likely violated the globally unique ' + 'id requirement by returning the same id for different objects.', prevID, TYPENAME_KEY, prevType, nextType) : void 0;\n  }\n  var prevErrorsByKey = prevRecord[ERRORS_KEY];\n  var nextErrorsByKey = nextRecord[ERRORS_KEY];\n  var updated = null;\n  if (prevErrorsByKey == null && nextErrorsByKey == null) {\n    var _updated;\n    for (var storageKey in nextRecord) {\n      if (updated || !areEqual(prevRecord[storageKey], nextRecord[storageKey])) {\n        updated = updated !== null ? updated : (0, _objectSpread2[\"default\"])({}, prevRecord);\n        updated[storageKey] = nextRecord[storageKey];\n      }\n    }\n    return (_updated = updated) !== null && _updated !== void 0 ? _updated : prevRecord;\n  }\n  for (var _storageKey2 in nextRecord) {\n    if (_storageKey2 === ERRORS_KEY) {\n      continue;\n    }\n    var nextValue = nextRecord[_storageKey2];\n    var nextErrors = nextErrorsByKey === null || nextErrorsByKey === void 0 ? void 0 : nextErrorsByKey[_storageKey2];\n    if (updated == null) {\n      var prevValue = prevRecord[_storageKey2];\n      var prevErrors = prevErrorsByKey === null || prevErrorsByKey === void 0 ? void 0 : prevErrorsByKey[_storageKey2];\n      if (areEqual(prevValue, nextValue) && areEqual(prevErrors, nextErrors)) {\n        continue;\n      }\n      updated = (0, _objectSpread2[\"default\"])({}, prevRecord);\n      if (prevErrorsByKey != null) {\n        updated[ERRORS_KEY] = (0, _objectSpread2[\"default\"])({}, prevErrorsByKey);\n      }\n    }\n    setValue(updated, _storageKey2, nextValue);\n    setErrors(updated, _storageKey2, nextErrors);\n  }\n  return (_updated2 = updated) !== null && _updated2 !== void 0 ? _updated2 : prevRecord;\n}\nfunction merge(record1, record2) {\n  if (process.env.NODE_ENV !== \"production\") {\n    var _getType3, _getType4;\n    var prevID = getDataID(record1);\n    var nextID = getDataID(record2);\n    process.env.NODE_ENV !== \"production\" ? warning(prevID === nextID, 'RelayModernRecord: Invalid record merge, expected both versions of ' + 'the record to have the same id, got `%s` and `%s`.', prevID, nextID) : void 0;\n    var prevType = (_getType3 = getType(record1)) !== null && _getType3 !== void 0 ? _getType3 : null;\n    var nextType = (_getType4 = getType(record2)) !== null && _getType4 !== void 0 ? _getType4 : null;\n    process.env.NODE_ENV !== \"production\" ? warning(isClientID(nextID) && nextID !== ROOT_ID || prevType === nextType, 'RelayModernRecord: Invalid record merge, expected both versions of ' + 'record `%s` to have the same `%s` but got conflicting types `%s` ' + 'and `%s`. The GraphQL server likely violated the globally unique ' + 'id requirement by returning the same id for different objects.', prevID, TYPENAME_KEY, prevType, nextType) : void 0;\n  }\n  if (ERRORS_KEY in record1 || ERRORS_KEY in record2) {\n    var errors1 = record1[ERRORS_KEY],\n      fields1 = (0, _objectWithoutPropertiesLoose2[\"default\"])(record1, [ERRORS_KEY].map(_toPropertyKey2[\"default\"]));\n    var errors2 = record2[ERRORS_KEY],\n      fields2 = (0, _objectWithoutPropertiesLoose2[\"default\"])(record2, [ERRORS_KEY].map(_toPropertyKey2[\"default\"]));\n    var updated = (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, fields1), fields2);\n    if (errors1 == null && errors2 == null) {\n      return updated;\n    }\n    var updatedErrors = {};\n    for (var storageKey in errors1) {\n      if (fields2.hasOwnProperty(storageKey)) {\n        continue;\n      }\n      updatedErrors[storageKey] = errors1[storageKey];\n    }\n    for (var _storageKey3 in errors2) {\n      updatedErrors[_storageKey3] = errors2[_storageKey3];\n    }\n    for (var _storageKey in updatedErrors) {\n      updated[ERRORS_KEY] = updatedErrors;\n      break;\n    }\n    return updated;\n  } else {\n    return (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, record1), record2);\n  }\n}\nfunction freeze(record) {\n  deepFreeze(record);\n}\nfunction setErrors(record, storageKey, errors) {\n  if (process.env.NODE_ENV !== \"production\") {\n    process.env.NODE_ENV !== \"production\" ? warning(storageKey in record, 'RelayModernRecord: Invalid error update, `%s` should not be undefined.', storageKey) : void 0;\n  }\n  var errorsByStorageKey = record[ERRORS_KEY];\n  if (errors != null && errors.length > 0) {\n    if (errorsByStorageKey == null) {\n      record[ERRORS_KEY] = (0, _defineProperty2[\"default\"])({}, storageKey, errors);\n    } else {\n      errorsByStorageKey[storageKey] = errors;\n    }\n  } else if (errorsByStorageKey != null) {\n    if (delete errorsByStorageKey[storageKey]) {\n      for (var otherStorageKey in errorsByStorageKey) {\n        if (errorsByStorageKey.hasOwnProperty(otherStorageKey)) {\n          return;\n        }\n      }\n      delete record[ERRORS_KEY];\n    }\n  }\n}\nfunction setValue(record, storageKey, value) {\n  if (process.env.NODE_ENV !== \"production\") {\n    var prevID = getDataID(record);\n    if (storageKey === ID_KEY) {\n      process.env.NODE_ENV !== \"production\" ? warning(prevID === value, 'RelayModernRecord: Invalid field update, expected both versions of ' + 'the record to have the same id, got `%s` and `%s`.', prevID, value) : void 0;\n    } else if (storageKey === TYPENAME_KEY) {\n      var _getType5;\n      var prevType = (_getType5 = getType(record)) !== null && _getType5 !== void 0 ? _getType5 : null;\n      var nextType = value !== null && value !== void 0 ? value : null;\n      process.env.NODE_ENV !== \"production\" ? warning(isClientID(getDataID(record)) && getDataID(record) !== ROOT_ID || prevType === nextType, 'RelayModernRecord: Invalid field update, expected both versions of ' + 'record `%s` to have the same `%s` but got conflicting types `%s` ' + 'and `%s`. The GraphQL server likely violated the globally unique ' + 'id requirement by returning the same id for different objects.', prevID, TYPENAME_KEY, prevType, nextType) : void 0;\n    }\n  }\n  record[storageKey] = value;\n}\nfunction setLinkedRecordID(record, storageKey, linkedID) {\n  var link = {};\n  link[REF_KEY] = linkedID;\n  record[storageKey] = link;\n}\nfunction setLinkedRecordIDs(record, storageKey, linkedIDs) {\n  var links = {};\n  links[REFS_KEY] = linkedIDs;\n  record[storageKey] = links;\n}\nfunction setActorLinkedRecordID(record, storageKey, actorIdentifier, linkedID) {\n  var link = {};\n  link[REF_KEY] = linkedID;\n  link[ACTOR_IDENTIFIER_KEY] = actorIdentifier;\n  record[storageKey] = link;\n}\nfunction getActorLinkedRecordID(record, storageKey) {\n  var link = record[storageKey];\n  if (link == null) {\n    return link;\n  }\n  !(typeof link === 'object' && typeof link[REF_KEY] === 'string' && link[ACTOR_IDENTIFIER_KEY] != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernRecord.getActorLinkedRecordID(): Expected `%s.%s` to be an actor specific linked ID, ' + 'was `%s`.', record[ID_KEY], storageKey, JSON.stringify(link)) : invariant(false) : void 0;\n  return [link[ACTOR_IDENTIFIER_KEY], link[REF_KEY]];\n}\nfunction getResolverLinkedRecordID(record, typeName) {\n  var id = getValue(record, RELAY_RESOLVER_VALUE_KEY);\n  if (id == null || isSuspenseSentinel(id)) {\n    return null;\n  }\n  if (typeof id === 'object') {\n    id = id.id;\n  }\n  !(typeof id === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernRecord.getResolverLinkedRecordID(): Expected value to be a linked ID, ' + 'was `%s`.', JSON.stringify(id)) : invariant(false) : void 0;\n  return generateClientObjectClientID(typeName, id);\n}\nfunction getResolverLinkedRecordIDs(record, typeName) {\n  var resolverValue = getValue(record, RELAY_RESOLVER_VALUE_KEY);\n  if (resolverValue == null || isSuspenseSentinel(resolverValue)) {\n    return null;\n  }\n  !Array.isArray(resolverValue) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernRecord.getResolverLinkedRecordIDs(): Expected value to be an array of linked IDs, ' + 'was `%s`.', JSON.stringify(resolverValue)) : invariant(false) : void 0;\n  return resolverValue.map(function (id) {\n    if (id == null) {\n      return null;\n    }\n    if (typeof id === 'object') {\n      id = id.id;\n    }\n    !(typeof id === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernRecord.getResolverLinkedRecordIDs(): Expected item within resolver linked field to be a DataID, ' + 'was `%s`.', JSON.stringify(id)) : invariant(false) : void 0;\n    return generateClientObjectClientID(typeName, id);\n  });\n}\nfunction toJSON(record) {\n  return record;\n}\nmodule.exports = {\n  clone: clone,\n  copyFields: copyFields,\n  create: create,\n  freeze: freeze,\n  fromObject: fromObject,\n  getDataID: getDataID,\n  getErrors: getErrors,\n  getFields: getFields,\n  getInvalidationEpoch: getInvalidationEpoch,\n  getLinkedRecordID: getLinkedRecordID,\n  getLinkedRecordIDs: getLinkedRecordIDs,\n  getType: getType,\n  getValue: getValue,\n  hasValue: hasValue,\n  hasLinkedRecordID: hasLinkedRecordID,\n  hasLinkedRecordIDs: hasLinkedRecordIDs,\n  merge: merge,\n  setErrors: setErrors,\n  setValue: setValue,\n  setLinkedRecordID: setLinkedRecordID,\n  setLinkedRecordIDs: setLinkedRecordIDs,\n  update: update,\n  getActorLinkedRecordID: getActorLinkedRecordID,\n  setActorLinkedRecordID: setActorLinkedRecordID,\n  getResolverLinkedRecordID: getResolverLinkedRecordID,\n  getResolverLinkedRecordIDs: getResolverLinkedRecordIDs,\n  toJSON: toJSON\n};"],"names":["_interopRequireDefault","require","_defineProperty2","_objectWithoutPropertiesLoose2","_toPropertyKey2","_objectSpread2","deepFreeze","_require","generateClientObjectClientID","isSuspenseSentinel","isClientID","_require3","ACTOR_IDENTIFIER_KEY","ERRORS_KEY","ID_KEY","INVALIDATED_AT_KEY","REF_KEY","REFS_KEY","RELAY_RESOLVER_VALUE_KEY","TYPENAME_KEY","ROOT_ID","areEqual","invariant","getValue","record","storageKey","value","hasOwnProperty","setErrors","errors","errorsByStorageKey","length","otherStorageKey","setValue","module","exports","clone","copyFields","source","sink","key","create","dataID","typeName","freeze","fromObject","json","getDataID","getErrors","_record$ERRORS_KEY","getFields","Object","keys","filter","field","getInvalidationEpoch","invalidatedAt","getLinkedRecordID","maybeLink","link","getLinkedRecordIDs","links","Array","isArray","getType","hasValue","hasLinkedRecordID","hasLinkedRecordIDs","every","merge","record1","record2","errors1","fields1","map","errors2","fields2","updated","updatedErrors","_storageKey3","_storageKey","setLinkedRecordID","linkedID","setLinkedRecordIDs","linkedIDs","update","prevRecord","nextRecord","_updated2","prevErrorsByKey","nextErrorsByKey","_updated","_storageKey2","nextValue","nextErrors","prevValue","prevErrors","getActorLinkedRecordID","setActorLinkedRecordID","actorIdentifier","getResolverLinkedRecordID","id","getResolverLinkedRecordIDs","resolverValue","toJSON"],"sourceRoot":""}