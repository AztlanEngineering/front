{"version":3,"file":"common.js?d7080","mappings":"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","sources":["webpack://@aztlan/template-react/./src/modules/base.authentication/ui/LoginButton/LoginButton.tsx","webpack://@aztlan/template-react/./src/modules/base.authentication/pages/Login.tsx","webpack://@aztlan/template-react/./src/modules/base.authentication/ui/LoginButton/__generated__/LoginButtonFragment.graphql.ts","webpack://@aztlan/template-react/./src/modules/base.authentication/ui/LoginButton/__generated__/LoginButtonQuery.graphql.ts","webpack://@aztlan/template-react/./src/modules/common/pages/Maintenance.tsx"],"sourcesContent":["/* @aztlan/generator-front 0.2.0 */\nimport * as React from 'react'\n\nimport { useInsertionEffect } from 'react'\n\nimport PropTypes from 'prop-types'\n\n// @ts-ignore\nimport styleNames from '@aztlan/bem/exports.scss'\n\nimport { useFragment } from 'react-relay'\n\n// Local Definitions\nconst baseClassName = styleNames.base\nconst componentClassName = 'login-button'\n\nconst FRAGMENT = graphql`\n  fragment LoginButtonFragment on Query\n    @argumentDefinitions(resource: { type: \"String!\" }) {\n    oAuth2Links(resource: $resource) {\n      google\n    }\n  }\n`\n\nconst QUERY = graphql`\n  query LoginButtonQuery($resource: String!) {\n    ...LoginButtonFragment @arguments(resource: $resource)\n  }\n`\n\n/**\n * This is the LoginButton component description.\n */\nfunction LoginButton({\n  id,\n  className: userClassName,\n  style,\n  data,\n  ...otherProps\n}) {\n  useInsertionEffect(() => {\n    // @ts-ignore\n    import('./styles.scss')\n  }, [])\n\n  const { oAuth2Links } = useFragment(FRAGMENT, data)\n  const { google } = oAuth2Links\n\n  return (\n    <button\n      id={id}\n      className={[baseClassName, componentClassName, userClassName]\n        .filter((e) => e)\n        .join(' ')}\n      style={style}\n      // {...otherProps}\n    >\n      <a href={google}>Login with Google</a>\n    </button>\n  )\n}\n\nLoginButton.propTypes = {\n  /**\n   * The HTML id for this element\n   */\n  id: PropTypes.string,\n\n  /**\n   * The HTML class names for this element\n   */\n  className: PropTypes.string,\n\n  /**\n   * The React-written, css properties for this element.\n   */\n  style: PropTypes.objectOf(PropTypes.string),\n\n  /**\n   *  The children JSX\n   */\n  children: PropTypes.node,\n}\n\nLoginButton.defaultProps = {\n  // someProp:false\n}\n\nLoginButton.FRAGMENT = FRAGMENT\nLoginButton.QUERY = QUERY\n\nexport default LoginButton\n","/* @aztlan/generator-front 0.4.0 */\nimport * as React from 'react'\nimport { useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { useLazyLoadQuery } from 'react-relay'\nimport { defineMessages, useIntl, FormattedMessage } from 'react-intl'\nimport Template from '../../common/templates/Base'\nimport { LoginButton } from '../ui'\nimport { ThemeSwitcher, LocaleSwitcher } from '../../common/ui'\n\nconst m = defineMessages({\n  title: {\n    // id: `${messagesPrefix}.title`,\n    description: 'Message to greet the user.',\n    defaultMessage: 'Login',\n  },\n  login: {\n    description: 'Message to greet the user.',\n    defaultMessage: 'Please click on the button to log in.',\n  },\n})\n\nfunction Login() {\n  const data = useLazyLoadQuery(\n    LoginButton.QUERY,\n    { resource: 'http://ash.779.mx:3002/profile' },\n    { fetchPolicy: 'store-or-network' },\n  )\n\n  const { formatMessage } = useIntl()\n  return (\n    <Template title={formatMessage(m.title)}>\n      <React.Suspense fallback=\"Loading\">\n        <LoginButton data={data} />\n      </React.Suspense>\n      <p>{formatMessage(m.login)}</p>\n    </Template>\n  )\n}\n\nexport default Login\n","/**\n * @generated SignedSource<<9d907b33486b908e8b2bdb2e19298e73>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { Fragment, ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type LoginButtonFragment$data = {\n  readonly oAuth2Links: {\n    readonly google: string;\n  } | null | undefined;\n  readonly \" $fragmentType\": \"LoginButtonFragment\";\n};\nexport type LoginButtonFragment$key = {\n  readonly \" $data\"?: LoginButtonFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"LoginButtonFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [\n    {\n      \"defaultValue\": null,\n      \"kind\": \"LocalArgument\",\n      \"name\": \"resource\"\n    }\n  ],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"LoginButtonFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": [\n        {\n          \"kind\": \"Variable\",\n          \"name\": \"resource\",\n          \"variableName\": \"resource\"\n        }\n      ],\n      \"concreteType\": \"OAuth2LinksProvider\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"oAuth2Links\",\n      \"plural\": false,\n      \"selections\": [\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"google\",\n          \"storageKey\": null\n        }\n      ],\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"Query\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"3b69a3ece0a3c43e8ac48b6c9e1c7b3c\";\n\nexport default node;\n","/**\n * @generated SignedSource<<9bd8d23ca5048a5a73f79e12f55c8c26>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type LoginButtonQuery$variables = {\n  resource: string;\n};\nexport type LoginButtonQuery$data = {\n  readonly \" $fragmentSpreads\": FragmentRefs<\"LoginButtonFragment\">;\n};\nexport type LoginButtonQuery = {\n  response: LoginButtonQuery$data;\n  variables: LoginButtonQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"resource\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"resource\",\n    \"variableName\": \"resource\"\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"LoginButtonQuery\",\n    \"selections\": [\n      {\n        \"args\": (v1/*: any*/),\n        \"kind\": \"FragmentSpread\",\n        \"name\": \"LoginButtonFragment\"\n      }\n    ],\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"LoginButtonQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"OAuth2LinksProvider\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"oAuth2Links\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"google\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"579dbfe9c478c2b1c2eeaf9429d82bbc\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"LoginButtonQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query LoginButtonQuery(\\n  $resource: String!\\n) {\\n  ...LoginButtonFragment_1AFwKl\\n}\\n\\nfragment LoginButtonFragment_1AFwKl on Query {\\n  oAuth2Links(resource: $resource) {\\n    google\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"8ed3b9c0ddc57320fea3af8c96bc65ba\";\n\nexport default node;\n","/* @aztlan/generator-front 0.4.0 */\nimport * as React from 'react'\nimport { defineMessages, useIntl } from 'react-intl'\nimport Template from '../../common/templates/Base'\n\nconst messagesPrefix = 'common.pages.maintenance'\nconst m = defineMessages({\n  notAvailable: {\n    defaultMessage: 'This website is currently not available',\n  },\n})\n\nfunction Maintenance() {\n  const { formatMessage } = useIntl()\n  return (\n    <Template title=\"Maintenance\">\n      <p>{formatMessage(m.notAvailable)}</p>\n    </Template>\n  )\n}\n\nexport default Maintenance\n"],"names":["baseClassName","styleNames","base","componentClassName","FRAGMENT","_LoginButtonFragment","require","hash","console","error","QUERY","_LoginButtonQuery","LoginButton","_ref","id","userClassName","className","style","data","_objectWithoutProperties","_excluded","useInsertionEffect","google","useFragment","oAuth2Links","React","filter","e","join","href","propTypes","PropTypes","children","defaultProps","m","defineMessages","title","defaultMessage","login","useLazyLoadQuery","resource","fetchPolicy","formatMessage","useIntl","Template","fallback","node","v0","v1","notAvailable"],"sourceRoot":""}