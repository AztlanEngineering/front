{"version":3,"file":"RelayModernStore.js.js?aca7d","mappings":"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","sources":["webpack://@aztlan/template-react/../../node_modules/relay-runtime/lib/store/RelayModernStore.js"],"sourcesContent":["'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\")[\"default\"];\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _require = require('../multi-actor-environment/ActorIdentifier'),\n  INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE = _require.INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE,\n  assertInternalActorIdentifier = _require.assertInternalActorIdentifier;\nvar deepFreeze = require('../util/deepFreeze');\nvar RelayFeatureFlags = require('../util/RelayFeatureFlags');\nvar resolveImmediate = require('../util/resolveImmediate');\nvar DataChecker = require('./DataChecker');\nvar defaultGetDataID = require('./defaultGetDataID');\nvar RelayModernRecord = require('./RelayModernRecord');\nvar RelayOptimisticRecordSource = require('./RelayOptimisticRecordSource');\nvar RelayReader = require('./RelayReader');\nvar RelayReferenceMarker = require('./RelayReferenceMarker');\nvar RelayStoreSubscriptions = require('./RelayStoreSubscriptions');\nvar RelayStoreUtils = require('./RelayStoreUtils');\nvar _require2 = require('./RelayStoreUtils'),\n  ROOT_ID = _require2.ROOT_ID,\n  ROOT_TYPE = _require2.ROOT_TYPE;\nvar _require3 = require('./ResolverCache'),\n  RecordResolverCache = _require3.RecordResolverCache;\nvar invariant = require('invariant');\nvar DEFAULT_RELEASE_BUFFER_SIZE = 10;\nvar RelayModernStore = /*#__PURE__*/function () {\n  function RelayModernStore(source, options) {\n    var _this = this;\n    var _options$gcReleaseBuf, _options$gcScheduler, _options$getDataID, _options$log, _options$operationLoa;\n    (0, _defineProperty2[\"default\"])(this, \"_gcStep\", function () {\n      if (_this._gcRun) {\n        if (_this._gcRun.next().done) {\n          _this._gcRun = null;\n        } else {\n          _this._gcScheduler(_this._gcStep);\n        }\n      }\n    });\n    if (process.env.NODE_ENV !== \"production\") {\n      var storeIDs = source.getRecordIDs();\n      for (var ii = 0; ii < storeIDs.length; ii++) {\n        var record = source.get(storeIDs[ii]);\n        if (record) {\n          RelayModernRecord.freeze(record);\n        }\n      }\n    }\n    this._currentWriteEpoch = 0;\n    this._gcHoldCounter = 0;\n    this._gcReleaseBufferSize = (_options$gcReleaseBuf = options === null || options === void 0 ? void 0 : options.gcReleaseBufferSize) !== null && _options$gcReleaseBuf !== void 0 ? _options$gcReleaseBuf : DEFAULT_RELEASE_BUFFER_SIZE;\n    this._gcRun = null;\n    this._gcScheduler = (_options$gcScheduler = options === null || options === void 0 ? void 0 : options.gcScheduler) !== null && _options$gcScheduler !== void 0 ? _options$gcScheduler : resolveImmediate;\n    this._getDataID = (_options$getDataID = options === null || options === void 0 ? void 0 : options.getDataID) !== null && _options$getDataID !== void 0 ? _options$getDataID : defaultGetDataID;\n    this._globalInvalidationEpoch = null;\n    this._invalidationSubscriptions = new Set();\n    this._invalidatedRecordIDs = new Set();\n    this.__log = (_options$log = options === null || options === void 0 ? void 0 : options.log) !== null && _options$log !== void 0 ? _options$log : null;\n    this._queryCacheExpirationTime = options === null || options === void 0 ? void 0 : options.queryCacheExpirationTime;\n    this._operationLoader = (_options$operationLoa = options === null || options === void 0 ? void 0 : options.operationLoader) !== null && _options$operationLoa !== void 0 ? _options$operationLoa : null;\n    this._optimisticSource = null;\n    this._recordSource = source;\n    this._releaseBuffer = [];\n    this._roots = new Map();\n    this._shouldScheduleGC = false;\n    this._resolverCache = new RecordResolverCache(function () {\n      return _this._getMutableRecordSource();\n    });\n    this._storeSubscriptions = new RelayStoreSubscriptions(options === null || options === void 0 ? void 0 : options.log, this._resolverCache);\n    this._updatedRecordIDs = new Set();\n    this._shouldProcessClientComponents = options === null || options === void 0 ? void 0 : options.shouldProcessClientComponents;\n    initializeRecordSource(this._recordSource);\n  }\n  var _proto = RelayModernStore.prototype;\n  _proto.getSource = function getSource() {\n    var _this$_optimisticSour;\n    return (_this$_optimisticSour = this._optimisticSource) !== null && _this$_optimisticSour !== void 0 ? _this$_optimisticSour : this._recordSource;\n  };\n  _proto._getMutableRecordSource = function _getMutableRecordSource() {\n    var _this$_optimisticSour2;\n    return (_this$_optimisticSour2 = this._optimisticSource) !== null && _this$_optimisticSour2 !== void 0 ? _this$_optimisticSour2 : this._recordSource;\n  };\n  _proto.check = function check(operation, options) {\n    var _options$handlers, _options$getSourceFor, _options$getTargetFor, _options$defaultActor;\n    var selector = operation.root;\n    var source = this._getMutableRecordSource();\n    var globalInvalidationEpoch = this._globalInvalidationEpoch;\n    var rootEntry = this._roots.get(operation.request.identifier);\n    var operationLastWrittenAt = rootEntry != null ? rootEntry.epoch : null;\n    if (globalInvalidationEpoch != null) {\n      if (operationLastWrittenAt == null || operationLastWrittenAt <= globalInvalidationEpoch) {\n        return {\n          status: 'stale'\n        };\n      }\n    }\n    var handlers = (_options$handlers = options === null || options === void 0 ? void 0 : options.handlers) !== null && _options$handlers !== void 0 ? _options$handlers : [];\n    var getSourceForActor = (_options$getSourceFor = options === null || options === void 0 ? void 0 : options.getSourceForActor) !== null && _options$getSourceFor !== void 0 ? _options$getSourceFor : function (actorIdentifier) {\n      assertInternalActorIdentifier(actorIdentifier);\n      return source;\n    };\n    var getTargetForActor = (_options$getTargetFor = options === null || options === void 0 ? void 0 : options.getTargetForActor) !== null && _options$getTargetFor !== void 0 ? _options$getTargetFor : function (actorIdentifier) {\n      assertInternalActorIdentifier(actorIdentifier);\n      return source;\n    };\n    var operationAvailability = DataChecker.check(getSourceForActor, getTargetForActor, (_options$defaultActor = options === null || options === void 0 ? void 0 : options.defaultActorIdentifier) !== null && _options$defaultActor !== void 0 ? _options$defaultActor : INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE, selector, handlers, this._operationLoader, this._getDataID, this._shouldProcessClientComponents);\n    return getAvailabilityStatus(operationAvailability, operationLastWrittenAt, rootEntry === null || rootEntry === void 0 ? void 0 : rootEntry.fetchTime, this._queryCacheExpirationTime);\n  };\n  _proto.retain = function retain(operation) {\n    var _this2 = this;\n    var id = operation.request.identifier;\n    var disposed = false;\n    var dispose = function dispose() {\n      if (disposed) {\n        return;\n      }\n      disposed = true;\n      var rootEntry = _this2._roots.get(id);\n      if (rootEntry == null) {\n        return;\n      }\n      rootEntry.refCount--;\n      if (rootEntry.refCount === 0) {\n        var _queryCacheExpirationTime = _this2._queryCacheExpirationTime;\n        var rootEntryIsStale = rootEntry.fetchTime != null && _queryCacheExpirationTime != null && rootEntry.fetchTime <= Date.now() - _queryCacheExpirationTime;\n        if (rootEntryIsStale) {\n          _this2._roots[\"delete\"](id);\n          _this2.scheduleGC();\n        } else {\n          _this2._releaseBuffer.push(id);\n          if (_this2._releaseBuffer.length > _this2._gcReleaseBufferSize) {\n            var _id = _this2._releaseBuffer.shift();\n            _this2._roots[\"delete\"](_id);\n            _this2.scheduleGC();\n          }\n        }\n      }\n    };\n    var rootEntry = this._roots.get(id);\n    if (rootEntry != null) {\n      if (rootEntry.refCount === 0) {\n        this._releaseBuffer = this._releaseBuffer.filter(function (_id) {\n          return _id !== id;\n        });\n      }\n      rootEntry.refCount += 1;\n    } else {\n      this._roots.set(id, {\n        operation: operation,\n        refCount: 1,\n        epoch: null,\n        fetchTime: null\n      });\n    }\n    return {\n      dispose: dispose\n    };\n  };\n  _proto.lookup = function lookup(selector) {\n    var source = this.getSource();\n    var snapshot = RelayReader.read(source, selector, this._resolverCache);\n    if (process.env.NODE_ENV !== \"production\") {\n      deepFreeze(snapshot);\n    }\n    return snapshot;\n  };\n  _proto.notify = function notify(sourceOperation, invalidateStore) {\n    var _this3 = this;\n    var log = this.__log;\n    if (log != null) {\n      log({\n        name: 'store.notify.start',\n        sourceOperation: sourceOperation\n      });\n    }\n    this._currentWriteEpoch++;\n    if (invalidateStore === true) {\n      this._globalInvalidationEpoch = this._currentWriteEpoch;\n    }\n    if (RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {\n      this._resolverCache.invalidateDataIDs(this._updatedRecordIDs);\n    }\n    var source = this.getSource();\n    var updatedOwners = [];\n    this._storeSubscriptions.updateSubscriptions(source, this._updatedRecordIDs, updatedOwners, sourceOperation);\n    this._invalidationSubscriptions.forEach(function (subscription) {\n      _this3._updateInvalidationSubscription(subscription, invalidateStore === true);\n    });\n    if (log != null) {\n      log({\n        name: 'store.notify.complete',\n        sourceOperation: sourceOperation,\n        updatedRecordIDs: this._updatedRecordIDs,\n        invalidatedRecordIDs: this._invalidatedRecordIDs\n      });\n    }\n    this._updatedRecordIDs.clear();\n    this._invalidatedRecordIDs.clear();\n    if (sourceOperation != null) {\n      var id = sourceOperation.request.identifier;\n      var rootEntry = this._roots.get(id);\n      if (rootEntry != null) {\n        rootEntry.epoch = this._currentWriteEpoch;\n        rootEntry.fetchTime = Date.now();\n      } else if (sourceOperation.request.node.params.operationKind === 'query' && this._gcReleaseBufferSize > 0 && this._releaseBuffer.length < this._gcReleaseBufferSize) {\n        var temporaryRootEntry = {\n          operation: sourceOperation,\n          refCount: 0,\n          epoch: this._currentWriteEpoch,\n          fetchTime: Date.now()\n        };\n        this._releaseBuffer.push(id);\n        this._roots.set(id, temporaryRootEntry);\n      }\n    }\n    return updatedOwners;\n  };\n  _proto.publish = function publish(source, idsMarkedForInvalidation) {\n    var target = this._getMutableRecordSource();\n    updateTargetFromSource(target, source, this._currentWriteEpoch + 1, idsMarkedForInvalidation, this._updatedRecordIDs, this._invalidatedRecordIDs);\n    var log = this.__log;\n    if (log != null) {\n      log({\n        name: 'store.publish',\n        source: source,\n        optimistic: target === this._optimisticSource\n      });\n    }\n  };\n  _proto.subscribe = function subscribe(snapshot, callback) {\n    return this._storeSubscriptions.subscribe(snapshot, callback);\n  };\n  _proto.holdGC = function holdGC() {\n    var _this4 = this;\n    if (this._gcRun) {\n      this._gcRun = null;\n      this._shouldScheduleGC = true;\n    }\n    this._gcHoldCounter++;\n    var dispose = function dispose() {\n      if (_this4._gcHoldCounter > 0) {\n        _this4._gcHoldCounter--;\n        if (_this4._gcHoldCounter === 0 && _this4._shouldScheduleGC) {\n          _this4.scheduleGC();\n          _this4._shouldScheduleGC = false;\n        }\n      }\n    };\n    return {\n      dispose: dispose\n    };\n  };\n  _proto.toJSON = function toJSON() {\n    return 'RelayModernStore()';\n  };\n  _proto.getEpoch = function getEpoch() {\n    return this._currentWriteEpoch;\n  };\n  _proto.__getUpdatedRecordIDs = function __getUpdatedRecordIDs() {\n    return this._updatedRecordIDs;\n  };\n  _proto.lookupInvalidationState = function lookupInvalidationState(dataIDs) {\n    var _this5 = this;\n    var invalidations = new Map();\n    dataIDs.forEach(function (dataID) {\n      var _RelayModernRecord$ge;\n      var record = _this5.getSource().get(dataID);\n      invalidations.set(dataID, (_RelayModernRecord$ge = RelayModernRecord.getInvalidationEpoch(record)) !== null && _RelayModernRecord$ge !== void 0 ? _RelayModernRecord$ge : null);\n    });\n    invalidations.set('global', this._globalInvalidationEpoch);\n    return {\n      dataIDs: dataIDs,\n      invalidations: invalidations\n    };\n  };\n  _proto.checkInvalidationState = function checkInvalidationState(prevInvalidationState) {\n    var latestInvalidationState = this.lookupInvalidationState(prevInvalidationState.dataIDs);\n    var currentInvalidations = latestInvalidationState.invalidations;\n    var prevInvalidations = prevInvalidationState.invalidations;\n    if (currentInvalidations.get('global') !== prevInvalidations.get('global')) {\n      return true;\n    }\n    var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(prevInvalidationState.dataIDs),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var dataID = _step.value;\n        if (currentInvalidations.get(dataID) !== prevInvalidations.get(dataID)) {\n          return true;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return false;\n  };\n  _proto.subscribeToInvalidationState = function subscribeToInvalidationState(invalidationState, callback) {\n    var _this6 = this;\n    var subscription = {\n      callback: callback,\n      invalidationState: invalidationState\n    };\n    var dispose = function dispose() {\n      _this6._invalidationSubscriptions[\"delete\"](subscription);\n    };\n    this._invalidationSubscriptions.add(subscription);\n    return {\n      dispose: dispose\n    };\n  };\n  _proto._updateInvalidationSubscription = function _updateInvalidationSubscription(subscription, invalidatedStore) {\n    var _this7 = this;\n    var callback = subscription.callback,\n      invalidationState = subscription.invalidationState;\n    var dataIDs = invalidationState.dataIDs;\n    var isSubscribedToInvalidatedIDs = invalidatedStore || dataIDs.some(function (dataID) {\n      return _this7._invalidatedRecordIDs.has(dataID);\n    });\n    if (!isSubscribedToInvalidatedIDs) {\n      return;\n    }\n    callback();\n  };\n  _proto.snapshot = function snapshot() {\n    !(this._optimisticSource == null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernStore: Unexpected call to snapshot() while a previous ' + 'snapshot exists.') : invariant(false) : void 0;\n    var log = this.__log;\n    if (log != null) {\n      log({\n        name: 'store.snapshot'\n      });\n    }\n    this._storeSubscriptions.snapshotSubscriptions(this.getSource());\n    if (this._gcRun) {\n      this._gcRun = null;\n      this._shouldScheduleGC = true;\n    }\n    this._optimisticSource = RelayOptimisticRecordSource.create(this.getSource());\n  };\n  _proto.restore = function restore() {\n    !(this._optimisticSource != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernStore: Unexpected call to restore(), expected a snapshot ' + 'to exist (make sure to call snapshot()).') : invariant(false) : void 0;\n    var log = this.__log;\n    if (log != null) {\n      log({\n        name: 'store.restore'\n      });\n    }\n    this._optimisticSource = null;\n    if (this._shouldScheduleGC) {\n      this.scheduleGC();\n    }\n    this._storeSubscriptions.restoreSubscriptions();\n  };\n  _proto.scheduleGC = function scheduleGC() {\n    if (this._gcHoldCounter > 0) {\n      this._shouldScheduleGC = true;\n      return;\n    }\n    if (this._gcRun) {\n      return;\n    }\n    this._gcRun = this._collect();\n    this._gcScheduler(this._gcStep);\n  };\n  _proto.__gc = function __gc() {\n    if (this._optimisticSource != null) {\n      return;\n    }\n    var gcRun = this._collect();\n    while (!gcRun.next().done) {}\n  };\n  _proto._collect = function* _collect() {\n    top: while (true) {\n      var startEpoch = this._currentWriteEpoch;\n      var references = new Set();\n      var _iterator2 = (0, _createForOfIteratorHelper2[\"default\"])(this._roots.values()),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var operation = _step2.value.operation;\n          var selector = operation.root;\n          RelayReferenceMarker.mark(this._recordSource, selector, references, this._operationLoader, this._shouldProcessClientComponents);\n          yield;\n          if (startEpoch !== this._currentWriteEpoch) {\n            continue top;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      var log = this.__log;\n      if (log != null) {\n        log({\n          name: 'store.gc',\n          references: references\n        });\n      }\n      if (references.size === 0) {\n        this._recordSource.clear();\n      } else {\n        var storeIDs = this._recordSource.getRecordIDs();\n        for (var ii = 0; ii < storeIDs.length; ii++) {\n          var dataID = storeIDs[ii];\n          if (!references.has(dataID)) {\n            this._recordSource.remove(dataID);\n          }\n        }\n      }\n      return;\n    }\n  };\n  return RelayModernStore;\n}();\nfunction initializeRecordSource(target) {\n  if (!target.has(ROOT_ID)) {\n    var rootRecord = RelayModernRecord.create(ROOT_ID, ROOT_TYPE);\n    target.set(ROOT_ID, rootRecord);\n  }\n}\nfunction updateTargetFromSource(target, source, currentWriteEpoch, idsMarkedForInvalidation, updatedRecordIDs, invalidatedRecordIDs) {\n  if (idsMarkedForInvalidation) {\n    idsMarkedForInvalidation.forEach(function (dataID) {\n      var targetRecord = target.get(dataID);\n      var sourceRecord = source.get(dataID);\n      if (sourceRecord === null) {\n        return;\n      }\n      var nextRecord;\n      if (targetRecord != null) {\n        nextRecord = RelayModernRecord.clone(targetRecord);\n      } else {\n        nextRecord = sourceRecord != null ? RelayModernRecord.clone(sourceRecord) : null;\n      }\n      if (!nextRecord) {\n        return;\n      }\n      RelayModernRecord.setValue(nextRecord, RelayStoreUtils.INVALIDATED_AT_KEY, currentWriteEpoch);\n      invalidatedRecordIDs.add(dataID);\n      target.set(dataID, nextRecord);\n    });\n  }\n  var dataIDs = source.getRecordIDs();\n  for (var ii = 0; ii < dataIDs.length; ii++) {\n    var dataID = dataIDs[ii];\n    var sourceRecord = source.get(dataID);\n    var targetRecord = target.get(dataID);\n    if (process.env.NODE_ENV !== \"production\") {\n      if (sourceRecord) {\n        RelayModernRecord.freeze(sourceRecord);\n      }\n    }\n    if (sourceRecord && targetRecord) {\n      var nextRecord = RelayModernRecord.update(targetRecord, sourceRecord);\n      if (nextRecord !== targetRecord) {\n        if (process.env.NODE_ENV !== \"production\") {\n          RelayModernRecord.freeze(nextRecord);\n        }\n        updatedRecordIDs.add(dataID);\n        target.set(dataID, nextRecord);\n      }\n    } else if (sourceRecord === null) {\n      target[\"delete\"](dataID);\n      if (targetRecord !== null) {\n        updatedRecordIDs.add(dataID);\n      }\n    } else if (sourceRecord) {\n      target.set(dataID, sourceRecord);\n      updatedRecordIDs.add(dataID);\n    }\n  }\n}\nfunction getAvailabilityStatus(operationAvailability, operationLastWrittenAt, operationFetchTime, queryCacheExpirationTime) {\n  var mostRecentlyInvalidatedAt = operationAvailability.mostRecentlyInvalidatedAt,\n    status = operationAvailability.status;\n  if (typeof mostRecentlyInvalidatedAt === 'number') {\n    if (operationLastWrittenAt == null || mostRecentlyInvalidatedAt > operationLastWrittenAt) {\n      return {\n        status: 'stale'\n      };\n    }\n  }\n  if (status === 'missing') {\n    return {\n      status: 'missing'\n    };\n  }\n  if (operationFetchTime != null && queryCacheExpirationTime != null) {\n    var isStale = operationFetchTime <= Date.now() - queryCacheExpirationTime;\n    if (isStale) {\n      return {\n        status: 'stale'\n      };\n    }\n  }\n  return {\n    status: 'available',\n    fetchTime: operationFetchTime !== null && operationFetchTime !== void 0 ? operationFetchTime : null\n  };\n}\nmodule.exports = RelayModernStore;"],"names":["_interopRequireDefault","_createForOfIteratorHelper2","_defineProperty2","_require","INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE","assertInternalActorIdentifier","RelayFeatureFlags","resolveImmediate","DataChecker","defaultGetDataID","RelayModernRecord","RelayOptimisticRecordSource","RelayReader","RelayReferenceMarker","RelayStoreSubscriptions","RelayStoreUtils","_require2","ROOT_ID","ROOT_TYPE","RecordResolverCache","invariant","RelayModernStore","source","options","_options$gcReleaseBuf","_options$gcScheduler","_options$getDataID","_options$log","_options$operationLoa","_this","this","_gcRun","next","done","_gcScheduler","_gcStep","_currentWriteEpoch","_gcHoldCounter","_gcReleaseBufferSize","gcReleaseBufferSize","gcScheduler","_getDataID","getDataID","_globalInvalidationEpoch","_invalidationSubscriptions","Set","_invalidatedRecordIDs","__log","log","_queryCacheExpirationTime","queryCacheExpirationTime","_operationLoader","operationLoader","_optimisticSource","_recordSource","_releaseBuffer","_roots","Map","_shouldScheduleGC","_resolverCache","_getMutableRecordSource","_storeSubscriptions","_updatedRecordIDs","_shouldProcessClientComponents","shouldProcessClientComponents","target","has","rootRecord","create","set","initializeRecordSource","_proto","prototype","getSource","_this$_optimisticSour","_this$_optimisticSour2","check","operation","_options$handlers","_options$getSourceFor","_options$getTargetFor","_options$defaultActor","selector","root","globalInvalidationEpoch","rootEntry","get","request","identifier","operationLastWrittenAt","epoch","status","handlers","getSourceForActor","actorIdentifier","getTargetForActor","operationAvailability","operationFetchTime","mostRecentlyInvalidatedAt","Date","now","fetchTime","getAvailabilityStatus","defaultActorIdentifier","retain","_this2","id","disposed","refCount","filter","_id","dispose","scheduleGC","push","length","shift","lookup","read","notify","sourceOperation","invalidateStore","_this3","name","ENABLE_RELAY_RESOLVERS","invalidateDataIDs","updatedOwners","updateSubscriptions","forEach","subscription","_updateInvalidationSubscription","updatedRecordIDs","invalidatedRecordIDs","clear","node","params","operationKind","temporaryRootEntry","publish","idsMarkedForInvalidation","currentWriteEpoch","dataID","nextRecord","targetRecord","sourceRecord","clone","setValue","INVALIDATED_AT_KEY","add","dataIDs","getRecordIDs","ii","update","updateTargetFromSource","optimistic","subscribe","snapshot","callback","holdGC","_this4","toJSON","getEpoch","__getUpdatedRecordIDs","lookupInvalidationState","_this5","invalidations","_RelayModernRecord$ge","record","getInvalidationEpoch","checkInvalidationState","prevInvalidationState","currentInvalidations","prevInvalidations","_step","_iterator","s","n","value","err","e","f","subscribeToInvalidationState","invalidationState","_this6","invalidatedStore","_this7","some","snapshotSubscriptions","restore","restoreSubscriptions","_collect","__gc","gcRun","top","_step2","startEpoch","references","_iterator2","values","mark","size","storeIDs","remove","module","exports"],"sourceRoot":""}