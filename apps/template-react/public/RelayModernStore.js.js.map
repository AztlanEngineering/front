{"version":3,"file":"RelayModernStore.js.js?ed298","mappings":";+GAAa,SAAAA,EAAAC,GAAA,OAAAD,EAAA,mBAAAE,QAAA,iBAAAA,OAAAC,SAAA,SAAAF,GAAA,cAAAA,CAAA,WAAAA,GAAA,OAAAA,GAAA,mBAAAC,QAAAD,EAAAG,cAAAF,QAAAD,IAAAC,OAAAG,UAAA,gBAAAJ,CAAA,EAAAD,EAAAC,EAAA,UAAAK,IACbA,EAAA,kBAAAC,CAAA,MAAAC,EAAAD,EAAA,GAAAE,EAAAC,OAAAL,UAAAM,EAAAF,EAAAG,eAAAX,EAAAS,OAAAG,gBAAA,SAAAL,EAAAD,EAAAE,GAAAD,EAAAD,GAAAE,EAAAK,KAAA,EAAAC,EAAA,mBAAAb,OAAAA,OAAA,GAAAc,EAAAD,EAAAZ,UAAA,aAAAc,EAAAF,EAAAG,eAAA,kBAAAC,EAAAJ,EAAAK,aAAA,yBAAAC,EAAAb,EAAAD,EAAAE,GAAA,OAAAC,OAAAG,eAAAL,EAAAD,EAAA,CAAAO,MAAAL,EAAAa,YAAA,EAAAC,cAAA,EAAAC,UAAA,IAAAhB,EAAAD,EAAA,KAAAc,EAAA,aAAAb,GAAAa,EAAA,SAAAb,EAAAD,EAAAE,GAAA,OAAAD,EAAAD,GAAAE,CAAA,WAAAgB,EAAAjB,EAAAD,EAAAE,EAAAE,GAAA,IAAAI,EAAAR,GAAAA,EAAAF,qBAAAqB,EAAAnB,EAAAmB,EAAAV,EAAAN,OAAAiB,OAAAZ,EAAAV,WAAAY,EAAA,IAAAW,EAAAjB,GAAA,WAAAV,EAAAe,EAAA,WAAAF,MAAAe,EAAArB,EAAAC,EAAAQ,KAAAD,CAAA,UAAAc,EAAAtB,EAAAD,EAAAE,GAAA,WAAAsB,KAAA,SAAAC,IAAAxB,EAAAyB,KAAA1B,EAAAE,GAAA,OAAAD,GAAA,OAAAuB,KAAA,QAAAC,IAAAxB,EAAA,EAAAD,EAAAkB,KAAAA,EAAA,IAAAS,EAAA,iBAAAC,EAAA,iBAAAC,EAAA,YAAAC,EAAA,YAAAC,EAAA,YAAAZ,IAAA,UAAAa,IAAA,UAAAC,IAAA,KAAAC,EAAA,GAAApB,EAAAoB,EAAAzB,GAAA,8BAAA0B,EAAAhC,OAAAiC,eAAAC,EAAAF,GAAAA,EAAAA,EAAAG,EAAA,MAAAD,GAAAA,IAAAnC,GAAAE,EAAAsB,KAAAW,EAAA5B,KAAAyB,EAAAG,GAAA,IAAAE,EAAAN,EAAAnC,UAAAqB,EAAArB,UAAAK,OAAAiB,OAAAc,GAAA,SAAAM,EAAAvC,GAAA,0BAAAwC,SAAA,SAAAzC,GAAAc,EAAAb,EAAAD,GAAA,SAAAC,GAAA,YAAAyC,QAAA1C,EAAAC,EAAA,gBAAA0C,EAAA1C,EAAAD,GAAA,SAAA4C,EAAA1C,EAAAR,EAAAc,EAAAC,GAAA,IAAAC,EAAAa,EAAAtB,EAAAC,GAAAD,EAAAP,GAAA,aAAAgB,EAAAc,KAAA,KAAAZ,EAAAF,EAAAe,IAAAE,EAAAf,EAAAL,MAAA,OAAAoB,GAAA,UAAAlC,EAAAkC,IAAAvB,EAAAsB,KAAAC,EAAA,WAAA3B,EAAA6C,QAAAlB,EAAAmB,SAAAC,MAAA,SAAA9C,GAAA2C,EAAA,OAAA3C,EAAAO,EAAAC,EAAA,aAAAR,GAAA2C,EAAA,QAAA3C,EAAAO,EAAAC,EAAA,IAAAT,EAAA6C,QAAAlB,GAAAoB,MAAA,SAAA9C,GAAAW,EAAAL,MAAAN,EAAAO,EAAAI,EAAA,aAAAX,GAAA,OAAA2C,EAAA,QAAA3C,EAAAO,EAAAC,EAAA,IAAAA,EAAAC,EAAAe,IAAA,KAAAvB,EAAAR,EAAA,gBAAAa,MAAA,SAAAN,EAAAG,GAAA,SAAA4C,IAAA,WAAAhD,GAAA,SAAAA,EAAAE,GAAA0C,EAAA3C,EAAAG,EAAAJ,EAAAE,EAAA,WAAAA,EAAAA,EAAAA,EAAA6C,KAAAC,EAAAA,GAAAA,GAAA,aAAA1B,EAAAtB,EAAAE,EAAAE,GAAA,IAAAV,EAAAiC,EAAA,gBAAAnB,EAAAC,GAAA,GAAAf,IAAAmC,EAAA,UAAAoB,MAAA,mCAAAvD,IAAAoC,EAAA,cAAAtB,EAAA,MAAAC,EAAA,OAAAF,MAAAN,EAAAiD,MAAA,OAAA9C,EAAA+C,OAAA3C,EAAAJ,EAAAqB,IAAAhB,IAAA,KAAAC,EAAAN,EAAAgD,SAAA,GAAA1C,EAAA,KAAAE,EAAAyC,EAAA3C,EAAAN,GAAA,GAAAQ,EAAA,IAAAA,IAAAmB,EAAA,gBAAAnB,CAAA,cAAAR,EAAA+C,OAAA/C,EAAAkD,KAAAlD,EAAAmD,MAAAnD,EAAAqB,SAAA,aAAArB,EAAA+C,OAAA,IAAAzD,IAAAiC,EAAA,MAAAjC,EAAAoC,EAAA1B,EAAAqB,IAAArB,EAAAoD,kBAAApD,EAAAqB,IAAA,gBAAArB,EAAA+C,QAAA/C,EAAAqD,OAAA,SAAArD,EAAAqB,KAAA/B,EAAAmC,EAAA,IAAAK,EAAAX,EAAAvB,EAAAE,EAAAE,GAAA,cAAA8B,EAAAV,KAAA,IAAA9B,EAAAU,EAAA8C,KAAApB,EAAAF,EAAAM,EAAAT,MAAAM,EAAA,gBAAAxB,MAAA2B,EAAAT,IAAAyB,KAAA9C,EAAA8C,KAAA,WAAAhB,EAAAV,OAAA9B,EAAAoC,EAAA1B,EAAA+C,OAAA,QAAA/C,EAAAqB,IAAAS,EAAAT,IAAA,YAAA4B,EAAArD,EAAAE,GAAA,IAAAE,EAAAF,EAAAiD,OAAAzD,EAAAM,EAAAJ,SAAAQ,GAAA,GAAAV,IAAAO,EAAA,OAAAC,EAAAkD,SAAA,eAAAhD,GAAAJ,EAAAJ,SAAA,SAAAM,EAAAiD,OAAA,SAAAjD,EAAAuB,IAAAxB,EAAAoD,EAAArD,EAAAE,GAAA,UAAAA,EAAAiD,SAAA,WAAA/C,IAAAF,EAAAiD,OAAA,QAAAjD,EAAAuB,IAAA,IAAAiC,UAAA,oCAAAtD,EAAA,aAAA2B,EAAA,IAAAvB,EAAAe,EAAA7B,EAAAM,EAAAJ,SAAAM,EAAAuB,KAAA,aAAAjB,EAAAgB,KAAA,OAAAtB,EAAAiD,OAAA,QAAAjD,EAAAuB,IAAAjB,EAAAiB,IAAAvB,EAAAkD,SAAA,KAAArB,EAAA,IAAAtB,EAAAD,EAAAiB,IAAA,OAAAhB,EAAAA,EAAAyC,MAAAhD,EAAAF,EAAA2D,YAAAlD,EAAAF,MAAAL,EAAA0D,KAAA5D,EAAA6D,QAAA,WAAA3D,EAAAiD,SAAAjD,EAAAiD,OAAA,OAAAjD,EAAAuB,IAAAxB,GAAAC,EAAAkD,SAAA,KAAArB,GAAAtB,GAAAP,EAAAiD,OAAA,QAAAjD,EAAAuB,IAAA,IAAAiC,UAAA,oCAAAxD,EAAAkD,SAAA,KAAArB,EAAA,UAAA+B,EAAA7D,GAAA,IAAAD,EAAA,CAAA+D,OAAA9D,EAAA,SAAAA,IAAAD,EAAAgE,SAAA/D,EAAA,SAAAA,IAAAD,EAAAiE,WAAAhE,EAAA,GAAAD,EAAAkE,SAAAjE,EAAA,SAAAkE,WAAAC,KAAApE,EAAA,UAAAqE,EAAApE,GAAA,IAAAD,EAAAC,EAAAqE,YAAA,GAAAtE,EAAAwB,KAAA,gBAAAxB,EAAAyB,IAAAxB,EAAAqE,WAAAtE,CAAA,UAAAqB,EAAApB,GAAA,KAAAkE,WAAA,EAAAJ,OAAA,SAAA9D,EAAAwC,QAAAqB,EAAA,WAAAS,OAAA,YAAAjC,EAAAtC,GAAA,GAAAA,GAAA,KAAAA,EAAA,KAAAE,EAAAF,EAAAS,GAAA,GAAAP,EAAA,OAAAA,EAAAwB,KAAA1B,GAAA,sBAAAA,EAAA4D,KAAA,OAAA5D,EAAA,IAAAwE,MAAAxE,EAAAyE,QAAA,KAAA/E,GAAA,EAAAc,EAAA,SAAAoD,IAAA,OAAAlE,EAAAM,EAAAyE,QAAA,GAAArE,EAAAsB,KAAA1B,EAAAN,GAAA,OAAAkE,EAAArD,MAAAP,EAAAN,GAAAkE,EAAAV,MAAA,EAAAU,EAAA,OAAAA,EAAArD,MAAAN,EAAA2D,EAAAV,MAAA,EAAAU,CAAA,SAAApD,EAAAoD,KAAApD,CAAA,YAAAkD,UAAAjE,EAAAO,GAAA,2BAAAgC,EAAAlC,UAAAmC,EAAAvC,EAAA6C,EAAA,eAAAhC,MAAA0B,EAAAjB,cAAA,IAAAtB,EAAAuC,EAAA,eAAA1B,MAAAyB,EAAAhB,cAAA,IAAAgB,EAAA0C,YAAA5D,EAAAmB,EAAArB,EAAA,qBAAAZ,EAAA2E,oBAAA,SAAA1E,GAAA,IAAAD,EAAA,mBAAAC,GAAAA,EAAAJ,YAAA,QAAAG,IAAAA,IAAAgC,GAAA,uBAAAhC,EAAA0E,aAAA1E,EAAA4E,MAAA,EAAA5E,EAAA6E,KAAA,SAAA5E,GAAA,OAAAE,OAAA2E,eAAA3E,OAAA2E,eAAA7E,EAAAgC,IAAAhC,EAAA8E,UAAA9C,EAAAnB,EAAAb,EAAAW,EAAA,sBAAAX,EAAAH,UAAAK,OAAAiB,OAAAmB,GAAAtC,CAAA,EAAAD,EAAAgF,MAAA,SAAA/E,GAAA,OAAA6C,QAAA7C,EAAA,EAAAuC,EAAAG,EAAA7C,WAAAgB,EAAA6B,EAAA7C,UAAAY,GAAA,0BAAAV,EAAA2C,cAAAA,EAAA3C,EAAAiF,MAAA,SAAAhF,EAAAC,EAAAE,EAAAV,EAAAc,QAAA,IAAAA,IAAAA,EAAA0E,SAAA,IAAAzE,EAAA,IAAAkC,EAAAzB,EAAAjB,EAAAC,EAAAE,EAAAV,GAAAc,GAAA,OAAAR,EAAA2E,oBAAAzE,GAAAO,EAAAA,EAAAmD,OAAAb,MAAA,SAAA9C,GAAA,OAAAA,EAAAiD,KAAAjD,EAAAM,MAAAE,EAAAmD,MAAA,KAAApB,EAAAD,GAAAzB,EAAAyB,EAAA3B,EAAA,aAAAE,EAAAyB,EAAA9B,GAAA,0BAAAK,EAAAyB,EAAA,qDAAAvC,EAAAmF,KAAA,SAAAlF,GAAA,IAAAD,EAAAG,OAAAF,GAAAC,EAAA,WAAAE,KAAAJ,EAAAE,EAAAkE,KAAAhE,GAAA,OAAAF,EAAAkF,UAAA,SAAAxB,IAAA,KAAA1D,EAAAuE,QAAA,KAAAxE,EAAAC,EAAAmF,MAAA,GAAApF,KAAAD,EAAA,OAAA4D,EAAArD,MAAAN,EAAA2D,EAAAV,MAAA,EAAAU,CAAA,QAAAA,EAAAV,MAAA,EAAAU,CAAA,GAAA5D,EAAAsC,OAAAA,EAAAjB,EAAAvB,UAAA,CAAAD,YAAAwB,EAAAkD,MAAA,SAAAvE,GAAA,QAAAsF,KAAA,OAAA1B,KAAA,OAAAN,KAAA,KAAAC,MAAAtD,EAAA,KAAAiD,MAAA,OAAAE,SAAA,UAAAD,OAAA,YAAA1B,IAAAxB,EAAA,KAAAkE,WAAA1B,QAAA4B,IAAArE,EAAA,QAAAE,KAAA,WAAAA,EAAAqF,OAAA,IAAAnF,EAAAsB,KAAA,KAAAxB,KAAAsE,OAAAtE,EAAAsF,MAAA,WAAAtF,GAAAD,EAAA,EAAAwF,KAAA,gBAAAvC,MAAA,MAAAjD,EAAA,KAAAkE,WAAA,GAAAG,WAAA,aAAArE,EAAAuB,KAAA,MAAAvB,EAAAwB,IAAA,YAAAiE,IAAA,EAAAlC,kBAAA,SAAAxD,GAAA,QAAAkD,KAAA,MAAAlD,EAAA,IAAAE,EAAA,cAAAyF,EAAAvF,EAAAV,GAAA,OAAAe,EAAAe,KAAA,QAAAf,EAAAgB,IAAAzB,EAAAE,EAAA0D,KAAAxD,EAAAV,IAAAQ,EAAAiD,OAAA,OAAAjD,EAAAuB,IAAAxB,KAAAP,CAAA,SAAAA,EAAA,KAAAyE,WAAAM,OAAA,EAAA/E,GAAA,IAAAA,EAAA,KAAAc,EAAA,KAAA2D,WAAAzE,GAAAe,EAAAD,EAAA8D,WAAA,YAAA9D,EAAAuD,OAAA,OAAA4B,EAAA,UAAAnF,EAAAuD,QAAA,KAAAuB,KAAA,KAAA5E,EAAAN,EAAAsB,KAAAlB,EAAA,YAAAI,EAAAR,EAAAsB,KAAAlB,EAAA,iBAAAE,GAAAE,EAAA,SAAA0E,KAAA9E,EAAAwD,SAAA,OAAA2B,EAAAnF,EAAAwD,UAAA,WAAAsB,KAAA9E,EAAAyD,WAAA,OAAA0B,EAAAnF,EAAAyD,WAAA,SAAAvD,GAAA,QAAA4E,KAAA9E,EAAAwD,SAAA,OAAA2B,EAAAnF,EAAAwD,UAAA,YAAApD,EAAA,UAAAqC,MAAA,kDAAAqC,KAAA9E,EAAAyD,WAAA,OAAA0B,EAAAnF,EAAAyD,WAAA,KAAAR,OAAA,SAAAxD,EAAAD,GAAA,QAAAE,EAAA,KAAAiE,WAAAM,OAAA,EAAAvE,GAAA,IAAAA,EAAA,KAAAR,EAAA,KAAAyE,WAAAjE,GAAA,GAAAR,EAAAqE,QAAA,KAAAuB,MAAAlF,EAAAsB,KAAAhC,EAAA,oBAAA4F,KAAA5F,EAAAuE,WAAA,KAAAzD,EAAAd,EAAA,OAAAc,IAAA,UAAAP,GAAA,aAAAA,IAAAO,EAAAuD,QAAA/D,GAAAA,GAAAQ,EAAAyD,aAAAzD,EAAA,UAAAC,EAAAD,EAAAA,EAAA8D,WAAA,UAAA7D,EAAAe,KAAAvB,EAAAQ,EAAAgB,IAAAzB,EAAAQ,GAAA,KAAA2C,OAAA,YAAAS,KAAApD,EAAAyD,WAAAlC,GAAA,KAAA6D,SAAAnF,EAAA,EAAAmF,SAAA,SAAA3F,EAAAD,GAAA,aAAAC,EAAAuB,KAAA,MAAAvB,EAAAwB,IAAA,gBAAAxB,EAAAuB,MAAA,aAAAvB,EAAAuB,KAAA,KAAAoC,KAAA3D,EAAAwB,IAAA,WAAAxB,EAAAuB,MAAA,KAAAkE,KAAA,KAAAjE,IAAAxB,EAAAwB,IAAA,KAAA0B,OAAA,cAAAS,KAAA,kBAAA3D,EAAAuB,MAAAxB,IAAA,KAAA4D,KAAA5D,GAAA+B,CAAA,EAAA8D,OAAA,SAAA5F,GAAA,QAAAD,EAAA,KAAAmE,WAAAM,OAAA,EAAAzE,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAAiE,WAAAnE,GAAA,GAAAE,EAAA+D,aAAAhE,EAAA,YAAA2F,SAAA1F,EAAAoE,WAAApE,EAAAgE,UAAAG,EAAAnE,GAAA6B,CAAA,kBAAA9B,GAAA,QAAAD,EAAA,KAAAmE,WAAAM,OAAA,EAAAzE,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAAiE,WAAAnE,GAAA,GAAAE,EAAA6D,SAAA9D,EAAA,KAAAG,EAAAF,EAAAoE,WAAA,aAAAlE,EAAAoB,KAAA,KAAA9B,EAAAU,EAAAqB,IAAA4C,EAAAnE,EAAA,QAAAR,CAAA,YAAAuD,MAAA,0BAAA6C,cAAA,SAAA9F,EAAAE,EAAAE,GAAA,YAAAgD,SAAA,CAAAxD,SAAA0C,EAAAtC,GAAA2D,WAAAzD,EAAA2D,QAAAzD,GAAA,cAAA+C,SAAA,KAAA1B,IAAAxB,GAAA8B,CAAA,GAAA/B,CAAA,CACA,IAAI+F,EAAyBC,EAAAA,MAAAA,QACzBC,EAA8BF,EAAuBC,EAAQ,OAC7DE,EAAmBH,EAAuBC,EAAQ,OAClDG,EAAWH,EAAQ,MACrBI,EAAuCD,EAASC,qCAChDC,EAAgCF,EAASE,8BAEvCC,GADaN,EAAQ,MACDA,EAAQ,OAC5BO,EAAmBP,EAAQ,MAC3BQ,EAAcR,EAAQ,MACtBS,EAAmBT,EAAQ,MAC3BU,EAAoBV,EAAQ,MAC5BW,EAA8BX,EAAQ,MACtCY,EAAcZ,EAAQ,MACtBa,EAAuBb,EAAQ,KAC/Bc,EAA0Bd,EAAQ,MAClCe,EAAkBf,EAAQ,MAC1BgB,EAAYhB,EAAQ,MACtBiB,EAAUD,EAAUC,QACpBC,EAAYF,EAAUE,UAEtBC,EADcnB,EAAQ,MACUmB,oBAC9BC,EAAYpB,EAAQ,MAEpBqB,EAAgC,WAClC,SAASA,EAAiBC,EAAQC,GAChC,IACIC,EAAuBC,EAAsBC,EAAoBC,EAAcC,EAD/EC,EAAQC,MAEZ,EAAI5B,EAA0B,SAAG4B,KAAM,WAAW,WAC5CD,EAAME,SACJF,EAAME,OAAOnE,OAAOV,KACtB2E,EAAME,OAAS,KAEfF,EAAMG,aAAaH,EAAMI,SAG/B,IAUAH,KAAKI,mBAAqB,EAC1BJ,KAAKK,eAAiB,EACtBL,KAAKM,qBAAmI,QAA3GZ,EAAwBD,aAAyC,EAASA,EAAQc,2BAA2D,IAA1Bb,EAAmCA,EAzBrJ,GA0B9BM,KAAKC,OAAS,KACdD,KAAKE,aAAkH,QAAlGP,EAAuBF,aAAyC,EAASA,EAAQe,mBAAkD,IAAzBb,EAAkCA,EAAuBlB,EACxLuB,KAAKS,WAA4G,QAA9Fb,EAAqBH,aAAyC,EAASA,EAAQiB,iBAA8C,IAAvBd,EAAgCA,EAAqBjB,EAC9KqB,KAAKW,yBAA2B,KAChCX,KAAKY,2BAA6B,IAAIC,IACtCb,KAAKc,sBAAwB,IAAID,IACjCb,KAAKe,MAA2F,QAAlFlB,EAAeJ,aAAyC,EAASA,EAAQuB,WAAkC,IAAjBnB,EAA0BA,EAAe,KACjJG,KAAKiB,0BAA4BxB,aAAyC,EAASA,EAAQyB,yBAC3FlB,KAAKmB,iBAA2H,QAAvGrB,EAAwBL,aAAyC,EAASA,EAAQ2B,uBAAuD,IAA1BtB,EAAmCA,EAAwB,KACnME,KAAKqB,kBAAoB,KACzBrB,KAAKsB,cAAgB9B,EACrBQ,KAAKuB,eAAiB,GACtBvB,KAAKwB,OAAS,IAAIC,IAClBzB,KAAK0B,mBAAoB,EACzB1B,KAAK2B,eAAiB,IAAItC,GAAoB,WAC5C,OAAOU,EAAM6B,yBACf,IACA5B,KAAK6B,oBAAsB,IAAI7C,EAAwBS,aAAyC,EAASA,EAAQuB,IAAKhB,KAAK2B,gBAC3H3B,KAAK8B,kBAAoB,IAAIjB,IAC7Bb,KAAK+B,+BAAiCtC,aAAyC,EAASA,EAAQuC,8BA0VpG,SAAgCC,GAC9B,IAAKA,EAAOC,IAAI/C,GAAU,CACxB,IAAIgD,EAAavD,EAAkBtF,OAAO6F,EAASC,GACnD6C,EAAOG,IAAIjD,EAASgD,EACtB,CACF,CA9VIE,CAAuBrC,KAAKsB,cAC9B,CACA,IAAIgB,EAAS/C,EAAiBvH,UAqV9B,OApVAsK,EAAOC,UAAY,WACjB,IAAIC,EACJ,OAA4D,QAApDA,EAAwBxC,KAAKqB,yBAAyD,IAA1BmB,EAAmCA,EAAwBxC,KAAKsB,aACtI,EACAgB,EAAOV,wBAA0B,WAC/B,IAAIa,EACJ,OAA6D,QAArDA,EAAyBzC,KAAKqB,yBAA0D,IAA3BoB,EAAoCA,EAAyBzC,KAAKsB,aACzI,EACAgB,EAAOI,MAAQ,SAAeC,EAAWlD,GACvC,IAAImD,EAAmBC,EAAuBC,EAAuBC,EACjEC,EAAWL,EAAUM,KACrBzD,EAASQ,KAAK4B,0BACdsB,EAA0BlD,KAAKW,yBAC/BwC,EAAYnD,KAAKwB,OAAO4B,IAAIT,EAAUU,QAAQC,YAC9CC,EAAsC,MAAbJ,EAAoBA,EAAUK,MAAQ,KACnE,GAA+B,MAA3BN,IAC4B,MAA1BK,GAAkCA,GAA0BL,GAC9D,MAAO,CACLO,OAAQ,SAId,IAAIC,EAAwG,QAA5Fd,EAAoBnD,aAAyC,EAASA,EAAQiE,gBAA4C,IAAtBd,EAA+BA,EAAoB,GACnKe,EAA8H,QAAzGd,EAAwBpD,aAAyC,EAASA,EAAQkE,yBAAyD,IAA1Bd,EAAmCA,EAAwB,SAAUe,GAE7M,OADArF,EAA8BqF,GACvBpE,CACT,EACIqE,EAA8H,QAAzGf,EAAwBrD,aAAyC,EAASA,EAAQoE,yBAAyD,IAA1Bf,EAAmCA,EAAwB,SAAUc,GAE7M,OADArF,EAA8BqF,GACvBpE,CACT,EAEA,OAgXJ,SAA+BsE,EAAuBP,EAAwBQ,EAAoB7C,GAChG,IAAI8C,EAA4BF,EAAsBE,0BACpDP,EAASK,EAAsBL,OACjC,MAAyC,iBAA9BO,IACqB,MAA1BT,GAAkCS,EAA4BT,GACzD,CACLE,OAAQ,SAIC,YAAXA,EACK,CACLA,OAAQ,WAGc,MAAtBM,GAA0D,MAA5B7C,GAClB6C,GAAsBE,KAAKC,MAAQhD,EAExC,CACLuC,OAAQ,SAIP,CACLA,OAAQ,YACRU,UAAWJ,QAA+DA,EAAqB,KAEnG,CA3YWK,CADqB1F,EAAYgE,MAAMiB,EAAmBE,EAAkI,QAA9Gd,EAAwBtD,aAAyC,EAASA,EAAQ4E,8BAA8D,IAA1BtB,EAAmCA,EAAwBzE,EAAsC0E,EAAUU,EAAU1D,KAAKmB,iBAAkBnB,KAAKS,WAAYT,KAAK+B,gCACzTwB,EAAwBJ,aAA6C,EAASA,EAAUgB,UAAWnE,KAAKiB,0BAC9J,EACAqB,EAAOgC,OAAS,SAAgB3B,GAC9B,IAAI4B,EAASvE,KACTwE,EAAK7B,EAAUU,QAAQC,WACvBmB,GAAW,EA2BXtB,EAAYnD,KAAKwB,OAAO4B,IAAIoB,GAgBhC,OAfiB,MAAbrB,GACyB,IAAvBA,EAAUuB,WACZ1E,KAAKuB,eAAiBvB,KAAKuB,eAAeoD,QAAO,SAAUC,GACzD,OAAOA,IAAQJ,CACjB,KAEFrB,EAAUuB,UAAY,GAEtB1E,KAAKwB,OAAOY,IAAIoC,EAAI,CAClB7B,UAAWA,EACX+B,SAAU,EACVlB,MAAO,KACPW,UAAW,OAGR,CACLU,QA3CY,WACZ,IAAIJ,EAAJ,CAGAA,GAAW,EACX,IAAItB,EAAYoB,EAAO/C,OAAO4B,IAAIoB,GAClC,GAAiB,MAAbrB,IAGJA,EAAUuB,WACiB,IAAvBvB,EAAUuB,UAAgB,CAC5B,IAAIzD,EAA4BsD,EAAOtD,0BAEvC,GAD8C,MAAvBkC,EAAUgB,WAAkD,MAA7BlD,GAAqCkC,EAAUgB,WAAaF,KAAKC,MAAQjD,EAE7HsD,EAAO/C,OAAe,OAAEgD,GACxBD,EAAOO,kBAGP,GADAP,EAAOhD,eAAejF,KAAKkI,GACvBD,EAAOhD,eAAe5E,OAAS4H,EAAOjE,qBAAsB,CAC9D,IAAIsE,EAAML,EAAOhD,eAAewD,QAChCR,EAAO/C,OAAe,OAAEoD,GACxBL,EAAOO,YACT,CAEJ,CArBA,CAsBF,EAoBF,EACAxC,EAAO0C,OAAS,SAAgBhC,GAC9B,IAAIxD,EAASQ,KAAKuC,YAKlB,OAJezD,EAAYmG,KAAKzF,EAAQwD,EAAUhD,KAAK2B,eAKzD,EACAW,EAAO4C,OAAS,SAAgBC,EAAiBC,GAC/C,IAAIC,EAASrF,KACTgB,EAAMhB,KAAKe,MACJ,MAAPC,GACFA,EAAI,CACFlE,KAAM,qBACNqI,gBAAiBA,IAGrBnF,KAAKI,sBACmB,IAApBgF,IACFpF,KAAKW,yBAA2BX,KAAKI,oBAEnC5B,EAAkB8G,wBACpBtF,KAAK2B,eAAe4D,kBAAkBvF,KAAK8B,mBAE7C,IAAItC,EAASQ,KAAKuC,YACdiD,EAAgB,GAepB,GAdAxF,KAAK6B,oBAAoB4D,oBAAoBjG,EAAQQ,KAAK8B,kBAAmB0D,EAAeL,GAC5FnF,KAAKY,2BAA2BjG,SAAQ,SAAU+K,GAChDL,EAAOM,gCAAgCD,GAAkC,IAApBN,EACvD,IACW,MAAPpE,GACFA,EAAI,CACFlE,KAAM,wBACNqI,gBAAiBA,EACjBS,iBAAkB5F,KAAK8B,kBACvB+D,qBAAsB7F,KAAKc,wBAG/Bd,KAAK8B,kBAAkBgE,QACvB9F,KAAKc,sBAAsBgF,QACJ,MAAnBX,EAAyB,CAC3B,IAAIX,EAAKW,EAAgB9B,QAAQC,WAC7BH,EAAYnD,KAAKwB,OAAO4B,IAAIoB,GAChC,GAAiB,MAAbrB,EACFA,EAAUK,MAAQxD,KAAKI,mBACvB+C,EAAUgB,UAAYF,KAAKC,WACtB,GAA0D,UAAtDiB,EAAgB9B,QAAQ0C,KAAKC,OAAOC,eAA6BjG,KAAKM,qBAAuB,GAAKN,KAAKuB,eAAe5E,OAASqD,KAAKM,qBAAsB,CACnK,IAAI4F,EAAqB,CACvBvD,UAAWwC,EACXT,SAAU,EACVlB,MAAOxD,KAAKI,mBACZ+D,UAAWF,KAAKC,OAElBlE,KAAKuB,eAAejF,KAAKkI,GACzBxE,KAAKwB,OAAOY,IAAIoC,EAAI0B,EACtB,CACF,CACA,OAAOV,CACT,EACAlD,EAAO6D,QAAU,SAAiB3G,EAAQ4G,GACxC,IAAInE,EAASjC,KAAK4B,2BA4MtB,SAAgCK,EAAQzC,EAAQ6G,EAAmBD,EAA0BR,EAAkBC,GACzGO,GACFA,EAAyBzL,SAAQ,SAAU2L,GACzC,IAKIC,EALAC,EAAevE,EAAOmB,IAAIkD,GAC1BG,EAAejH,EAAO4D,IAAIkD,GACT,OAAjBG,IAKFF,EADkB,MAAhBC,EACW5H,EAAkB8H,MAAMF,GAER,MAAhBC,EAAuB7H,EAAkB8H,MAAMD,GAAgB,QAK9E7H,EAAkB+H,SAASJ,EAAYtH,EAAgB2H,mBAAoBP,GAC3ER,EAAqBgB,IAAIP,GACzBrE,EAAOG,IAAIkE,EAAQC,GACrB,IAGF,IADA,IAAIO,EAAUtH,EAAOuH,eACZC,EAAK,EAAGA,EAAKF,EAAQnK,OAAQqK,IAAM,CAC1C,IAAIV,EAASQ,EAAQE,GACjBP,EAAejH,EAAO4D,IAAIkD,GAC1BE,EAAevE,EAAOmB,IAAIkD,GAM9B,GAAIG,GAAgBD,EAAc,CAChC,IAAID,EAAa3H,EAAkBqI,OAAOT,EAAcC,GACpDF,IAAeC,IAIjBZ,EAAiBiB,IAAIP,GACrBrE,EAAOG,IAAIkE,EAAQC,GAEvB,MAA4B,OAAjBE,GACTxE,EAAe,OAAEqE,GACI,OAAjBE,GACFZ,EAAiBiB,IAAIP,IAEdG,IACTxE,EAAOG,IAAIkE,EAAQG,GACnBb,EAAiBiB,IAAIP,GAEzB,CACF,CA9PIY,CAAuBjF,EAAQzC,EAAQQ,KAAKI,mBAAqB,EAAGgG,EAA0BpG,KAAK8B,kBAAmB9B,KAAKc,uBAC3H,IAAIE,EAAMhB,KAAKe,MACJ,MAAPC,GACFA,EAAI,CACFlE,KAAM,gBACN0C,OAAQA,EACR2H,WAAYlF,IAAWjC,KAAKqB,mBAGlC,EACAiB,EAAO8E,UAAY,SAAmBC,EAAUC,GAC9C,OAAOtH,KAAK6B,oBAAoBuF,UAAUC,EAAUC,EACtD,EACAhF,EAAOiF,OAAS,WACd,IAAIC,EAASxH,KAeb,OAdIA,KAAKC,SACPD,KAAKC,OAAS,KACdD,KAAK0B,mBAAoB,GAE3B1B,KAAKK,iBAUE,CACLwE,QAVY,WACR2C,EAAOnH,eAAiB,IAC1BmH,EAAOnH,iBACuB,IAA1BmH,EAAOnH,gBAAwBmH,EAAO9F,oBACxC8F,EAAO1C,aACP0C,EAAO9F,mBAAoB,GAGjC,EAIF,EACAY,EAAOmF,OAAS,WACd,MAAO,oBACT,EACAnF,EAAOoF,SAAW,WAChB,OAAO1H,KAAKI,kBACd,EACAkC,EAAOqF,sBAAwB,WAC7B,OAAO3H,KAAK8B,iBACd,EACAQ,EAAOsF,wBAA0B,SAAiCd,GAChE,IAAIe,EAAS7H,KACT8H,EAAgB,IAAIrG,IAOxB,OANAqF,EAAQnM,SAAQ,SAAU2L,GACxB,IAAIyB,EACAC,EAASH,EAAOtF,YAAYa,IAAIkD,GACpCwB,EAAc1F,IAAIkE,EAAqF,QAA5EyB,EAAwBnJ,EAAkBqJ,qBAAqBD,UAA+C,IAA1BD,EAAmCA,EAAwB,KAC5K,IACAD,EAAc1F,IAAI,SAAUpC,KAAKW,0BAC1B,CACLmG,QAASA,EACTgB,cAAeA,EAEnB,EACAxF,EAAO4F,uBAAyB,SAAgCC,GAC9D,IACIC,EAD0BpI,KAAK4H,wBAAwBO,EAAsBrB,SAC9BgB,cAC/CO,EAAoBF,EAAsBL,cAC9C,GAAIM,EAAqBhF,IAAI,YAAciF,EAAkBjF,IAAI,UAC/D,OAAO,EAET,IACEkF,EADEC,GAAY,EAAIpK,EAAqC,SAAGgK,EAAsBrB,SAElF,IACE,IAAKyB,EAAUvO,MAAOsO,EAAQC,EAAUjQ,KAAK8C,MAAO,CAClD,IAAIkL,EAASgC,EAAM7P,MACnB,GAAI2P,EAAqBhF,IAAIkD,KAAY+B,EAAkBjF,IAAIkD,GAC7D,OAAO,CAEX,CACF,CAAE,MAAOkC,GACPD,EAAUrQ,EAAEsQ,EACd,CAAE,QACAD,EAAUxO,GACZ,CACA,OAAO,CACT,EACAuI,EAAOmG,6BAA+B,SAAsCC,EAAmBpB,GAC7F,IAAIqB,EAAS3I,KACT0F,EAAe,CACjB4B,SAAUA,EACVoB,kBAAmBA,GAMrB,OADA1I,KAAKY,2BAA2BiG,IAAInB,GAC7B,CACLb,QALY,WACZ8D,EAAO/H,2BAAmC,OAAE8E,EAC9C,EAKF,EACApD,EAAOqD,gCAAkC,SAAyCD,EAAckD,GAC9F,IAAIC,EAAS7I,KACTsH,EAAW5B,EAAa4B,SAExBR,EADkBpB,EAAagD,kBACH5B,SACG8B,GAAoB9B,EAAQgC,MAAK,SAAUxC,GAC5E,OAAOuC,EAAO/H,sBAAsBoB,IAAIoE,EAC1C,MAIAgB,GACF,EACAhF,EAAO+E,SAAW,WACY,MAA1BrH,KAAKqB,mBAAkL/B,GAAU,GACnM,IAAI0B,EAAMhB,KAAKe,MACJ,MAAPC,GACFA,EAAI,CACFlE,KAAM,mBAGVkD,KAAK6B,oBAAoBkH,sBAAsB/I,KAAKuC,aAChDvC,KAAKC,SACPD,KAAKC,OAAS,KACdD,KAAK0B,mBAAoB,GAE3B1B,KAAKqB,kBAAoBxC,EAA4BvF,OAAO0G,KAAKuC,YACnE,EACAD,EAAO0G,QAAU,WACa,MAA1BhJ,KAAKqB,mBAA6M/B,GAAU,GAC9N,IAAI0B,EAAMhB,KAAKe,MACJ,MAAPC,GACFA,EAAI,CACFlE,KAAM,kBAGVkD,KAAKqB,kBAAoB,KACrBrB,KAAK0B,mBACP1B,KAAK8E,aAEP9E,KAAK6B,oBAAoBoH,sBAC3B,EACA3G,EAAOwC,WAAa,WACd9E,KAAKK,eAAiB,EACxBL,KAAK0B,mBAAoB,EAGvB1B,KAAKC,SAGTD,KAAKC,OAASD,KAAKkJ,WACnBlJ,KAAKE,aAAaF,KAAKG,SACzB,EACAmC,EAAO6G,KAAO,WACZ,GAA8B,MAA1BnJ,KAAKqB,kBAIT,IADA,IAAI+H,EAAQpJ,KAAKkJ,YACTE,EAAMtN,OAAOV,OACvB,EACAkH,EAAO4G,SAAQjR,IAAA8E,MAAG,SAAUmM,IAAQ,IAAAG,EAAAC,EAAAC,EAAAC,EAAA7G,EAAAK,EAAAhC,EAAAyI,EAAAzC,EAAAV,EAAA,OAAArO,IAAAmB,MAAC,SAADsQ,GAAA,cAAAA,EAAAlM,KAAAkM,EAAA5N,MAAA,OAE5BuN,EAAarJ,KAAKI,mBAClBkJ,EAAa,IAAIzI,IACjB0I,GAAa,EAAIpL,EAAqC,SAAG6B,KAAKwB,OAAOhH,UAASkP,EAAAlM,KAAA,EAG3E+L,EAAWvP,IAAG,WAAIwP,EAASD,EAAWjR,KAAK8C,KAAI,CAAAsO,EAAA5N,KAAA,SAIlD,OAHI6G,EAAY6G,EAAO/Q,MAAMkK,UACzBK,EAAWL,EAAUM,KACzBlE,EAAqBhC,KAAKiD,KAAKsB,cAAe0B,EAAUsG,EAAYtJ,KAAKmB,iBAAkBnB,KAAK+B,qCAAgC2H,EAAA5N,KAAA,IAC3H,WACDuN,IAAerJ,KAAKI,mBAAkB,CAAAsJ,EAAA5N,KAAA,gBAAA4N,EAAA/N,OAAA,sBAAA+N,EAAA5N,KAAA,gBAAA4N,EAAA5N,KAAA,iBAAA4N,EAAAlM,KAAA,GAAAkM,EAAAC,GAAAD,EAAA,SAK5CH,EAAWrR,EAACwR,EAAAC,IAAM,QAEH,OAFGD,EAAAlM,KAAA,GAElB+L,EAAWxP,IAAI2P,EAAA3L,OAAA,YASjB,GANW,OADPiD,EAAMhB,KAAKe,QAEbC,EAAI,CACFlE,KAAM,WACNwM,WAAYA,IAGQ,IAApBA,EAAWM,KACb5J,KAAKsB,cAAcwE,aAGnB,IADI2D,EAAWzJ,KAAKsB,cAAcyF,eACzBC,EAAK,EAAGA,EAAKyC,EAAS9M,OAAQqK,IACjCV,EAASmD,EAASzC,GACjBsC,EAAWpH,IAAIoE,IAClBtG,KAAKsB,cAAcuI,OAAOvD,GAG/B,OAAAoD,EAAA/N,OAAA,mCAAA+N,EAAA/L,OAAA,GAtCuBuL,EAAQ,wBA0C7B3J,CACT,CArYoC,GA4dpCuK,EAAOC,QAAUxK","sources":["webpack://@aztlan/template-react/../../node_modules/relay-runtime/lib/store/RelayModernStore.js"],"sourcesContent":["'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\")[\"default\"];\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _require = require('../multi-actor-environment/ActorIdentifier'),\n  INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE = _require.INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE,\n  assertInternalActorIdentifier = _require.assertInternalActorIdentifier;\nvar deepFreeze = require('../util/deepFreeze');\nvar RelayFeatureFlags = require('../util/RelayFeatureFlags');\nvar resolveImmediate = require('../util/resolveImmediate');\nvar DataChecker = require('./DataChecker');\nvar defaultGetDataID = require('./defaultGetDataID');\nvar RelayModernRecord = require('./RelayModernRecord');\nvar RelayOptimisticRecordSource = require('./RelayOptimisticRecordSource');\nvar RelayReader = require('./RelayReader');\nvar RelayReferenceMarker = require('./RelayReferenceMarker');\nvar RelayStoreSubscriptions = require('./RelayStoreSubscriptions');\nvar RelayStoreUtils = require('./RelayStoreUtils');\nvar _require2 = require('./RelayStoreUtils'),\n  ROOT_ID = _require2.ROOT_ID,\n  ROOT_TYPE = _require2.ROOT_TYPE;\nvar _require3 = require('./ResolverCache'),\n  RecordResolverCache = _require3.RecordResolverCache;\nvar invariant = require('invariant');\nvar DEFAULT_RELEASE_BUFFER_SIZE = 10;\nvar RelayModernStore = /*#__PURE__*/function () {\n  function RelayModernStore(source, options) {\n    var _this = this;\n    var _options$gcReleaseBuf, _options$gcScheduler, _options$getDataID, _options$log, _options$operationLoa;\n    (0, _defineProperty2[\"default\"])(this, \"_gcStep\", function () {\n      if (_this._gcRun) {\n        if (_this._gcRun.next().done) {\n          _this._gcRun = null;\n        } else {\n          _this._gcScheduler(_this._gcStep);\n        }\n      }\n    });\n    if (process.env.NODE_ENV !== \"production\") {\n      var storeIDs = source.getRecordIDs();\n      for (var ii = 0; ii < storeIDs.length; ii++) {\n        var record = source.get(storeIDs[ii]);\n        if (record) {\n          RelayModernRecord.freeze(record);\n        }\n      }\n    }\n    this._currentWriteEpoch = 0;\n    this._gcHoldCounter = 0;\n    this._gcReleaseBufferSize = (_options$gcReleaseBuf = options === null || options === void 0 ? void 0 : options.gcReleaseBufferSize) !== null && _options$gcReleaseBuf !== void 0 ? _options$gcReleaseBuf : DEFAULT_RELEASE_BUFFER_SIZE;\n    this._gcRun = null;\n    this._gcScheduler = (_options$gcScheduler = options === null || options === void 0 ? void 0 : options.gcScheduler) !== null && _options$gcScheduler !== void 0 ? _options$gcScheduler : resolveImmediate;\n    this._getDataID = (_options$getDataID = options === null || options === void 0 ? void 0 : options.getDataID) !== null && _options$getDataID !== void 0 ? _options$getDataID : defaultGetDataID;\n    this._globalInvalidationEpoch = null;\n    this._invalidationSubscriptions = new Set();\n    this._invalidatedRecordIDs = new Set();\n    this.__log = (_options$log = options === null || options === void 0 ? void 0 : options.log) !== null && _options$log !== void 0 ? _options$log : null;\n    this._queryCacheExpirationTime = options === null || options === void 0 ? void 0 : options.queryCacheExpirationTime;\n    this._operationLoader = (_options$operationLoa = options === null || options === void 0 ? void 0 : options.operationLoader) !== null && _options$operationLoa !== void 0 ? _options$operationLoa : null;\n    this._optimisticSource = null;\n    this._recordSource = source;\n    this._releaseBuffer = [];\n    this._roots = new Map();\n    this._shouldScheduleGC = false;\n    this._resolverCache = new RecordResolverCache(function () {\n      return _this._getMutableRecordSource();\n    });\n    this._storeSubscriptions = new RelayStoreSubscriptions(options === null || options === void 0 ? void 0 : options.log, this._resolverCache);\n    this._updatedRecordIDs = new Set();\n    this._shouldProcessClientComponents = options === null || options === void 0 ? void 0 : options.shouldProcessClientComponents;\n    initializeRecordSource(this._recordSource);\n  }\n  var _proto = RelayModernStore.prototype;\n  _proto.getSource = function getSource() {\n    var _this$_optimisticSour;\n    return (_this$_optimisticSour = this._optimisticSource) !== null && _this$_optimisticSour !== void 0 ? _this$_optimisticSour : this._recordSource;\n  };\n  _proto._getMutableRecordSource = function _getMutableRecordSource() {\n    var _this$_optimisticSour2;\n    return (_this$_optimisticSour2 = this._optimisticSource) !== null && _this$_optimisticSour2 !== void 0 ? _this$_optimisticSour2 : this._recordSource;\n  };\n  _proto.check = function check(operation, options) {\n    var _options$handlers, _options$getSourceFor, _options$getTargetFor, _options$defaultActor;\n    var selector = operation.root;\n    var source = this._getMutableRecordSource();\n    var globalInvalidationEpoch = this._globalInvalidationEpoch;\n    var rootEntry = this._roots.get(operation.request.identifier);\n    var operationLastWrittenAt = rootEntry != null ? rootEntry.epoch : null;\n    if (globalInvalidationEpoch != null) {\n      if (operationLastWrittenAt == null || operationLastWrittenAt <= globalInvalidationEpoch) {\n        return {\n          status: 'stale'\n        };\n      }\n    }\n    var handlers = (_options$handlers = options === null || options === void 0 ? void 0 : options.handlers) !== null && _options$handlers !== void 0 ? _options$handlers : [];\n    var getSourceForActor = (_options$getSourceFor = options === null || options === void 0 ? void 0 : options.getSourceForActor) !== null && _options$getSourceFor !== void 0 ? _options$getSourceFor : function (actorIdentifier) {\n      assertInternalActorIdentifier(actorIdentifier);\n      return source;\n    };\n    var getTargetForActor = (_options$getTargetFor = options === null || options === void 0 ? void 0 : options.getTargetForActor) !== null && _options$getTargetFor !== void 0 ? _options$getTargetFor : function (actorIdentifier) {\n      assertInternalActorIdentifier(actorIdentifier);\n      return source;\n    };\n    var operationAvailability = DataChecker.check(getSourceForActor, getTargetForActor, (_options$defaultActor = options === null || options === void 0 ? void 0 : options.defaultActorIdentifier) !== null && _options$defaultActor !== void 0 ? _options$defaultActor : INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE, selector, handlers, this._operationLoader, this._getDataID, this._shouldProcessClientComponents);\n    return getAvailabilityStatus(operationAvailability, operationLastWrittenAt, rootEntry === null || rootEntry === void 0 ? void 0 : rootEntry.fetchTime, this._queryCacheExpirationTime);\n  };\n  _proto.retain = function retain(operation) {\n    var _this2 = this;\n    var id = operation.request.identifier;\n    var disposed = false;\n    var dispose = function dispose() {\n      if (disposed) {\n        return;\n      }\n      disposed = true;\n      var rootEntry = _this2._roots.get(id);\n      if (rootEntry == null) {\n        return;\n      }\n      rootEntry.refCount--;\n      if (rootEntry.refCount === 0) {\n        var _queryCacheExpirationTime = _this2._queryCacheExpirationTime;\n        var rootEntryIsStale = rootEntry.fetchTime != null && _queryCacheExpirationTime != null && rootEntry.fetchTime <= Date.now() - _queryCacheExpirationTime;\n        if (rootEntryIsStale) {\n          _this2._roots[\"delete\"](id);\n          _this2.scheduleGC();\n        } else {\n          _this2._releaseBuffer.push(id);\n          if (_this2._releaseBuffer.length > _this2._gcReleaseBufferSize) {\n            var _id = _this2._releaseBuffer.shift();\n            _this2._roots[\"delete\"](_id);\n            _this2.scheduleGC();\n          }\n        }\n      }\n    };\n    var rootEntry = this._roots.get(id);\n    if (rootEntry != null) {\n      if (rootEntry.refCount === 0) {\n        this._releaseBuffer = this._releaseBuffer.filter(function (_id) {\n          return _id !== id;\n        });\n      }\n      rootEntry.refCount += 1;\n    } else {\n      this._roots.set(id, {\n        operation: operation,\n        refCount: 1,\n        epoch: null,\n        fetchTime: null\n      });\n    }\n    return {\n      dispose: dispose\n    };\n  };\n  _proto.lookup = function lookup(selector) {\n    var source = this.getSource();\n    var snapshot = RelayReader.read(source, selector, this._resolverCache);\n    if (process.env.NODE_ENV !== \"production\") {\n      deepFreeze(snapshot);\n    }\n    return snapshot;\n  };\n  _proto.notify = function notify(sourceOperation, invalidateStore) {\n    var _this3 = this;\n    var log = this.__log;\n    if (log != null) {\n      log({\n        name: 'store.notify.start',\n        sourceOperation: sourceOperation\n      });\n    }\n    this._currentWriteEpoch++;\n    if (invalidateStore === true) {\n      this._globalInvalidationEpoch = this._currentWriteEpoch;\n    }\n    if (RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {\n      this._resolverCache.invalidateDataIDs(this._updatedRecordIDs);\n    }\n    var source = this.getSource();\n    var updatedOwners = [];\n    this._storeSubscriptions.updateSubscriptions(source, this._updatedRecordIDs, updatedOwners, sourceOperation);\n    this._invalidationSubscriptions.forEach(function (subscription) {\n      _this3._updateInvalidationSubscription(subscription, invalidateStore === true);\n    });\n    if (log != null) {\n      log({\n        name: 'store.notify.complete',\n        sourceOperation: sourceOperation,\n        updatedRecordIDs: this._updatedRecordIDs,\n        invalidatedRecordIDs: this._invalidatedRecordIDs\n      });\n    }\n    this._updatedRecordIDs.clear();\n    this._invalidatedRecordIDs.clear();\n    if (sourceOperation != null) {\n      var id = sourceOperation.request.identifier;\n      var rootEntry = this._roots.get(id);\n      if (rootEntry != null) {\n        rootEntry.epoch = this._currentWriteEpoch;\n        rootEntry.fetchTime = Date.now();\n      } else if (sourceOperation.request.node.params.operationKind === 'query' && this._gcReleaseBufferSize > 0 && this._releaseBuffer.length < this._gcReleaseBufferSize) {\n        var temporaryRootEntry = {\n          operation: sourceOperation,\n          refCount: 0,\n          epoch: this._currentWriteEpoch,\n          fetchTime: Date.now()\n        };\n        this._releaseBuffer.push(id);\n        this._roots.set(id, temporaryRootEntry);\n      }\n    }\n    return updatedOwners;\n  };\n  _proto.publish = function publish(source, idsMarkedForInvalidation) {\n    var target = this._getMutableRecordSource();\n    updateTargetFromSource(target, source, this._currentWriteEpoch + 1, idsMarkedForInvalidation, this._updatedRecordIDs, this._invalidatedRecordIDs);\n    var log = this.__log;\n    if (log != null) {\n      log({\n        name: 'store.publish',\n        source: source,\n        optimistic: target === this._optimisticSource\n      });\n    }\n  };\n  _proto.subscribe = function subscribe(snapshot, callback) {\n    return this._storeSubscriptions.subscribe(snapshot, callback);\n  };\n  _proto.holdGC = function holdGC() {\n    var _this4 = this;\n    if (this._gcRun) {\n      this._gcRun = null;\n      this._shouldScheduleGC = true;\n    }\n    this._gcHoldCounter++;\n    var dispose = function dispose() {\n      if (_this4._gcHoldCounter > 0) {\n        _this4._gcHoldCounter--;\n        if (_this4._gcHoldCounter === 0 && _this4._shouldScheduleGC) {\n          _this4.scheduleGC();\n          _this4._shouldScheduleGC = false;\n        }\n      }\n    };\n    return {\n      dispose: dispose\n    };\n  };\n  _proto.toJSON = function toJSON() {\n    return 'RelayModernStore()';\n  };\n  _proto.getEpoch = function getEpoch() {\n    return this._currentWriteEpoch;\n  };\n  _proto.__getUpdatedRecordIDs = function __getUpdatedRecordIDs() {\n    return this._updatedRecordIDs;\n  };\n  _proto.lookupInvalidationState = function lookupInvalidationState(dataIDs) {\n    var _this5 = this;\n    var invalidations = new Map();\n    dataIDs.forEach(function (dataID) {\n      var _RelayModernRecord$ge;\n      var record = _this5.getSource().get(dataID);\n      invalidations.set(dataID, (_RelayModernRecord$ge = RelayModernRecord.getInvalidationEpoch(record)) !== null && _RelayModernRecord$ge !== void 0 ? _RelayModernRecord$ge : null);\n    });\n    invalidations.set('global', this._globalInvalidationEpoch);\n    return {\n      dataIDs: dataIDs,\n      invalidations: invalidations\n    };\n  };\n  _proto.checkInvalidationState = function checkInvalidationState(prevInvalidationState) {\n    var latestInvalidationState = this.lookupInvalidationState(prevInvalidationState.dataIDs);\n    var currentInvalidations = latestInvalidationState.invalidations;\n    var prevInvalidations = prevInvalidationState.invalidations;\n    if (currentInvalidations.get('global') !== prevInvalidations.get('global')) {\n      return true;\n    }\n    var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(prevInvalidationState.dataIDs),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var dataID = _step.value;\n        if (currentInvalidations.get(dataID) !== prevInvalidations.get(dataID)) {\n          return true;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return false;\n  };\n  _proto.subscribeToInvalidationState = function subscribeToInvalidationState(invalidationState, callback) {\n    var _this6 = this;\n    var subscription = {\n      callback: callback,\n      invalidationState: invalidationState\n    };\n    var dispose = function dispose() {\n      _this6._invalidationSubscriptions[\"delete\"](subscription);\n    };\n    this._invalidationSubscriptions.add(subscription);\n    return {\n      dispose: dispose\n    };\n  };\n  _proto._updateInvalidationSubscription = function _updateInvalidationSubscription(subscription, invalidatedStore) {\n    var _this7 = this;\n    var callback = subscription.callback,\n      invalidationState = subscription.invalidationState;\n    var dataIDs = invalidationState.dataIDs;\n    var isSubscribedToInvalidatedIDs = invalidatedStore || dataIDs.some(function (dataID) {\n      return _this7._invalidatedRecordIDs.has(dataID);\n    });\n    if (!isSubscribedToInvalidatedIDs) {\n      return;\n    }\n    callback();\n  };\n  _proto.snapshot = function snapshot() {\n    !(this._optimisticSource == null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernStore: Unexpected call to snapshot() while a previous ' + 'snapshot exists.') : invariant(false) : void 0;\n    var log = this.__log;\n    if (log != null) {\n      log({\n        name: 'store.snapshot'\n      });\n    }\n    this._storeSubscriptions.snapshotSubscriptions(this.getSource());\n    if (this._gcRun) {\n      this._gcRun = null;\n      this._shouldScheduleGC = true;\n    }\n    this._optimisticSource = RelayOptimisticRecordSource.create(this.getSource());\n  };\n  _proto.restore = function restore() {\n    !(this._optimisticSource != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernStore: Unexpected call to restore(), expected a snapshot ' + 'to exist (make sure to call snapshot()).') : invariant(false) : void 0;\n    var log = this.__log;\n    if (log != null) {\n      log({\n        name: 'store.restore'\n      });\n    }\n    this._optimisticSource = null;\n    if (this._shouldScheduleGC) {\n      this.scheduleGC();\n    }\n    this._storeSubscriptions.restoreSubscriptions();\n  };\n  _proto.scheduleGC = function scheduleGC() {\n    if (this._gcHoldCounter > 0) {\n      this._shouldScheduleGC = true;\n      return;\n    }\n    if (this._gcRun) {\n      return;\n    }\n    this._gcRun = this._collect();\n    this._gcScheduler(this._gcStep);\n  };\n  _proto.__gc = function __gc() {\n    if (this._optimisticSource != null) {\n      return;\n    }\n    var gcRun = this._collect();\n    while (!gcRun.next().done) {}\n  };\n  _proto._collect = function* _collect() {\n    top: while (true) {\n      var startEpoch = this._currentWriteEpoch;\n      var references = new Set();\n      var _iterator2 = (0, _createForOfIteratorHelper2[\"default\"])(this._roots.values()),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var operation = _step2.value.operation;\n          var selector = operation.root;\n          RelayReferenceMarker.mark(this._recordSource, selector, references, this._operationLoader, this._shouldProcessClientComponents);\n          yield;\n          if (startEpoch !== this._currentWriteEpoch) {\n            continue top;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      var log = this.__log;\n      if (log != null) {\n        log({\n          name: 'store.gc',\n          references: references\n        });\n      }\n      if (references.size === 0) {\n        this._recordSource.clear();\n      } else {\n        var storeIDs = this._recordSource.getRecordIDs();\n        for (var ii = 0; ii < storeIDs.length; ii++) {\n          var dataID = storeIDs[ii];\n          if (!references.has(dataID)) {\n            this._recordSource.remove(dataID);\n          }\n        }\n      }\n      return;\n    }\n  };\n  return RelayModernStore;\n}();\nfunction initializeRecordSource(target) {\n  if (!target.has(ROOT_ID)) {\n    var rootRecord = RelayModernRecord.create(ROOT_ID, ROOT_TYPE);\n    target.set(ROOT_ID, rootRecord);\n  }\n}\nfunction updateTargetFromSource(target, source, currentWriteEpoch, idsMarkedForInvalidation, updatedRecordIDs, invalidatedRecordIDs) {\n  if (idsMarkedForInvalidation) {\n    idsMarkedForInvalidation.forEach(function (dataID) {\n      var targetRecord = target.get(dataID);\n      var sourceRecord = source.get(dataID);\n      if (sourceRecord === null) {\n        return;\n      }\n      var nextRecord;\n      if (targetRecord != null) {\n        nextRecord = RelayModernRecord.clone(targetRecord);\n      } else {\n        nextRecord = sourceRecord != null ? RelayModernRecord.clone(sourceRecord) : null;\n      }\n      if (!nextRecord) {\n        return;\n      }\n      RelayModernRecord.setValue(nextRecord, RelayStoreUtils.INVALIDATED_AT_KEY, currentWriteEpoch);\n      invalidatedRecordIDs.add(dataID);\n      target.set(dataID, nextRecord);\n    });\n  }\n  var dataIDs = source.getRecordIDs();\n  for (var ii = 0; ii < dataIDs.length; ii++) {\n    var dataID = dataIDs[ii];\n    var sourceRecord = source.get(dataID);\n    var targetRecord = target.get(dataID);\n    if (process.env.NODE_ENV !== \"production\") {\n      if (sourceRecord) {\n        RelayModernRecord.freeze(sourceRecord);\n      }\n    }\n    if (sourceRecord && targetRecord) {\n      var nextRecord = RelayModernRecord.update(targetRecord, sourceRecord);\n      if (nextRecord !== targetRecord) {\n        if (process.env.NODE_ENV !== \"production\") {\n          RelayModernRecord.freeze(nextRecord);\n        }\n        updatedRecordIDs.add(dataID);\n        target.set(dataID, nextRecord);\n      }\n    } else if (sourceRecord === null) {\n      target[\"delete\"](dataID);\n      if (targetRecord !== null) {\n        updatedRecordIDs.add(dataID);\n      }\n    } else if (sourceRecord) {\n      target.set(dataID, sourceRecord);\n      updatedRecordIDs.add(dataID);\n    }\n  }\n}\nfunction getAvailabilityStatus(operationAvailability, operationLastWrittenAt, operationFetchTime, queryCacheExpirationTime) {\n  var mostRecentlyInvalidatedAt = operationAvailability.mostRecentlyInvalidatedAt,\n    status = operationAvailability.status;\n  if (typeof mostRecentlyInvalidatedAt === 'number') {\n    if (operationLastWrittenAt == null || mostRecentlyInvalidatedAt > operationLastWrittenAt) {\n      return {\n        status: 'stale'\n      };\n    }\n  }\n  if (status === 'missing') {\n    return {\n      status: 'missing'\n    };\n  }\n  if (operationFetchTime != null && queryCacheExpirationTime != null) {\n    var isStale = operationFetchTime <= Date.now() - queryCacheExpirationTime;\n    if (isStale) {\n      return {\n        status: 'stale'\n      };\n    }\n  }\n  return {\n    status: 'available',\n    fetchTime: operationFetchTime !== null && operationFetchTime !== void 0 ? operationFetchTime : null\n  };\n}\nmodule.exports = RelayModernStore;"],"names":["_typeof","o","Symbol","iterator","constructor","prototype","_regeneratorRuntime","e","t","r","Object","n","hasOwnProperty","defineProperty","value","i","a","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","_interopRequireDefault","require","_createForOfIteratorHelper2","_defineProperty2","_require","INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE","assertInternalActorIdentifier","RelayFeatureFlags","resolveImmediate","DataChecker","defaultGetDataID","RelayModernRecord","RelayOptimisticRecordSource","RelayReader","RelayReferenceMarker","RelayStoreSubscriptions","RelayStoreUtils","_require2","ROOT_ID","ROOT_TYPE","RecordResolverCache","invariant","RelayModernStore","source","options","_options$gcReleaseBuf","_options$gcScheduler","_options$getDataID","_options$log","_options$operationLoa","_this","this","_gcRun","_gcScheduler","_gcStep","_currentWriteEpoch","_gcHoldCounter","_gcReleaseBufferSize","gcReleaseBufferSize","gcScheduler","_getDataID","getDataID","_globalInvalidationEpoch","_invalidationSubscriptions","Set","_invalidatedRecordIDs","__log","log","_queryCacheExpirationTime","queryCacheExpirationTime","_operationLoader","operationLoader","_optimisticSource","_recordSource","_releaseBuffer","_roots","Map","_shouldScheduleGC","_resolverCache","_getMutableRecordSource","_storeSubscriptions","_updatedRecordIDs","_shouldProcessClientComponents","shouldProcessClientComponents","target","has","rootRecord","set","initializeRecordSource","_proto","getSource","_this$_optimisticSour","_this$_optimisticSour2","check","operation","_options$handlers","_options$getSourceFor","_options$getTargetFor","_options$defaultActor","selector","root","globalInvalidationEpoch","rootEntry","get","request","identifier","operationLastWrittenAt","epoch","status","handlers","getSourceForActor","actorIdentifier","getTargetForActor","operationAvailability","operationFetchTime","mostRecentlyInvalidatedAt","Date","now","fetchTime","getAvailabilityStatus","defaultActorIdentifier","retain","_this2","id","disposed","refCount","filter","_id","dispose","scheduleGC","shift","lookup","read","notify","sourceOperation","invalidateStore","_this3","ENABLE_RELAY_RESOLVERS","invalidateDataIDs","updatedOwners","updateSubscriptions","subscription","_updateInvalidationSubscription","updatedRecordIDs","invalidatedRecordIDs","clear","node","params","operationKind","temporaryRootEntry","publish","idsMarkedForInvalidation","currentWriteEpoch","dataID","nextRecord","targetRecord","sourceRecord","clone","setValue","INVALIDATED_AT_KEY","add","dataIDs","getRecordIDs","ii","update","updateTargetFromSource","optimistic","subscribe","snapshot","callback","holdGC","_this4","toJSON","getEpoch","__getUpdatedRecordIDs","lookupInvalidationState","_this5","invalidations","_RelayModernRecord$ge","record","getInvalidationEpoch","checkInvalidationState","prevInvalidationState","currentInvalidations","prevInvalidations","_step","_iterator","err","subscribeToInvalidationState","invalidationState","_this6","invalidatedStore","_this7","some","snapshotSubscriptions","restore","restoreSubscriptions","_collect","__gc","gcRun","startEpoch","references","_iterator2","_step2","storeIDs","_context","t0","size","remove","module","exports"],"sourceRoot":""}