{"version":3,"file":"base.homepage.js?adfa2","mappings":"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","sources":["webpack://@aztlan/template-react/./src/modules/base.homepage/ui/QueryTester/__generated__/QueryTesterQuery.graphql.ts","webpack://@aztlan/template-react/./src/modules/base.homepage/ui/QueryTester/__generated__/QueryTesterFragment.graphql.ts","webpack://@aztlan/template-react/./src/modules/base.homepage/ui/QueryTester/QueryTester.tsx","webpack://@aztlan/template-react/./src/modules/base.homepage/pages/Home.tsx","webpack://@aztlan/template-react/./src/modules/base.test/pages/__generated__/FormTestFruits2Query.graphql.ts","webpack://@aztlan/template-react/./src/modules/base.test/pages/__generated__/FormTestFruitsQuery.graphql.ts","webpack://@aztlan/template-react/./src/modules/base.test/pages/__generated__/FormTestValidationQuery.graphql.ts","webpack://@aztlan/template-react/./src/modules/base.test/pages/FormTest.tsx"],"sourcesContent":["/**\n * @generated SignedSource<<76d71db0352e4f1ed58b4699c47864ae>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type QueryTesterQuery$variables = Record<PropertyKey, never>;\nexport type QueryTesterQuery$data = {\n  readonly \" $fragmentSpreads\": FragmentRefs<\"QueryTesterFragment\">;\n};\nexport type QueryTesterQuery = {\n  response: QueryTesterQuery$data;\n  variables: QueryTesterQuery$variables;\n};\n\nconst node: ConcreteRequest = {\n  \"fragment\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"QueryTesterQuery\",\n    \"selections\": [\n      {\n        \"args\": null,\n        \"kind\": \"FragmentSpread\",\n        \"name\": \"QueryTesterFragment\"\n      }\n    ],\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Operation\",\n    \"name\": \"QueryTesterQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"time\",\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"cb2c901c92e521a25b2ac76857b5e322\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"QueryTesterQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query QueryTesterQuery {\\n  ...QueryTesterFragment\\n}\\n\\nfragment QueryTesterFragment on Query {\\n  time\\n}\\n\"\n  }\n};\n\n(node as any).hash = \"920e8fa8275613b7ca9be05c137e7fbf\";\n\nexport default node;\n","/**\n * @generated SignedSource<<8371248ec54f98c9e1e4120f2ecd0cf8>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { Fragment, ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type QueryTesterFragment$data = {\n  readonly time: any | null | undefined;\n  readonly \" $fragmentType\": \"QueryTesterFragment\";\n};\nexport type QueryTesterFragment$key = {\n  readonly \" $data\"?: QueryTesterFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"QueryTesterFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"QueryTesterFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"time\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"Query\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"d1cdb0deb371cd84d96ec9c6169e1255\";\n\nexport default node;\n","/* @aztlan/generator-front 0.2.0 */\nimport * as React from 'react'\n\nimport { useInsertionEffect } from 'react'\n\nimport * as PropTypes from 'prop-types'\n\nimport styleNames from '@aztlan/bem'\n\nimport {\n  useFragment, useRelayEnvironment,\n} from 'react-relay'\n// import { Button } from '@aztlan/ui'\n\n// Local Definitions\n\nconst baseClassName = styleNames.base\n\nconst componentClassName = 'query-tester'\nconst FRAGMENT = graphql`\n  fragment QueryTesterFragment on Query {\n    time\n  }\n`\n\nconst QUERY = graphql`\n  query QueryTesterQuery {\n    ...QueryTesterFragment\n  }\n`\n\n/**\n * This is the component description.\n */\nfunction QueryTester({\n  id,\n  className: userClassName,\n  style,\n  children,\n  data,\n  // ...otherProps\n}) {\n  useInsertionEffect(\n    () => {\n    // @ts-ignore\n      import('./styles.scss')\n    }, [],\n  )\n\n  const { time } = useFragment(\n    FRAGMENT, data,\n  )\n\n  return (\n    <div\n      id={id}\n      className={[\n        'container',\n        baseClassName,\n        componentClassName,\n        userClassName,\n      ]\n        .filter((e) => e)\n        .join(' ')}\n      style={style}\n      // {...otherProps}\n    >\n      <p>\n        TIME IS\n        {' '}\n        {time}\n        {children}\n      </p>\n      {/*\n      <Button>Test</Button>\n      */}\n    </div>\n  )\n}\n\nQueryTester.propTypes = {\n  /** The HTML id for this element */\n  id:PropTypes.string,\n\n  /** The HTML class names for this element */\n  className:PropTypes.string,\n\n  /** The React-written, css properties for this element. */\n  style:PropTypes.objectOf(PropTypes.string),\n\n  /** The children JSX */\n  children:PropTypes.node,\n\n  /** The data for this component */\n  /* eslint-disable-next-line react/forbid-prop-types */\n  data:PropTypes.objectOf(PropTypes.any),\n}\n\nQueryTester.QUERY = QUERY\nQueryTester.FRAGMENT = FRAGMENT\n\nexport default QueryTester\n","/* @aztlan/generator-front 0.4.0 */\nimport * as React from 'react'\nimport { useLazyLoadQuery } from 'react-relay'\nimport {\n  defineMessages, useIntl,\n} from 'react-intl'\nimport { QueryTesterQuery } from '../ui/QueryTester/__generated__/QueryTesterQuery.graphql.ts'\nimport Template from '../../common/templates/Base.tsx'\nimport { QueryTester } from '../ui/index.ts'\n\nconst m = defineMessages({\n  title:{\n    // id: `${messagesPrefix}.title`,\n    defaultMessage:'Homepage',\n  },\n  welcome:{\n    description   :'Message to greet the user.',\n    defaultMessage:'Welcome to the site, {name}!!!',\n  },\n})\n\nfunction Home() {\n  const data = useLazyLoadQuery(\n    QueryTester.QUERY,\n    {},\n    { fetchPolicy: 'store-or-network' },\n  ) as QueryTesterQuery['response']\n\n  const { formatMessage } = useIntl()\n  return (\n    <Template title={formatMessage(m.title)}>\n      <React.Suspense fallback=\"Loading\">\n        <QueryTester data={data} />\n      </React.Suspense>\n      <p className=\"container\">\n        {formatMessage(\n          m.welcome, { name: 'pg4' },\n        )}\n      </p>\n    </Template>\n  )\n}\n\nexport default Home\n","/**\n * @generated SignedSource<<c13df7b453616463cc3ebbcd70d0f388>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nexport type FormTestFruits2Query$variables = Record<PropertyKey, never>;\nexport type FormTestFruits2Query$data = {\n  readonly fruits: ReadonlyArray<{\n    readonly disabled: boolean;\n    readonly label: string | null | undefined;\n    readonly value: string | null | undefined;\n  } | null | undefined> | null | undefined;\n};\nexport type FormTestFruits2Query = {\n  response: FormTestFruits2Query$data;\n  variables: FormTestFruits2Query$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"concreteType\": \"FruitType\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"fruits\",\n    \"plural\": true,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"value\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"label\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"disabled\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"FormTestFruits2Query\",\n    \"selections\": (v0/*: any*/),\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Operation\",\n    \"name\": \"FormTestFruits2Query\",\n    \"selections\": (v0/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"56e0161cfb6a3a899c0fc5629c77991c\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"FormTestFruits2Query\",\n    \"operationKind\": \"query\",\n    \"text\": \"query FormTestFruits2Query {\\n  fruits {\\n    value\\n    label\\n    disabled\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"39a4570c366798f976096c3a483874a1\";\n\nexport default node;\n","/**\n * @generated SignedSource<<8c02c13ca2c378327073fd7d1b5adf6c>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nexport type FormTestFruitsQuery$variables = Record<PropertyKey, never>;\nexport type FormTestFruitsQuery$data = {\n  readonly fruits: ReadonlyArray<{\n    readonly disabled: boolean;\n    readonly label: string | null | undefined;\n    readonly value: string | null | undefined;\n  } | null | undefined> | null | undefined;\n};\nexport type FormTestFruitsQuery = {\n  response: FormTestFruitsQuery$data;\n  variables: FormTestFruitsQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"concreteType\": \"FruitType\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"fruits\",\n    \"plural\": true,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"value\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"label\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"disabled\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"FormTestFruitsQuery\",\n    \"selections\": (v0/*: any*/),\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Operation\",\n    \"name\": \"FormTestFruitsQuery\",\n    \"selections\": (v0/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"c9ed14cca3775fb13d636859a5ed15c6\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"FormTestFruitsQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query FormTestFruitsQuery {\\n  fruits {\\n    value\\n    label\\n    disabled\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"b96789f1cee7154b38e51c943051b807\";\n\nexport default node;\n","/**\n * @generated SignedSource<<cfebdf7411f24ab99367c3405fa0160a>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nexport type FormTestValidationQuery$variables = {\n  value: string;\n};\nexport type FormTestValidationQuery$data = {\n  readonly isUsernameAvailable: boolean | null | undefined;\n};\nexport type FormTestValidationQuery = {\n  response: FormTestValidationQuery$data;\n  variables: FormTestValidationQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"value\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"value\",\n        \"variableName\": \"value\"\n      }\n    ],\n    \"kind\": \"ScalarField\",\n    \"name\": \"isUsernameAvailable\",\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"FormTestValidationQuery\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"FormTestValidationQuery\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"5035487911fc77b3b0b03d17d299bde6\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"FormTestValidationQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query FormTestValidationQuery(\\n  $value: String!\\n) {\\n  isUsernameAvailable(value: $value)\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"06b9a81e5d3c90b442059558073224d2\";\n\nexport default node;\n","/* @aztlan/generator-front 0.4.0 */\nimport * as React from 'react'\nimport {\n  defineMessages, useIntl,\n} from 'react-intl'\nimport {\n  SimpleForm,\n  addGraphQLOptions,\n  withErrorHandling,\n  addGraphQLValidation,\n} from '@aztlan/ui'\nimport { graphql } from 'relay-runtime'\nimport Template from '../../common/templates/Base.tsx'\n\nconst m = defineMessages({\n  title:{\n    // id: `${messagesPrefix}.title`,\n    defaultMessage:'Homepage',\n  },\n  welcome:{\n    description   :'Message to greet the user.',\n    defaultMessage:'Welcome to the site, {name}!!!',\n  },\n})\n\nfunction Home() {\n  const { formatMessage } = useIntl()\n  return (\n    <Template title={formatMessage(m.title)}>\n      <h2 className=\"container\">Form Test</h2>\n      <SimpleForm\n        className=\"container\"\n        defaultValues={{ fruits2: 'watermelon' }}\n        fieldProps={{\n          spanLabel         :6,\n          spanLabelDesktop  :3,\n          spanContent       :8,\n          spanContentDesktop:5,\n        }}\n        fields={[\n          {\n            name        :'name',\n            label       :'Your name',\n            autoComplete:'name',\n          },\n          {\n            name        :'email',\n            label       :'Your email',\n            autoComplete:'email',\n          },\n          {\n            name        :'username',\n            label       :'Username',\n            autoComplete:'email',\n            extensions  :[\n              addGraphQLValidation(\n                graphql`\n                  query FormTestValidationQuery($value: String!) {\n                    isUsernameAvailable(value: $value)\n                  }\n                `,\n                'isUsernameAvailable',\n                {\n                  invalidError :'This username is already taken',\n                  fetchError   :'There was an error while checking the username availability',\n                  responseError:\"The server didn't return a valid response\",\n                  minLength    :4,\n                },\n              ),\n            ],\n          },\n          {\n            name        :'fruits',\n            label       :\"What's your favorite fruit?\",\n            autoComplete:'off',\n            type        :'select',\n            /*\n            options     :[\n              {\n                label   :'Apple',\n                value   :'apple',\n                disabled:false,\n              },\n              {\n                label   :'Banana',\n                value   :'banana',\n                disabled:false,\n              },\n              {\n                label   :'Orange',\n                value   :'orange',\n                disabled:false,\n              },\n              {\n                label   :'Pineapple',\n                value   :'pineapple',\n                disabled:true,\n              },\n            ], */\n            extensions  :[\n              withErrorHandling,\n              addGraphQLOptions(\n                graphql`\n                  query FormTestFruitsQuery {\n                    fruits {\n                      value\n                      label\n                      disabled\n                    }\n                  }\n                `,\n                'fruits',\n              ),\n              withErrorHandling,\n            ],\n          },\n          {\n            name      :'fruits2',\n            label     :\"What's your favorite fruit?\",\n            type      :'combobox',\n            extensions:[\n              withErrorHandling,\n              addGraphQLOptions(\n                graphql`\n                  query FormTestFruits2Query {\n                    fruits {\n                      value\n                      label\n                      disabled\n                    }\n                  }\n                `,\n                'fruits',\n              ),\n            ],\n          },\n        ]}\n      />\n      {/*\n      <h2 className=\"container\">Vanilla </h2>\n      <div className=\"container\">\n        <Formik initialValues={{ email: 'test@test.com' }}>\n          <>\n            <Field\n              name=\"name\"\n              type=\"text\"\n            />\n            <Field\n              validate={validateEmail}\n              name=\"email\"\n              type=\"email\"\n            />\n          </>\n        </Formik>\n      </div>\n          */}\n    </Template>\n  )\n}\n\nexport default Home\n"],"names":["node","baseClassName","styleNames","componentClassName","FRAGMENT","_QueryTesterFragment","hash","console","error","QUERY","_QueryTesterQuery","QueryTester","_ref","id","className","userClassName","style","children","data","useInsertionEffect","time","useFragment","React","filter","e","join","propTypes","PropTypes","m","defineMessages","title","defaultMessage","welcome","useLazyLoadQuery","fetchPolicy","formatMessage","useIntl","Template","fallback","name","v0","v1","SimpleForm","defaultValues","fruits2","fieldProps","spanLabel","spanLabelDesktop","spanContent","spanContentDesktop","fields","label","autoComplete","extensions","addGraphQLValidation","_FormTestValidationQuery","invalidError","fetchError","responseError","minLength","type","withErrorHandling","addGraphQLOptions","_FormTestFruitsQuery","_FormTestFruits2Query"],"sourceRoot":""}