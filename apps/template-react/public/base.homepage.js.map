{"version":3,"file":"base.homepage.js?82154","mappings":"uQAkBA,IAAMA,EAAgBC,EAAAA,EAAWC,KAE3BC,EAAqB,eACrBC,QAAQ,IAAAC,IAAAA,EAAAC,EAAA,OAAAC,MAAA,qCAAAF,EAAAE,MAAAC,QAAAC,MAAA,qJAAAJ,GAMRK,QAAK,IAAAC,IAAAA,EAAAL,EAAA,OAAAC,MAAA,qCAAAI,EAAAJ,MAAAC,QAAAC,MAAA,kJAAAE,GASX,SAASC,EAAWC,GAQjB,IAPDC,EAAED,EAAFC,GACWC,EAAaF,EAAxBG,UACAC,EAAKJ,EAALI,MACAC,EAAQL,EAARK,SACAC,EAAIN,EAAJM,M,0WACaC,CAAAP,EAAAQ,IAGbC,EAAAA,EAAAA,qBACE,WAEE,6BACF,GAAG,IAGL,IACEC,GACEC,EAAAA,EAAAA,aACFpB,EAAUe,GAFVI,KAKF,OACEE,EAAAA,cAAA,OACEX,GAAIA,EACJE,UAAW,CACT,YACAhB,EACAG,EACAY,GAECW,QAAO,SAACC,GAAC,OAAKA,CAAC,IACfC,KAAK,KACRX,MAAOA,GAGPQ,EAAAA,cAAA,SAAG,UAEA,IACAF,EACAL,GAOT,CAEAN,EAAYiB,UAAY,CAItBf,GAAGgB,EAAAA,OAKHd,UAAUc,EAAAA,OAKVb,MAAMa,EAAAA,SAAmBA,EAAAA,QAKzBZ,SAASY,EAAAA,MAGXlB,EAAYmB,aAAe,CACzB,EAEFnB,EAAYF,MAAQA,EACpBE,EAAYR,SAAWA,EAEvB,UC9FA,IAAM4B,GAAIC,EAAAA,EAAAA,IAAe,CACvBC,MAAM,CAAApB,GAAA,SAEJqB,eAAc,YAEhBC,QAAQ,CAAAtB,GAAA,SAENqB,eAAc,oCAgClB,QA5BA,WACE,IAAMhB,GAAOkB,EAAAA,EAAAA,kBACXzB,EAAYF,MACZ,CAAC,EACD,CACE4B,YAAY,qBAKdC,GACEC,EAAAA,EAAAA,KADFD,cAEF,OACEd,EAAAA,cAACgB,EAAAA,EAAQ,CAACP,MAAOK,EAAcP,EAAEE,QAC/BT,EAAAA,cAACA,EAAAA,SAAc,CAACiB,SAAS,WACvBjB,EAAAA,cAACb,EAAW,CAACO,KAAMA,KAErBM,EAAAA,cAAA,KAAGT,UAAU,aACVuB,EACCP,EAAEI,QAAS,CACTO,KAAK,WAMjB,C,+CCfA,QApB6B,CAC3B,oBAAuB,GACvB,KAAQ,WACR,SAAY,KACZ,KAAQ,sBACR,WAAc,CACZ,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,OACR,WAAc,OAGlB,KAAQ,QACR,YAAe,KAGhBC,KAAoB,mC,+CCyBrB,QA3C8B,CAC5B,SAAY,CACV,oBAAuB,GACvB,KAAQ,WACR,SAAY,KACZ,KAAQ,mBACR,WAAc,CACZ,CACE,KAAQ,KACR,KAAQ,iBACR,KAAQ,wBAGZ,KAAQ,QACR,YAAe,MAEjB,KAAQ,UACR,UAAa,CACX,oBAAuB,GACvB,KAAQ,YACR,KAAQ,mBACR,WAAc,CACZ,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,OACR,WAAc,QAIpB,OAAU,CACR,QAAW,mCACX,GAAM,KACN,SAAY,CAAC,EACb,KAAQ,mBACR,cAAiB,QACjB,KAAQ,iHAIXA,KAAoB,mC","sources":["webpack://@aztlan/template-react/./src/modules/base.homepage/ui/QueryTester/QueryTester.tsx","webpack://@aztlan/template-react/./src/modules/base.homepage/pages/Home.tsx","webpack://@aztlan/template-react/./src/modules/base.homepage/ui/QueryTester/__generated__/QueryTesterFragment.graphql.ts","webpack://@aztlan/template-react/./src/modules/base.homepage/ui/QueryTester/__generated__/QueryTesterQuery.graphql.ts"],"sourcesContent":["/* @aztlan/generator-front 0.2.0 */\nimport * as React from 'react'\n\nimport {\n  useInsertionEffect,\n} from 'react'\n\nimport * as PropTypes from 'prop-types'\n\nimport styleNames from '@aztlan/bem'\n\nimport {\n  useFragment, useRelayEnvironment,\n} from 'react-relay'\n// import { Button } from '@aztlan/ui'\n\n// Local Definitions\n\nconst baseClassName = styleNames.base\n\nconst componentClassName = 'query-tester'\nconst FRAGMENT = graphql`\n  fragment QueryTesterFragment on Query {\n    time\n  }\n`\n\nconst QUERY = graphql`\n  query QueryTesterQuery {\n    ...QueryTesterFragment\n  }\n`\n\n/**\n * This is the component description.\n */\nfunction QueryTester({\n  id,\n  className: userClassName,\n  style,\n  children,\n  data,\n  ...otherProps\n  // ...otherProps\n}) {\n  useInsertionEffect(\n    () => {\n    // @ts-ignore\n      import('./styles.scss')\n    }, [],\n  )\n\n  const {\n    time,\n  } = useFragment(\n    FRAGMENT, data,\n  )\n\n  return (\n    <div\n      id={id}\n      className={[\n        'container',\n        baseClassName,\n        componentClassName,\n        userClassName,\n      ]\n        .filter((e) => e)\n        .join(' ')}\n      style={style}\n      // {...otherProps}\n    >\n      <p>\n        TIME IS\n        {' '}\n        {time}\n        {children}\n      </p>\n      {/*\n      <Button>Test</Button>\n      */}\n    </div>\n  )\n}\n\nQueryTester.propTypes = {\n  /**\n   * The HTML id for this element\n   */\n  id:PropTypes.string,\n\n  /**\n   * The HTML class names for this element\n   */\n  className:PropTypes.string,\n\n  /**\n   * The React-written, css properties for this element.\n   */\n  style:PropTypes.objectOf(PropTypes.string),\n\n  /**\n   *  The children JSX\n   */\n  children:PropTypes.node,\n}\n\nQueryTester.defaultProps = {\n  // someProp:false\n}\nQueryTester.QUERY = QUERY\nQueryTester.FRAGMENT = FRAGMENT\n\nexport default QueryTester\n","/* @aztlan/generator-front 0.4.0 */\nimport * as React from 'react'\nimport {\n  useEffect,\n} from 'react'\nimport {\n  useHistory,\n} from 'react-router-dom'\nimport {\n  useLazyLoadQuery,\n} from 'react-relay'\nimport {\n  defineMessages, useIntl, FormattedMessage,\n} from 'react-intl'\nimport Template from '../../common/templates/Base'\nimport {\n  QueryTester,\n} from '../ui'\n\nconst m = defineMessages({\n  title:{\n    // id: `${messagesPrefix}.title`,\n    defaultMessage:'Homepage',\n  },\n  welcome:{\n    description   :'Message to greet the user.',\n    defaultMessage:'Welcome to the site, {name}!!!',\n  },\n})\n\nfunction Home() {\n  const data = useLazyLoadQuery(\n    QueryTester.QUERY,\n    {},\n    {\n      fetchPolicy:'store-or-network',\n    },\n  )\n\n  const {\n    formatMessage,\n  } = useIntl()\n  return (\n    <Template title={formatMessage(m.title)}>\n      <React.Suspense fallback=\"Loading\">\n        <QueryTester data={data} />\n      </React.Suspense>\n      <p className=\"container\">\n        {formatMessage(\n          m.welcome, {\n            name:'guest',\n          },\n        )}\n      </p>\n    </Template>\n  )\n}\n\nexport default Home\n","/**\n * @generated SignedSource<<8371248ec54f98c9e1e4120f2ecd0cf8>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { Fragment, ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type QueryTesterFragment$data = {\n  readonly time: any | null | undefined;\n  readonly \" $fragmentType\": \"QueryTesterFragment\";\n};\nexport type QueryTesterFragment$key = {\n  readonly \" $data\"?: QueryTesterFragment$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"QueryTesterFragment\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"QueryTesterFragment\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"time\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"Query\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"d1cdb0deb371cd84d96ec9c6169e1255\";\n\nexport default node;\n","/**\n * @generated SignedSource<<76d71db0352e4f1ed58b4699c47864ae>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type QueryTesterQuery$variables = Record<PropertyKey, never>;\nexport type QueryTesterQuery$data = {\n  readonly \" $fragmentSpreads\": FragmentRefs<\"QueryTesterFragment\">;\n};\nexport type QueryTesterQuery = {\n  response: QueryTesterQuery$data;\n  variables: QueryTesterQuery$variables;\n};\n\nconst node: ConcreteRequest = {\n  \"fragment\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"QueryTesterQuery\",\n    \"selections\": [\n      {\n        \"args\": null,\n        \"kind\": \"FragmentSpread\",\n        \"name\": \"QueryTesterFragment\"\n      }\n    ],\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Operation\",\n    \"name\": \"QueryTesterQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"time\",\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"cb2c901c92e521a25b2ac76857b5e322\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"QueryTesterQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query QueryTesterQuery {\\n  ...QueryTesterFragment\\n}\\n\\nfragment QueryTesterFragment on Query {\\n  time\\n}\\n\"\n  }\n};\n\n(node as any).hash = \"920e8fa8275613b7ca9be05c137e7fbf\";\n\nexport default node;\n"],"names":["baseClassName","styleNames","base","componentClassName","FRAGMENT","_QueryTesterFragment","require","hash","console","error","QUERY","_QueryTesterQuery","QueryTester","_ref","id","userClassName","className","style","children","data","_objectWithoutProperties","_excluded","useInsertionEffect","time","useFragment","React","filter","e","join","propTypes","PropTypes","defaultProps","m","defineMessages","title","defaultMessage","welcome","useLazyLoadQuery","fetchPolicy","formatMessage","useIntl","Template","fallback","name","node"],"sourceRoot":""}