{"version":3,"file":"RelayReader.js.js?c3a2d","mappings":"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","sources":["webpack://@aztlan/template-react/../../node_modules/relay-runtime/lib/store/RelayReader.js"],"sourcesContent":["'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\")[\"default\"];\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _require = require('../util/RelayConcreteNode'),\n  ACTOR_CHANGE = _require.ACTOR_CHANGE,\n  ALIASED_FRAGMENT_SPREAD = _require.ALIASED_FRAGMENT_SPREAD,\n  ALIASED_INLINE_FRAGMENT_SPREAD = _require.ALIASED_INLINE_FRAGMENT_SPREAD,\n  CLIENT_EDGE_TO_CLIENT_OBJECT = _require.CLIENT_EDGE_TO_CLIENT_OBJECT,\n  CLIENT_EDGE_TO_SERVER_OBJECT = _require.CLIENT_EDGE_TO_SERVER_OBJECT,\n  CLIENT_EXTENSION = _require.CLIENT_EXTENSION,\n  CONDITION = _require.CONDITION,\n  DEFER = _require.DEFER,\n  FRAGMENT_SPREAD = _require.FRAGMENT_SPREAD,\n  INLINE_DATA_FRAGMENT_SPREAD = _require.INLINE_DATA_FRAGMENT_SPREAD,\n  INLINE_FRAGMENT = _require.INLINE_FRAGMENT,\n  LINKED_FIELD = _require.LINKED_FIELD,\n  MODULE_IMPORT = _require.MODULE_IMPORT,\n  RELAY_LIVE_RESOLVER = _require.RELAY_LIVE_RESOLVER,\n  RELAY_RESOLVER = _require.RELAY_RESOLVER,\n  REQUIRED_FIELD = _require.REQUIRED_FIELD,\n  SCALAR_FIELD = _require.SCALAR_FIELD,\n  STREAM = _require.STREAM;\nvar RelayFeatureFlags = require('../util/RelayFeatureFlags');\nvar _require2 = require('./experimental-live-resolvers/LiveResolverSuspenseSentinel'),\n  isSuspenseSentinel = _require2.isSuspenseSentinel;\nvar RelayConcreteVariables = require('./RelayConcreteVariables');\nvar RelayModernRecord = require('./RelayModernRecord');\nvar _require3 = require('./RelayStoreUtils'),\n  CLIENT_EDGE_TRAVERSAL_PATH = _require3.CLIENT_EDGE_TRAVERSAL_PATH,\n  FRAGMENT_OWNER_KEY = _require3.FRAGMENT_OWNER_KEY,\n  FRAGMENT_PROP_NAME_KEY = _require3.FRAGMENT_PROP_NAME_KEY,\n  FRAGMENTS_KEY = _require3.FRAGMENTS_KEY,\n  ID_KEY = _require3.ID_KEY,\n  MODULE_COMPONENT_KEY = _require3.MODULE_COMPONENT_KEY,\n  ROOT_ID = _require3.ROOT_ID,\n  getArgumentValues = _require3.getArgumentValues,\n  getModuleComponentKey = _require3.getModuleComponentKey,\n  getStorageKey = _require3.getStorageKey;\nvar _require4 = require('./ResolverCache'),\n  NoopResolverCache = _require4.NoopResolverCache;\nvar _require5 = require('./ResolverFragments'),\n  RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL = _require5.RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL,\n  withResolverContext = _require5.withResolverContext;\nvar _require6 = require('./TypeID'),\n  generateTypeID = _require6.generateTypeID;\nvar invariant = require('invariant');\nfunction read(recordSource, selector, resolverCache) {\n  var reader = new RelayReader(recordSource, selector, resolverCache !== null && resolverCache !== void 0 ? resolverCache : new NoopResolverCache());\n  return reader.read();\n}\nvar RelayReader = /*#__PURE__*/function () {\n  function RelayReader(recordSource, selector, resolverCache) {\n    var _selector$clientEdgeT;\n    this._clientEdgeTraversalPath = RelayFeatureFlags.ENABLE_CLIENT_EDGES && (_selector$clientEdgeT = selector.clientEdgeTraversalPath) !== null && _selector$clientEdgeT !== void 0 && _selector$clientEdgeT.length ? (0, _toConsumableArray2[\"default\"])(selector.clientEdgeTraversalPath) : [];\n    this._missingClientEdges = [];\n    this._missingLiveResolverFields = [];\n    this._isMissingData = false;\n    this._isWithinUnmatchedTypeRefinement = false;\n    this._missingRequiredFields = null;\n    this._owner = selector.owner;\n    this._recordSource = recordSource;\n    this._seenRecords = new Set();\n    this._selector = selector;\n    this._variables = selector.variables;\n    this._resolverCache = resolverCache;\n    this._resolverErrors = [];\n    this._fragmentName = selector.node.name;\n    this._updatedDataIDs = new Set();\n  }\n  var _proto = RelayReader.prototype;\n  _proto.read = function read() {\n    var _this$_selector = this._selector,\n      node = _this$_selector.node,\n      dataID = _this$_selector.dataID,\n      isWithinUnmatchedTypeRefinement = _this$_selector.isWithinUnmatchedTypeRefinement;\n    var abstractKey = node.abstractKey;\n    var record = this._recordSource.get(dataID);\n    var isDataExpectedToBePresent = !isWithinUnmatchedTypeRefinement;\n    if (isDataExpectedToBePresent && abstractKey == null && record != null) {\n      var recordType = RelayModernRecord.getType(record);\n      if (recordType !== node.type && dataID !== ROOT_ID) {\n        isDataExpectedToBePresent = false;\n      }\n    }\n    if (isDataExpectedToBePresent && abstractKey != null && record != null) {\n      var implementsInterface = this._implementsInterface(record, abstractKey);\n      if (implementsInterface === false) {\n        isDataExpectedToBePresent = false;\n      } else if (implementsInterface == null) {\n        this._isMissingData = true;\n      }\n    }\n    this._isWithinUnmatchedTypeRefinement = !isDataExpectedToBePresent;\n    var data = this._traverse(node, dataID, null);\n    if (this._updatedDataIDs.size > 0) {\n      this._resolverCache.notifyUpdatedSubscribers(this._updatedDataIDs);\n      this._updatedDataIDs.clear();\n    }\n    return {\n      data: data,\n      isMissingData: this._isMissingData && isDataExpectedToBePresent,\n      missingClientEdges: RelayFeatureFlags.ENABLE_CLIENT_EDGES && this._missingClientEdges.length ? this._missingClientEdges : null,\n      missingLiveResolverFields: this._missingLiveResolverFields,\n      seenRecords: this._seenRecords,\n      selector: this._selector,\n      missingRequiredFields: this._missingRequiredFields,\n      relayResolverErrors: this._resolverErrors\n    };\n  };\n  _proto._markDataAsMissing = function _markDataAsMissing() {\n    this._isMissingData = true;\n    if (RelayFeatureFlags.ENABLE_CLIENT_EDGES && this._clientEdgeTraversalPath.length) {\n      var top = this._clientEdgeTraversalPath[this._clientEdgeTraversalPath.length - 1];\n      if (top !== null) {\n        this._missingClientEdges.push({\n          request: top.readerClientEdge.operation,\n          clientEdgeDestinationID: top.clientEdgeDestinationID\n        });\n      }\n    }\n  };\n  _proto._traverse = function _traverse(node, dataID, prevData) {\n    var record = this._recordSource.get(dataID);\n    this._seenRecords.add(dataID);\n    if (record == null) {\n      if (record === undefined) {\n        this._markDataAsMissing();\n      }\n      return record;\n    }\n    var data = prevData || {};\n    var hadRequiredData = this._traverseSelections(node.selections, record, data);\n    return hadRequiredData ? data : null;\n  };\n  _proto._getVariableValue = function _getVariableValue(name) {\n    !this._variables.hasOwnProperty(name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Undefined variable `%s`.', name) : invariant(false) : void 0;\n    return this._variables[name];\n  };\n  _proto._maybeReportUnexpectedNull = function _maybeReportUnexpectedNull(fieldPath, action) {\n    var _this$_missingRequire;\n    if (((_this$_missingRequire = this._missingRequiredFields) === null || _this$_missingRequire === void 0 ? void 0 : _this$_missingRequire.action) === 'THROW') {\n      return;\n    }\n    var owner = this._fragmentName;\n    switch (action) {\n      case 'THROW':\n        this._missingRequiredFields = {\n          action: action,\n          field: {\n            path: fieldPath,\n            owner: owner\n          }\n        };\n        return;\n      case 'LOG':\n        if (this._missingRequiredFields == null) {\n          this._missingRequiredFields = {\n            action: action,\n            fields: [{\n              path: fieldPath,\n              owner: owner\n            }]\n          };\n        } else {\n          this._missingRequiredFields = {\n            action: action,\n            fields: [].concat((0, _toConsumableArray2[\"default\"])(this._missingRequiredFields.fields), [{\n              path: fieldPath,\n              owner: owner\n            }])\n          };\n        }\n        return;\n      default:\n        action;\n    }\n  };\n  _proto._traverseSelections = function _traverseSelections(selections, record, data) {\n    for (var i = 0; i < selections.length; i++) {\n      var selection = selections[i];\n      switch (selection.kind) {\n        case REQUIRED_FIELD:\n          {\n            var fieldValue = this._readRequiredField(selection, record, data);\n            if (fieldValue == null) {\n              var action = selection.action;\n              if (action !== 'NONE') {\n                this._maybeReportUnexpectedNull(selection.path, action);\n              }\n              return false;\n            }\n            break;\n          }\n        case SCALAR_FIELD:\n          this._readScalar(selection, record, data);\n          break;\n        case LINKED_FIELD:\n          if (selection.plural) {\n            this._readPluralLink(selection, record, data);\n          } else {\n            this._readLink(selection, record, data);\n          }\n          break;\n        case CONDITION:\n          var conditionValue = Boolean(this._getVariableValue(selection.condition));\n          if (conditionValue === selection.passingValue) {\n            var hasExpectedData = this._traverseSelections(selection.selections, record, data);\n            if (!hasExpectedData) {\n              return false;\n            }\n          }\n          break;\n        case INLINE_FRAGMENT:\n          {\n            if (this._readInlineFragment(selection, record, data) === false) {\n              return false;\n            }\n            break;\n          }\n        case RELAY_LIVE_RESOLVER:\n        case RELAY_RESOLVER:\n          {\n            if (!RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {\n              throw new Error('Relay Resolver fields are not yet supported.');\n            }\n            this._readResolverField(selection, record, data);\n            break;\n          }\n        case FRAGMENT_SPREAD:\n          this._createFragmentPointer(selection, record, data);\n          break;\n        case ALIASED_FRAGMENT_SPREAD:\n          data[selection.name] = this._createAliasedFragmentSpread(selection, record);\n          break;\n        case ALIASED_INLINE_FRAGMENT_SPREAD:\n          {\n            var _fieldValue = this._readInlineFragment(selection.fragment, record, {});\n            if (_fieldValue === false) {\n              _fieldValue = null;\n            }\n            data[selection.name] = _fieldValue;\n            break;\n          }\n        case MODULE_IMPORT:\n          this._readModuleImport(selection, record, data);\n          break;\n        case INLINE_DATA_FRAGMENT_SPREAD:\n          this._createInlineDataOrResolverFragmentPointer(selection, record, data);\n          break;\n        case DEFER:\n        case CLIENT_EXTENSION:\n          {\n            var isMissingData = this._isMissingData;\n            var alreadyMissingClientEdges = this._missingClientEdges.length;\n            if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {\n              this._clientEdgeTraversalPath.push(null);\n            }\n            var _hasExpectedData = this._traverseSelections(selection.selections, record, data);\n            this._isMissingData = isMissingData || this._missingClientEdges.length > alreadyMissingClientEdges || this._missingLiveResolverFields.length > 0;\n            if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {\n              this._clientEdgeTraversalPath.pop();\n            }\n            if (!_hasExpectedData) {\n              return false;\n            }\n            break;\n          }\n        case STREAM:\n          {\n            var _hasExpectedData2 = this._traverseSelections(selection.selections, record, data);\n            if (!_hasExpectedData2) {\n              return false;\n            }\n            break;\n          }\n        case ACTOR_CHANGE:\n          this._readActorChange(selection, record, data);\n          break;\n        case CLIENT_EDGE_TO_CLIENT_OBJECT:\n        case CLIENT_EDGE_TO_SERVER_OBJECT:\n          if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {\n            this._readClientEdge(selection, record, data);\n          } else {\n            throw new Error('Client edges are not yet supported.');\n          }\n          break;\n        default:\n          selection;\n          !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Unexpected ast kind `%s`.', selection.kind) : invariant(false) : void 0;\n      }\n    }\n    return true;\n  };\n  _proto._readRequiredField = function _readRequiredField(selection, record, data) {\n    switch (selection.field.kind) {\n      case SCALAR_FIELD:\n        return this._readScalar(selection.field, record, data);\n      case LINKED_FIELD:\n        if (selection.field.plural) {\n          return this._readPluralLink(selection.field, record, data);\n        } else {\n          return this._readLink(selection.field, record, data);\n        }\n      case RELAY_RESOLVER:\n        if (!RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {\n          throw new Error('Relay Resolver fields are not yet supported.');\n        }\n        return this._readResolverField(selection.field, record, data);\n      case RELAY_LIVE_RESOLVER:\n        if (!RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {\n          throw new Error('Relay Resolver fields are not yet supported.');\n        }\n        return this._readResolverField(selection.field, record, data);\n      case CLIENT_EDGE_TO_CLIENT_OBJECT:\n      case CLIENT_EDGE_TO_SERVER_OBJECT:\n        if (!RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {\n          throw new Error('Relay Resolver fields are not yet supported.');\n        }\n        return this._readClientEdge(selection.field, record, data);\n      default:\n        selection.field.kind;\n        !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Unexpected ast kind `%s`.', selection.kind) : invariant(false) : void 0;\n    }\n  };\n  _proto._readResolverField = function _readResolverField(field, record, data) {\n    var _this = this;\n    var _field$alias;\n    var fragment = field.fragment;\n    var parentRecordID = RelayModernRecord.getDataID(record);\n    var snapshot;\n    var getDataForResolverFragment = function getDataForResolverFragment(singularReaderSelector) {\n      if (snapshot != null) {\n        return {\n          data: snapshot.data,\n          isMissingData: snapshot.isMissingData\n        };\n      }\n      snapshot = read(_this._recordSource, singularReaderSelector, _this._resolverCache);\n      return {\n        data: snapshot.data,\n        isMissingData: snapshot.isMissingData\n      };\n    };\n    var evaluate = function evaluate() {\n      if (fragment != null) {\n        var key = {\n          __id: parentRecordID,\n          __fragmentOwner: _this._owner,\n          __fragments: (0, _defineProperty2[\"default\"])({}, fragment.name, fragment.args ? getArgumentValues(fragment.args, _this._variables) : {})\n        };\n        var resolverContext = {\n          getDataForResolverFragment: getDataForResolverFragment\n        };\n        return withResolverContext(resolverContext, function () {\n          var _getResolverValue = getResolverValue(field, _this._variables, key),\n            resolverResult = _getResolverValue[0],\n            resolverError = _getResolverValue[1];\n          return {\n            resolverResult: resolverResult,\n            snapshot: snapshot,\n            error: resolverError\n          };\n        });\n      } else {\n        var _getResolverValue2 = getResolverValue(field, _this._variables, null),\n          resolverResult = _getResolverValue2[0],\n          _resolverError = _getResolverValue2[1];\n        return {\n          resolverResult: resolverResult,\n          snapshot: undefined,\n          error: _resolverError\n        };\n      }\n    };\n    var _this$_resolverCache$ = this._resolverCache.readFromCacheOrEvaluate(parentRecordID, field, this._variables, evaluate, getDataForResolverFragment),\n      result = _this$_resolverCache$[0],\n      seenRecord = _this$_resolverCache$[1],\n      resolverError = _this$_resolverCache$[2],\n      cachedSnapshot = _this$_resolverCache$[3],\n      suspenseID = _this$_resolverCache$[4],\n      updatedDataIDs = _this$_resolverCache$[5];\n    this._propogateResolverMetadata(field.path, cachedSnapshot, resolverError, seenRecord, suspenseID, updatedDataIDs);\n    var applicationName = (_field$alias = field.alias) !== null && _field$alias !== void 0 ? _field$alias : field.name;\n    data[applicationName] = result;\n    return result;\n  };\n  _proto._propogateResolverMetadata = function _propogateResolverMetadata(fieldPath, cachedSnapshot, resolverError, seenRecord, suspenseID, updatedDataIDs) {\n    if (cachedSnapshot != null) {\n      if (cachedSnapshot.missingRequiredFields != null) {\n        this._addMissingRequiredFields(cachedSnapshot.missingRequiredFields);\n      }\n      if (cachedSnapshot.missingClientEdges != null) {\n        var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(cachedSnapshot.missingClientEdges),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var missing = _step.value;\n            this._missingClientEdges.push(missing);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      if (cachedSnapshot.missingLiveResolverFields != null) {\n        this._isMissingData = this._isMissingData || cachedSnapshot.missingLiveResolverFields.length > 0;\n        var _iterator2 = (0, _createForOfIteratorHelper2[\"default\"])(cachedSnapshot.missingLiveResolverFields),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var missingResolverField = _step2.value;\n            this._missingLiveResolverFields.push(missingResolverField);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n      var _iterator3 = (0, _createForOfIteratorHelper2[\"default\"])(cachedSnapshot.relayResolverErrors),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var error = _step3.value;\n          this._resolverErrors.push(error);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      this._isMissingData = this._isMissingData || cachedSnapshot.isMissingData;\n    }\n    if (resolverError) {\n      this._resolverErrors.push({\n        field: {\n          path: fieldPath,\n          owner: this._fragmentName\n        },\n        error: resolverError\n      });\n    }\n    if (seenRecord != null) {\n      this._seenRecords.add(seenRecord);\n    }\n    if (suspenseID != null) {\n      this._isMissingData = true;\n      this._missingLiveResolverFields.push({\n        path: \"\".concat(this._fragmentName, \".\").concat(fieldPath),\n        liveStateID: suspenseID\n      });\n    }\n    if (updatedDataIDs != null) {\n      var _iterator4 = (0, _createForOfIteratorHelper2[\"default\"])(updatedDataIDs),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var recordID = _step4.value;\n          this._updatedDataIDs.add(recordID);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  };\n  _proto._readClientEdge = function _readClientEdge(field, record, data) {\n    var _backingField$alias;\n    var backingField = field.backingField;\n    !(backingField.kind !== 'ClientExtension') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Client extension client edges are not yet implemented.') : invariant(false) : void 0;\n    var applicationName = (_backingField$alias = backingField.alias) !== null && _backingField$alias !== void 0 ? _backingField$alias : backingField.name;\n    var backingFieldData = {};\n    this._traverseSelections([backingField], record, backingFieldData);\n    var clientEdgeResolverResponse = backingFieldData[applicationName];\n    if (clientEdgeResolverResponse == null || isSuspenseSentinel(clientEdgeResolverResponse)) {\n      data[applicationName] = clientEdgeResolverResponse;\n      return clientEdgeResolverResponse;\n    }\n    var validClientEdgeResolverResponse = assertValidClientEdgeResolverResponse(field, clientEdgeResolverResponse);\n    switch (validClientEdgeResolverResponse.kind) {\n      case 'PluralConcrete':\n        var storeIDs = getStoreIDsForPluralClientEdgeResolver(field, validClientEdgeResolverResponse.ids, this._resolverCache);\n        this._clientEdgeTraversalPath.push(null);\n        var edgeValues = this._readLinkedIds(field.linkedField, storeIDs, record, data);\n        this._clientEdgeTraversalPath.pop();\n        data[applicationName] = edgeValues;\n        return edgeValues;\n      case 'SingularConcrete':\n        var _getStoreIDAndTravers = getStoreIDAndTraversalPathSegmentForSingularClientEdgeResolver(field, validClientEdgeResolverResponse.id, this._resolverCache),\n          storeID = _getStoreIDAndTravers[0],\n          traversalPathSegment = _getStoreIDAndTravers[1];\n        this._clientEdgeTraversalPath.push(traversalPathSegment);\n        var prevData = data[applicationName];\n        !(prevData == null || typeof prevData === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Expected data for field `%s` on record `%s` ' + 'to be an object, got `%s`.', applicationName, RelayModernRecord.getDataID(record), prevData) : invariant(false) : void 0;\n        var edgeValue = this._traverse(field.linkedField, storeID, prevData);\n        this._clientEdgeTraversalPath.pop();\n        data[applicationName] = edgeValue;\n        return edgeValue;\n      default:\n        validClientEdgeResolverResponse.kind;\n    }\n  };\n  _proto._readScalar = function _readScalar(field, record, data) {\n    var _field$alias2;\n    var applicationName = (_field$alias2 = field.alias) !== null && _field$alias2 !== void 0 ? _field$alias2 : field.name;\n    var storageKey = getStorageKey(field, this._variables);\n    var value = RelayModernRecord.getValue(record, storageKey);\n    if (value === undefined) {\n      this._markDataAsMissing();\n    }\n    data[applicationName] = value;\n    return value;\n  };\n  _proto._readLink = function _readLink(field, record, data) {\n    var _field$alias3;\n    var applicationName = (_field$alias3 = field.alias) !== null && _field$alias3 !== void 0 ? _field$alias3 : field.name;\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);\n    if (linkedID == null) {\n      data[applicationName] = linkedID;\n      if (linkedID === undefined) {\n        this._markDataAsMissing();\n      }\n      return linkedID;\n    }\n    var prevData = data[applicationName];\n    !(prevData == null || typeof prevData === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Expected data for field `%s` on record `%s` ' + 'to be an object, got `%s`.', applicationName, RelayModernRecord.getDataID(record), prevData) : invariant(false) : void 0;\n    var value = this._traverse(field, linkedID, prevData);\n    data[applicationName] = value;\n    return value;\n  };\n  _proto._readActorChange = function _readActorChange(field, record, data) {\n    var _field$alias4;\n    var applicationName = (_field$alias4 = field.alias) !== null && _field$alias4 !== void 0 ? _field$alias4 : field.name;\n    var storageKey = getStorageKey(field, this._variables);\n    var externalRef = RelayModernRecord.getActorLinkedRecordID(record, storageKey);\n    if (externalRef == null) {\n      data[applicationName] = externalRef;\n      if (externalRef === undefined) {\n        this._markDataAsMissing();\n      }\n      return data[applicationName];\n    }\n    var actorIdentifier = externalRef[0],\n      dataID = externalRef[1];\n    var fragmentRef = {};\n    this._createFragmentPointer(field.fragmentSpread, RelayModernRecord.fromObject({\n      __id: dataID\n    }), fragmentRef);\n    data[applicationName] = {\n      __fragmentRef: fragmentRef,\n      __viewer: actorIdentifier\n    };\n    return data[applicationName];\n  };\n  _proto._readPluralLink = function _readPluralLink(field, record, data) {\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);\n    return this._readLinkedIds(field, linkedIDs, record, data);\n  };\n  _proto._readLinkedIds = function _readLinkedIds(field, linkedIDs, record, data) {\n    var _this2 = this;\n    var _field$alias5;\n    var applicationName = (_field$alias5 = field.alias) !== null && _field$alias5 !== void 0 ? _field$alias5 : field.name;\n    if (linkedIDs == null) {\n      data[applicationName] = linkedIDs;\n      if (linkedIDs === undefined) {\n        this._markDataAsMissing();\n      }\n      return linkedIDs;\n    }\n    var prevData = data[applicationName];\n    !(prevData == null || Array.isArray(prevData)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Expected data for field `%s` on record `%s` ' + 'to be an array, got `%s`.', applicationName, RelayModernRecord.getDataID(record), prevData) : invariant(false) : void 0;\n    var linkedArray = prevData || [];\n    linkedIDs.forEach(function (linkedID, nextIndex) {\n      if (linkedID == null) {\n        if (linkedID === undefined) {\n          _this2._markDataAsMissing();\n        }\n        linkedArray[nextIndex] = linkedID;\n        return;\n      }\n      var prevItem = linkedArray[nextIndex];\n      !(prevItem == null || typeof prevItem === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Expected data for field `%s` on record `%s` ' + 'to be an object, got `%s`.', applicationName, RelayModernRecord.getDataID(record), prevItem) : invariant(false) : void 0;\n      linkedArray[nextIndex] = _this2._traverse(field, linkedID, prevItem);\n    });\n    data[applicationName] = linkedArray;\n    return linkedArray;\n  };\n  _proto._readModuleImport = function _readModuleImport(moduleImport, record, data) {\n    var componentKey = getModuleComponentKey(moduleImport.documentName);\n    var component = RelayModernRecord.getValue(record, componentKey);\n    if (component == null) {\n      if (component === undefined) {\n        this._markDataAsMissing();\n      }\n      return;\n    }\n    this._createFragmentPointer({\n      kind: 'FragmentSpread',\n      name: moduleImport.fragmentName,\n      args: moduleImport.args\n    }, record, data);\n    data[FRAGMENT_PROP_NAME_KEY] = moduleImport.fragmentPropName;\n    data[MODULE_COMPONENT_KEY] = component;\n  };\n  _proto._createAliasedFragmentSpread = function _createAliasedFragmentSpread(namedFragmentSpread, record) {\n    var abstractKey = namedFragmentSpread.abstractKey;\n    if (abstractKey == null) {\n      var typeName = RelayModernRecord.getType(record);\n      if (typeName == null || typeName !== namedFragmentSpread.type) {\n        return null;\n      }\n    } else {\n      var implementsInterface = this._implementsInterface(record, abstractKey);\n      if (implementsInterface === false) {\n        return null;\n      } else if (implementsInterface == null) {\n        this._markDataAsMissing();\n        return undefined;\n      }\n    }\n    var fieldData = {};\n    this._createFragmentPointer(namedFragmentSpread.fragment, record, fieldData);\n    return RelayModernRecord.fromObject(fieldData);\n  };\n  _proto._readInlineFragment = function _readInlineFragment(inlineFragment, record, data) {\n    var abstractKey = inlineFragment.abstractKey;\n    if (abstractKey == null) {\n      var typeName = RelayModernRecord.getType(record);\n      if (typeName == null || typeName !== inlineFragment.type) {\n        return null;\n      } else {\n        var hasExpectedData = this._traverseSelections(inlineFragment.selections, record, data);\n        if (!hasExpectedData) {\n          return false;\n        }\n      }\n    } else {\n      var implementsInterface = this._implementsInterface(record, abstractKey);\n      var parentIsMissingData = this._isMissingData;\n      var parentIsWithinUnmatchedTypeRefinement = this._isWithinUnmatchedTypeRefinement;\n      this._isWithinUnmatchedTypeRefinement = parentIsWithinUnmatchedTypeRefinement || implementsInterface === false;\n      this._traverseSelections(inlineFragment.selections, record, data);\n      this._isWithinUnmatchedTypeRefinement = parentIsWithinUnmatchedTypeRefinement;\n      if (implementsInterface === false) {\n        this._isMissingData = parentIsMissingData;\n        return undefined;\n      } else if (implementsInterface == null) {\n        this._markDataAsMissing();\n        return null;\n      }\n    }\n    return data;\n  };\n  _proto._createFragmentPointer = function _createFragmentPointer(fragmentSpread, record, data) {\n    var fragmentPointers = data[FRAGMENTS_KEY];\n    if (fragmentPointers == null) {\n      fragmentPointers = data[FRAGMENTS_KEY] = {};\n    }\n    !(typeof fragmentPointers === 'object' && fragmentPointers != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader: Expected fragment spread data to be an object, got `%s`.', fragmentPointers) : invariant(false) : void 0;\n    if (data[ID_KEY] == null) {\n      data[ID_KEY] = RelayModernRecord.getDataID(record);\n    }\n    fragmentPointers[fragmentSpread.name] = getArgumentValues(fragmentSpread.args, this._variables, this._isWithinUnmatchedTypeRefinement);\n    data[FRAGMENT_OWNER_KEY] = this._owner;\n    if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {\n      if (this._clientEdgeTraversalPath.length > 0 && this._clientEdgeTraversalPath[this._clientEdgeTraversalPath.length - 1] !== null) {\n        data[CLIENT_EDGE_TRAVERSAL_PATH] = (0, _toConsumableArray2[\"default\"])(this._clientEdgeTraversalPath);\n      }\n    }\n  };\n  _proto._createInlineDataOrResolverFragmentPointer = function _createInlineDataOrResolverFragmentPointer(fragmentSpreadOrFragment, record, data) {\n    var fragmentPointers = data[FRAGMENTS_KEY];\n    if (fragmentPointers == null) {\n      fragmentPointers = data[FRAGMENTS_KEY] = {};\n    }\n    !(typeof fragmentPointers === 'object' && fragmentPointers != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader: Expected fragment spread data to be an object, got `%s`.', fragmentPointers) : invariant(false) : void 0;\n    if (data[ID_KEY] == null) {\n      data[ID_KEY] = RelayModernRecord.getDataID(record);\n    }\n    var inlineData = {};\n    var parentFragmentName = this._fragmentName;\n    this._fragmentName = fragmentSpreadOrFragment.name;\n    var parentVariables = this._variables;\n    var argumentVariables = fragmentSpreadOrFragment.args ? getArgumentValues(fragmentSpreadOrFragment.args, this._variables) : {};\n    this._variables = RelayConcreteVariables.getFragmentVariables(fragmentSpreadOrFragment, this._owner.variables, argumentVariables);\n    this._traverseSelections(fragmentSpreadOrFragment.selections, record, inlineData);\n    this._variables = parentVariables;\n    this._fragmentName = parentFragmentName;\n    fragmentPointers[fragmentSpreadOrFragment.name] = inlineData;\n  };\n  _proto._addMissingRequiredFields = function _addMissingRequiredFields(additional) {\n    if (this._missingRequiredFields == null) {\n      this._missingRequiredFields = additional;\n      return;\n    }\n    if (this._missingRequiredFields.action === 'THROW') {\n      return;\n    }\n    if (additional.action === 'THROW') {\n      this._missingRequiredFields = additional;\n      return;\n    }\n    this._missingRequiredFields = {\n      action: 'LOG',\n      fields: [].concat((0, _toConsumableArray2[\"default\"])(this._missingRequiredFields.fields), (0, _toConsumableArray2[\"default\"])(additional.fields))\n    };\n  };\n  _proto._implementsInterface = function _implementsInterface(record, abstractKey) {\n    var typeName = RelayModernRecord.getType(record);\n    var typeRecord = this._recordSource.get(generateTypeID(typeName));\n    var implementsInterface = typeRecord != null ? RelayModernRecord.getValue(typeRecord, abstractKey) : null;\n    return implementsInterface;\n  };\n  return RelayReader;\n}();\nfunction getResolverValue(field, variables, fragmentKey) {\n  var resolverFunction = typeof field.resolverModule === 'function' ? field.resolverModule : field.resolverModule[\"default\"];\n  var resolverResult = null;\n  var resolverError = null;\n  try {\n    var resolverFunctionArgs = [];\n    if (field.fragment != null) {\n      resolverFunctionArgs.push(fragmentKey);\n    }\n    var args = field.args ? getArgumentValues(field.args, variables) : undefined;\n    resolverFunctionArgs.push(args);\n    resolverResult = resolverFunction.apply(null, resolverFunctionArgs);\n  } catch (e) {\n    if (e === RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL) {\n      resolverResult = undefined;\n    } else {\n      resolverError = e;\n    }\n  }\n  return [resolverResult, resolverError];\n}\nfunction assertValidClientEdgeResolverResponse(field, clientEdgeResolverResponse) {\n  if (field.linkedField.plural) {\n    !Array.isArray(clientEdgeResolverResponse) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Expected plural Client Edge Relay Resolver to return an array containing IDs or objects with shape {id}.') : invariant(false) : void 0;\n    return {\n      kind: 'PluralConcrete',\n      ids: clientEdgeResolverResponse.map(function (response) {\n        return extractIdFromResponse(response, 'Expected this plural Client Edge Relay Resolver to return an array containing IDs or objects with shape {id}.');\n      })\n    };\n  } else {\n    return {\n      kind: 'SingularConcrete',\n      id: extractIdFromResponse(clientEdgeResolverResponse, 'Expected this Client Edge Relay Resolver to return an ID of type `string` or an object with shape {id}.')\n    };\n  }\n}\nfunction getStoreIDAndTraversalPathSegmentForSingularClientEdgeResolver(field, clientEdgeResolverResponse, resolverCache) {\n  if (field.kind === CLIENT_EDGE_TO_CLIENT_OBJECT) {\n    if (field.backingField.normalizationInfo == null) {\n      var concreteType = field.concreteType;\n      !(concreteType != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Expected at least one of backingField.normalizationInfo or field.concreteType to be non-null. ' + 'This indicates a bug in Relay.') : invariant(false) : void 0;\n      return [resolverCache.ensureClientRecord(clientEdgeResolverResponse, concreteType), null];\n    } else {\n      return [clientEdgeResolverResponse, null];\n    }\n  } else {\n    return [clientEdgeResolverResponse, {\n      readerClientEdge: field,\n      clientEdgeDestinationID: clientEdgeResolverResponse\n    }];\n  }\n}\nfunction getStoreIDsForPluralClientEdgeResolver(field, clientEdgeResolverResponse, resolverCache) {\n  if (field.kind === CLIENT_EDGE_TO_CLIENT_OBJECT) {\n    if (field.backingField.normalizationInfo == null) {\n      var concreteType = field.concreteType;\n      !(concreteType != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Expected at least one of backingField.normalizationInfo or field.concreteType to be non-null. ' + 'This indicates a bug in Relay.') : invariant(false) : void 0;\n      return clientEdgeResolverResponse.map(function (id) {\n        return resolverCache.ensureClientRecord(id, concreteType);\n      });\n    } else {\n      return clientEdgeResolverResponse;\n    }\n  } else {\n    !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Unexpected Client Edge to plural server type. This should be prevented by the compiler.') : invariant(false) : void 0;\n  }\n}\nfunction extractIdFromResponse(individualResponse, errorMessage) {\n  if (typeof individualResponse === 'string') {\n    return individualResponse;\n  } else if (typeof individualResponse === 'object' && individualResponse != null && typeof individualResponse.id === 'string') {\n    return individualResponse.id;\n  }\n  !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, errorMessage) : invariant(false) : void 0;\n}\nmodule.exports = {\n  read: read\n};"],"names":["_interopRequireDefault","_createForOfIteratorHelper2","_defineProperty2","_toConsumableArray2","_require","ACTOR_CHANGE","ALIASED_FRAGMENT_SPREAD","ALIASED_INLINE_FRAGMENT_SPREAD","CLIENT_EDGE_TO_CLIENT_OBJECT","CLIENT_EDGE_TO_SERVER_OBJECT","CLIENT_EXTENSION","CONDITION","DEFER","FRAGMENT_SPREAD","INLINE_DATA_FRAGMENT_SPREAD","INLINE_FRAGMENT","LINKED_FIELD","MODULE_IMPORT","RELAY_LIVE_RESOLVER","RELAY_RESOLVER","REQUIRED_FIELD","SCALAR_FIELD","STREAM","RelayFeatureFlags","isSuspenseSentinel","RelayConcreteVariables","RelayModernRecord","_require3","CLIENT_EDGE_TRAVERSAL_PATH","FRAGMENT_OWNER_KEY","FRAGMENT_PROP_NAME_KEY","FRAGMENTS_KEY","ID_KEY","MODULE_COMPONENT_KEY","ROOT_ID","getArgumentValues","getModuleComponentKey","getStorageKey","NoopResolverCache","_require5","RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL","withResolverContext","generateTypeID","invariant","read","recordSource","selector","resolverCache","RelayReader","_selector$clientEdgeT","this","_clientEdgeTraversalPath","ENABLE_CLIENT_EDGES","clientEdgeTraversalPath","length","_missingClientEdges","_missingLiveResolverFields","_isMissingData","_isWithinUnmatchedTypeRefinement","_missingRequiredFields","_owner","owner","_recordSource","_seenRecords","Set","_selector","_variables","variables","_resolverCache","_resolverErrors","_fragmentName","node","name","_updatedDataIDs","_proto","prototype","_this$_selector","dataID","isWithinUnmatchedTypeRefinement","abstractKey","record","get","isDataExpectedToBePresent","getType","type","implementsInterface","_implementsInterface","data","_traverse","size","notifyUpdatedSubscribers","clear","isMissingData","missingClientEdges","missingLiveResolverFields","seenRecords","missingRequiredFields","relayResolverErrors","_markDataAsMissing","top","push","request","readerClientEdge","operation","clientEdgeDestinationID","prevData","add","undefined","_traverseSelections","selections","_getVariableValue","hasOwnProperty","_maybeReportUnexpectedNull","fieldPath","action","_this$_missingRequire","field","path","fields","concat","i","selection","kind","_readRequiredField","_readScalar","plural","_readPluralLink","_readLink","Boolean","condition","passingValue","_readInlineFragment","ENABLE_RELAY_RESOLVERS","Error","_readResolverField","_createFragmentPointer","_createAliasedFragmentSpread","_fieldValue","fragment","_readModuleImport","_createInlineDataOrResolverFragmentPointer","alreadyMissingClientEdges","_hasExpectedData","pop","_readActorChange","_readClientEdge","_field$alias","snapshot","_this","parentRecordID","getDataID","getDataForResolverFragment","singularReaderSelector","_this$_resolverCache$","readFromCacheOrEvaluate","key","__id","__fragmentOwner","__fragments","args","_getResolverValue","getResolverValue","resolverResult","resolverError","error","_getResolverValue2","result","seenRecord","cachedSnapshot","suspenseID","updatedDataIDs","_propogateResolverMetadata","alias","_addMissingRequiredFields","_step","_iterator","s","n","done","missing","value","err","e","f","_step2","_iterator2","missingResolverField","_step3","_iterator3","liveStateID","_step4","_iterator4","recordID","_backingField$alias","backingField","applicationName","backingFieldData","clientEdgeResolverResponse","validClientEdgeResolverResponse","linkedField","Array","isArray","ids","map","response","extractIdFromResponse","id","assertValidClientEdgeResolverResponse","storeIDs","normalizationInfo","concreteType","ensureClientRecord","getStoreIDsForPluralClientEdgeResolver","edgeValues","_readLinkedIds","_getStoreIDAndTravers","getStoreIDAndTraversalPathSegmentForSingularClientEdgeResolver","storeID","traversalPathSegment","edgeValue","_field$alias2","storageKey","getValue","_field$alias3","linkedID","getLinkedRecordID","_field$alias4","externalRef","getActorLinkedRecordID","actorIdentifier","fragmentRef","fragmentSpread","fromObject","__fragmentRef","__viewer","linkedIDs","getLinkedRecordIDs","_field$alias5","_this2","linkedArray","forEach","nextIndex","prevItem","moduleImport","componentKey","documentName","component","fragmentName","fragmentPropName","namedFragmentSpread","typeName","fieldData","inlineFragment","parentIsMissingData","parentIsWithinUnmatchedTypeRefinement","fragmentPointers","fragmentSpreadOrFragment","inlineData","parentFragmentName","parentVariables","argumentVariables","getFragmentVariables","additional","typeRecord","fragmentKey","resolverFunction","resolverModule","resolverFunctionArgs","apply","individualResponse","errorMessage","module","exports"],"sourceRoot":""}