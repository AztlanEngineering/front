{"version":3,"file":"RelayReader.js.js?376af","mappings":"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","sources":["webpack://@aztlan/template-react/../../node_modules/relay-runtime/lib/store/RelayReader.js"],"sourcesContent":["'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\")[\"default\"];\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _require = require('../util/RelayConcreteNode'),\n  ACTOR_CHANGE = _require.ACTOR_CHANGE,\n  ALIASED_FRAGMENT_SPREAD = _require.ALIASED_FRAGMENT_SPREAD,\n  ALIASED_INLINE_FRAGMENT_SPREAD = _require.ALIASED_INLINE_FRAGMENT_SPREAD,\n  CLIENT_EDGE_TO_CLIENT_OBJECT = _require.CLIENT_EDGE_TO_CLIENT_OBJECT,\n  CLIENT_EDGE_TO_SERVER_OBJECT = _require.CLIENT_EDGE_TO_SERVER_OBJECT,\n  CLIENT_EXTENSION = _require.CLIENT_EXTENSION,\n  CONDITION = _require.CONDITION,\n  DEFER = _require.DEFER,\n  FRAGMENT_SPREAD = _require.FRAGMENT_SPREAD,\n  INLINE_DATA_FRAGMENT_SPREAD = _require.INLINE_DATA_FRAGMENT_SPREAD,\n  INLINE_FRAGMENT = _require.INLINE_FRAGMENT,\n  LINKED_FIELD = _require.LINKED_FIELD,\n  MODULE_IMPORT = _require.MODULE_IMPORT,\n  RELAY_LIVE_RESOLVER = _require.RELAY_LIVE_RESOLVER,\n  RELAY_RESOLVER = _require.RELAY_RESOLVER,\n  REQUIRED_FIELD = _require.REQUIRED_FIELD,\n  SCALAR_FIELD = _require.SCALAR_FIELD,\n  STREAM = _require.STREAM;\nvar RelayFeatureFlags = require('../util/RelayFeatureFlags');\nvar _require2 = require('./experimental-live-resolvers/LiveResolverSuspenseSentinel'),\n  isSuspenseSentinel = _require2.isSuspenseSentinel;\nvar RelayConcreteVariables = require('./RelayConcreteVariables');\nvar RelayModernRecord = require('./RelayModernRecord');\nvar _require3 = require('./RelayStoreUtils'),\n  CLIENT_EDGE_TRAVERSAL_PATH = _require3.CLIENT_EDGE_TRAVERSAL_PATH,\n  FRAGMENT_OWNER_KEY = _require3.FRAGMENT_OWNER_KEY,\n  FRAGMENT_PROP_NAME_KEY = _require3.FRAGMENT_PROP_NAME_KEY,\n  FRAGMENTS_KEY = _require3.FRAGMENTS_KEY,\n  ID_KEY = _require3.ID_KEY,\n  MODULE_COMPONENT_KEY = _require3.MODULE_COMPONENT_KEY,\n  ROOT_ID = _require3.ROOT_ID,\n  getArgumentValues = _require3.getArgumentValues,\n  getModuleComponentKey = _require3.getModuleComponentKey,\n  getStorageKey = _require3.getStorageKey;\nvar _require4 = require('./ResolverCache'),\n  NoopResolverCache = _require4.NoopResolverCache;\nvar _require5 = require('./ResolverFragments'),\n  RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL = _require5.RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL,\n  withResolverContext = _require5.withResolverContext;\nvar _require6 = require('./TypeID'),\n  generateTypeID = _require6.generateTypeID;\nvar invariant = require('invariant');\nfunction read(recordSource, selector, resolverCache) {\n  var reader = new RelayReader(recordSource, selector, resolverCache !== null && resolverCache !== void 0 ? resolverCache : new NoopResolverCache());\n  return reader.read();\n}\nvar RelayReader = /*#__PURE__*/function () {\n  function RelayReader(recordSource, selector, resolverCache) {\n    var _selector$clientEdgeT;\n    this._clientEdgeTraversalPath = RelayFeatureFlags.ENABLE_CLIENT_EDGES && (_selector$clientEdgeT = selector.clientEdgeTraversalPath) !== null && _selector$clientEdgeT !== void 0 && _selector$clientEdgeT.length ? (0, _toConsumableArray2[\"default\"])(selector.clientEdgeTraversalPath) : [];\n    this._missingClientEdges = [];\n    this._missingLiveResolverFields = [];\n    this._isMissingData = false;\n    this._isWithinUnmatchedTypeRefinement = false;\n    this._missingRequiredFields = null;\n    this._errorResponseFields = null;\n    this._owner = selector.owner;\n    this._recordSource = recordSource;\n    this._seenRecords = new Set();\n    this._selector = selector;\n    this._variables = selector.variables;\n    this._resolverCache = resolverCache;\n    this._resolverErrors = [];\n    this._fragmentName = selector.node.name;\n    this._updatedDataIDs = new Set();\n  }\n  var _proto = RelayReader.prototype;\n  _proto.read = function read() {\n    var _this$_selector = this._selector,\n      node = _this$_selector.node,\n      dataID = _this$_selector.dataID,\n      isWithinUnmatchedTypeRefinement = _this$_selector.isWithinUnmatchedTypeRefinement;\n    var abstractKey = node.abstractKey;\n    var record = this._recordSource.get(dataID);\n    var isDataExpectedToBePresent = !isWithinUnmatchedTypeRefinement;\n    if (isDataExpectedToBePresent && abstractKey == null && record != null) {\n      var recordType = RelayModernRecord.getType(record);\n      if (recordType !== node.type && dataID !== ROOT_ID) {\n        isDataExpectedToBePresent = false;\n      }\n    }\n    if (isDataExpectedToBePresent && abstractKey != null && record != null) {\n      var implementsInterface = this._implementsInterface(record, abstractKey);\n      if (implementsInterface === false) {\n        isDataExpectedToBePresent = false;\n      } else if (implementsInterface == null) {\n        this._isMissingData = true;\n      }\n    }\n    this._isWithinUnmatchedTypeRefinement = !isDataExpectedToBePresent;\n    var data = this._traverse(node, dataID, null);\n    if (this._updatedDataIDs.size > 0) {\n      this._resolverCache.notifyUpdatedSubscribers(this._updatedDataIDs);\n      this._updatedDataIDs.clear();\n    }\n    return {\n      data: data,\n      isMissingData: this._isMissingData && isDataExpectedToBePresent,\n      missingClientEdges: RelayFeatureFlags.ENABLE_CLIENT_EDGES && this._missingClientEdges.length ? this._missingClientEdges : null,\n      missingLiveResolverFields: this._missingLiveResolverFields,\n      seenRecords: this._seenRecords,\n      selector: this._selector,\n      missingRequiredFields: this._missingRequiredFields,\n      relayResolverErrors: this._resolverErrors,\n      errorResponseFields: this._errorResponseFields\n    };\n  };\n  _proto._maybeAddErrorResponseFields = function _maybeAddErrorResponseFields(record, storageKey) {\n    if (!RelayFeatureFlags.ENABLE_FIELD_ERROR_HANDLING) {\n      return;\n    }\n    var errors = RelayModernRecord.getErrors(record, storageKey);\n    if (errors == null) {\n      return;\n    }\n    var owner = this._fragmentName;\n    if (this._errorResponseFields == null) {\n      this._errorResponseFields = [];\n    }\n    var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(errors),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _error$path;\n        var error = _step.value;\n        this._errorResponseFields.push({\n          owner: owner,\n          path: ((_error$path = error.path) !== null && _error$path !== void 0 ? _error$path : []).join('.'),\n          error: error\n        });\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  };\n  _proto._markDataAsMissing = function _markDataAsMissing() {\n    this._isMissingData = true;\n    if (RelayFeatureFlags.ENABLE_CLIENT_EDGES && this._clientEdgeTraversalPath.length) {\n      var top = this._clientEdgeTraversalPath[this._clientEdgeTraversalPath.length - 1];\n      if (top !== null) {\n        this._missingClientEdges.push({\n          request: top.readerClientEdge.operation,\n          clientEdgeDestinationID: top.clientEdgeDestinationID\n        });\n      }\n    }\n  };\n  _proto._traverse = function _traverse(node, dataID, prevData) {\n    var record = this._recordSource.get(dataID);\n    this._seenRecords.add(dataID);\n    if (record == null) {\n      if (record === undefined) {\n        this._markDataAsMissing();\n      }\n      return record;\n    }\n    var data = prevData || {};\n    var hadRequiredData = this._traverseSelections(node.selections, record, data);\n    return hadRequiredData ? data : null;\n  };\n  _proto._getVariableValue = function _getVariableValue(name) {\n    !this._variables.hasOwnProperty(name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Undefined variable `%s`.', name) : invariant(false) : void 0;\n    return this._variables[name];\n  };\n  _proto._maybeReportUnexpectedNull = function _maybeReportUnexpectedNull(fieldPath, action) {\n    var _this$_missingRequire;\n    if (((_this$_missingRequire = this._missingRequiredFields) === null || _this$_missingRequire === void 0 ? void 0 : _this$_missingRequire.action) === 'THROW') {\n      return;\n    }\n    var owner = this._fragmentName;\n    switch (action) {\n      case 'THROW':\n        this._missingRequiredFields = {\n          action: action,\n          field: {\n            path: fieldPath,\n            owner: owner\n          }\n        };\n        return;\n      case 'LOG':\n        if (this._missingRequiredFields == null) {\n          this._missingRequiredFields = {\n            action: action,\n            fields: [{\n              path: fieldPath,\n              owner: owner\n            }]\n          };\n        } else {\n          this._missingRequiredFields = {\n            action: action,\n            fields: [].concat((0, _toConsumableArray2[\"default\"])(this._missingRequiredFields.fields), [{\n              path: fieldPath,\n              owner: owner\n            }])\n          };\n        }\n        return;\n      default:\n        action;\n    }\n  };\n  _proto._traverseSelections = function _traverseSelections(selections, record, data) {\n    for (var i = 0; i < selections.length; i++) {\n      var selection = selections[i];\n      switch (selection.kind) {\n        case REQUIRED_FIELD:\n          {\n            var fieldValue = this._readRequiredField(selection, record, data);\n            if (fieldValue == null) {\n              var action = selection.action;\n              if (action !== 'NONE') {\n                this._maybeReportUnexpectedNull(selection.path, action);\n              }\n              return false;\n            }\n            break;\n          }\n        case SCALAR_FIELD:\n          this._readScalar(selection, record, data);\n          break;\n        case LINKED_FIELD:\n          if (selection.plural) {\n            this._readPluralLink(selection, record, data);\n          } else {\n            this._readLink(selection, record, data);\n          }\n          break;\n        case CONDITION:\n          var conditionValue = Boolean(this._getVariableValue(selection.condition));\n          if (conditionValue === selection.passingValue) {\n            var hasExpectedData = this._traverseSelections(selection.selections, record, data);\n            if (!hasExpectedData) {\n              return false;\n            }\n          }\n          break;\n        case INLINE_FRAGMENT:\n          {\n            if (this._readInlineFragment(selection, record, data) === false) {\n              return false;\n            }\n            break;\n          }\n        case RELAY_LIVE_RESOLVER:\n        case RELAY_RESOLVER:\n          {\n            if (!RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {\n              throw new Error('Relay Resolver fields are not yet supported.');\n            }\n            this._readResolverField(selection, record, data);\n            break;\n          }\n        case FRAGMENT_SPREAD:\n          this._createFragmentPointer(selection, record, data);\n          break;\n        case ALIASED_FRAGMENT_SPREAD:\n          data[selection.name] = this._createAliasedFragmentSpread(selection, record);\n          break;\n        case ALIASED_INLINE_FRAGMENT_SPREAD:\n          {\n            var _fieldValue = this._readInlineFragment(selection.fragment, record, {});\n            if (_fieldValue === false) {\n              _fieldValue = null;\n            }\n            data[selection.name] = _fieldValue;\n            break;\n          }\n        case MODULE_IMPORT:\n          this._readModuleImport(selection, record, data);\n          break;\n        case INLINE_DATA_FRAGMENT_SPREAD:\n          this._createInlineDataOrResolverFragmentPointer(selection, record, data);\n          break;\n        case DEFER:\n        case CLIENT_EXTENSION:\n          {\n            var isMissingData = this._isMissingData;\n            var alreadyMissingClientEdges = this._missingClientEdges.length;\n            if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {\n              this._clientEdgeTraversalPath.push(null);\n            }\n            var _hasExpectedData = this._traverseSelections(selection.selections, record, data);\n            this._isMissingData = isMissingData || this._missingClientEdges.length > alreadyMissingClientEdges || this._missingLiveResolverFields.length > 0;\n            if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {\n              this._clientEdgeTraversalPath.pop();\n            }\n            if (!_hasExpectedData) {\n              return false;\n            }\n            break;\n          }\n        case STREAM:\n          {\n            var _hasExpectedData2 = this._traverseSelections(selection.selections, record, data);\n            if (!_hasExpectedData2) {\n              return false;\n            }\n            break;\n          }\n        case ACTOR_CHANGE:\n          this._readActorChange(selection, record, data);\n          break;\n        case CLIENT_EDGE_TO_CLIENT_OBJECT:\n        case CLIENT_EDGE_TO_SERVER_OBJECT:\n          if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {\n            this._readClientEdge(selection, record, data);\n          } else {\n            throw new Error('Client edges are not yet supported.');\n          }\n          break;\n        default:\n          selection;\n          !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Unexpected ast kind `%s`.', selection.kind) : invariant(false) : void 0;\n      }\n    }\n    return true;\n  };\n  _proto._readRequiredField = function _readRequiredField(selection, record, data) {\n    switch (selection.field.kind) {\n      case SCALAR_FIELD:\n        return this._readScalar(selection.field, record, data);\n      case LINKED_FIELD:\n        if (selection.field.plural) {\n          return this._readPluralLink(selection.field, record, data);\n        } else {\n          return this._readLink(selection.field, record, data);\n        }\n      case RELAY_RESOLVER:\n        if (!RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {\n          throw new Error('Relay Resolver fields are not yet supported.');\n        }\n        return this._readResolverField(selection.field, record, data);\n      case RELAY_LIVE_RESOLVER:\n        if (!RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {\n          throw new Error('Relay Resolver fields are not yet supported.');\n        }\n        return this._readResolverField(selection.field, record, data);\n      case CLIENT_EDGE_TO_CLIENT_OBJECT:\n      case CLIENT_EDGE_TO_SERVER_OBJECT:\n        if (!RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {\n          throw new Error('Relay Resolver fields are not yet supported.');\n        }\n        return this._readClientEdge(selection.field, record, data);\n      default:\n        selection.field.kind;\n        !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Unexpected ast kind `%s`.', selection.kind) : invariant(false) : void 0;\n    }\n  };\n  _proto._readResolverField = function _readResolverField(field, record, data) {\n    var _field$alias;\n    var parentRecordID = RelayModernRecord.getDataID(record);\n    var result = this._readResolverFieldImpl(field, parentRecordID);\n    var applicationName = (_field$alias = field.alias) !== null && _field$alias !== void 0 ? _field$alias : field.name;\n    data[applicationName] = result;\n    return result;\n  };\n  _proto._readResolverFieldImpl = function _readResolverFieldImpl(field, parentRecordID) {\n    var _this = this;\n    var fragment = field.fragment;\n    var snapshot;\n    var getDataForResolverFragment = function getDataForResolverFragment(singularReaderSelector) {\n      if (snapshot != null) {\n        return {\n          data: snapshot.data,\n          isMissingData: snapshot.isMissingData\n        };\n      }\n      snapshot = read(_this._recordSource, singularReaderSelector, _this._resolverCache);\n      return {\n        data: snapshot.data,\n        isMissingData: snapshot.isMissingData\n      };\n    };\n    var evaluate = function evaluate() {\n      if (fragment != null) {\n        var key = {\n          __id: parentRecordID,\n          __fragmentOwner: _this._owner,\n          __fragments: (0, _defineProperty2[\"default\"])({}, fragment.name, fragment.args ? getArgumentValues(fragment.args, _this._variables) : {})\n        };\n        var resolverContext = {\n          getDataForResolverFragment: getDataForResolverFragment\n        };\n        return withResolverContext(resolverContext, function () {\n          var _getResolverValue = getResolverValue(field, _this._variables, key),\n            resolverResult = _getResolverValue[0],\n            resolverError = _getResolverValue[1];\n          return {\n            resolverResult: resolverResult,\n            snapshot: snapshot,\n            error: resolverError\n          };\n        });\n      } else {\n        var _getResolverValue2 = getResolverValue(field, _this._variables, null),\n          resolverResult = _getResolverValue2[0],\n          _resolverError = _getResolverValue2[1];\n        return {\n          resolverResult: resolverResult,\n          snapshot: undefined,\n          error: _resolverError\n        };\n      }\n    };\n    var _this$_resolverCache$ = this._resolverCache.readFromCacheOrEvaluate(parentRecordID, field, this._variables, evaluate, getDataForResolverFragment),\n      result = _this$_resolverCache$[0],\n      seenRecord = _this$_resolverCache$[1],\n      resolverError = _this$_resolverCache$[2],\n      cachedSnapshot = _this$_resolverCache$[3],\n      suspenseID = _this$_resolverCache$[4],\n      updatedDataIDs = _this$_resolverCache$[5];\n    this._propogateResolverMetadata(field.path, cachedSnapshot, resolverError, seenRecord, suspenseID, updatedDataIDs);\n    return result;\n  };\n  _proto._propogateResolverMetadata = function _propogateResolverMetadata(fieldPath, cachedSnapshot, resolverError, seenRecord, suspenseID, updatedDataIDs) {\n    if (cachedSnapshot != null) {\n      if (cachedSnapshot.missingRequiredFields != null) {\n        this._addMissingRequiredFields(cachedSnapshot.missingRequiredFields);\n      }\n      if (cachedSnapshot.missingClientEdges != null) {\n        var _iterator2 = (0, _createForOfIteratorHelper2[\"default\"])(cachedSnapshot.missingClientEdges),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var missing = _step2.value;\n            this._missingClientEdges.push(missing);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n      if (cachedSnapshot.missingLiveResolverFields != null) {\n        this._isMissingData = this._isMissingData || cachedSnapshot.missingLiveResolverFields.length > 0;\n        var _iterator3 = (0, _createForOfIteratorHelper2[\"default\"])(cachedSnapshot.missingLiveResolverFields),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var missingResolverField = _step3.value;\n            this._missingLiveResolverFields.push(missingResolverField);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n      var _iterator4 = (0, _createForOfIteratorHelper2[\"default\"])(cachedSnapshot.relayResolverErrors),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var error = _step4.value;\n          this._resolverErrors.push(error);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      this._isMissingData = this._isMissingData || cachedSnapshot.isMissingData;\n    }\n    if (resolverError) {\n      this._resolverErrors.push({\n        field: {\n          path: fieldPath,\n          owner: this._fragmentName\n        },\n        error: resolverError\n      });\n    }\n    if (seenRecord != null) {\n      this._seenRecords.add(seenRecord);\n    }\n    if (suspenseID != null) {\n      this._isMissingData = true;\n      this._missingLiveResolverFields.push({\n        path: \"\".concat(this._fragmentName, \".\").concat(fieldPath),\n        liveStateID: suspenseID\n      });\n    }\n    if (updatedDataIDs != null) {\n      var _iterator5 = (0, _createForOfIteratorHelper2[\"default\"])(updatedDataIDs),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var recordID = _step5.value;\n          this._updatedDataIDs.add(recordID);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  };\n  _proto._readClientEdge = function _readClientEdge(field, record, data) {\n    var _this2 = this;\n    var _backingField$alias;\n    var backingField = field.backingField;\n    !(backingField.kind !== 'ClientExtension') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Client extension client edges are not yet implemented.') : invariant(false) : void 0;\n    var applicationName = (_backingField$alias = backingField.alias) !== null && _backingField$alias !== void 0 ? _backingField$alias : backingField.name;\n    var backingFieldData = {};\n    this._traverseSelections([backingField], record, backingFieldData);\n    var clientEdgeResolverResponse = backingFieldData[applicationName];\n    if (clientEdgeResolverResponse == null || isSuspenseSentinel(clientEdgeResolverResponse)) {\n      data[applicationName] = clientEdgeResolverResponse;\n      return clientEdgeResolverResponse;\n    }\n    var validClientEdgeResolverResponse = assertValidClientEdgeResolverResponse(field, clientEdgeResolverResponse);\n    switch (validClientEdgeResolverResponse.kind) {\n      case 'PluralConcrete':\n        var storeIDs = getStoreIDsForPluralClientEdgeResolver(field, validClientEdgeResolverResponse.ids, this._resolverCache);\n        var validStoreIDs = storeIDs;\n        if (field.modelResolver != null) {\n          var modelResolver = field.modelResolver;\n          validStoreIDs = storeIDs.map(function (storeID) {\n            var model = _this2._readResolverFieldImpl(modelResolver, storeID);\n            return model != null ? storeID : null;\n          });\n        }\n        this._clientEdgeTraversalPath.push(null);\n        var edgeValues = this._readLinkedIds(field.linkedField, validStoreIDs, record, data);\n        this._clientEdgeTraversalPath.pop();\n        data[applicationName] = edgeValues;\n        return edgeValues;\n      case 'SingularConcrete':\n        var _getStoreIDAndTravers = getStoreIDAndTraversalPathSegmentForSingularClientEdgeResolver(field, validClientEdgeResolverResponse.id, this._resolverCache),\n          storeID = _getStoreIDAndTravers[0],\n          traversalPathSegment = _getStoreIDAndTravers[1];\n        if (field.modelResolver != null) {\n          var model = this._readResolverFieldImpl(field.modelResolver, storeID);\n          if (model == null) {\n            data[applicationName] = null;\n            return null;\n          }\n        }\n        this._clientEdgeTraversalPath.push(traversalPathSegment);\n        var prevData = data[applicationName];\n        !(prevData == null || typeof prevData === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Expected data for field `%s` on record `%s` ' + 'to be an object, got `%s`.', applicationName, RelayModernRecord.getDataID(record), prevData) : invariant(false) : void 0;\n        var edgeValue = this._traverse(field.linkedField, storeID, prevData);\n        this._clientEdgeTraversalPath.pop();\n        data[applicationName] = edgeValue;\n        return edgeValue;\n      default:\n        validClientEdgeResolverResponse.kind;\n    }\n  };\n  _proto._readScalar = function _readScalar(field, record, data) {\n    var _field$alias2;\n    var applicationName = (_field$alias2 = field.alias) !== null && _field$alias2 !== void 0 ? _field$alias2 : field.name;\n    var storageKey = getStorageKey(field, this._variables);\n    var value = RelayModernRecord.getValue(record, storageKey);\n    if (value === null) {\n      this._maybeAddErrorResponseFields(record, storageKey);\n    } else if (value === undefined) {\n      this._markDataAsMissing();\n    }\n    data[applicationName] = value;\n    return value;\n  };\n  _proto._readLink = function _readLink(field, record, data) {\n    var _field$alias3;\n    var applicationName = (_field$alias3 = field.alias) !== null && _field$alias3 !== void 0 ? _field$alias3 : field.name;\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);\n    if (linkedID == null) {\n      data[applicationName] = linkedID;\n      if (linkedID === null) {\n        this._maybeAddErrorResponseFields(record, storageKey);\n      } else if (linkedID === undefined) {\n        this._markDataAsMissing();\n      }\n      return linkedID;\n    }\n    var prevData = data[applicationName];\n    !(prevData == null || typeof prevData === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Expected data for field `%s` on record `%s` ' + 'to be an object, got `%s`.', applicationName, RelayModernRecord.getDataID(record), prevData) : invariant(false) : void 0;\n    var value = this._traverse(field, linkedID, prevData);\n    data[applicationName] = value;\n    return value;\n  };\n  _proto._readActorChange = function _readActorChange(field, record, data) {\n    var _field$alias4;\n    var applicationName = (_field$alias4 = field.alias) !== null && _field$alias4 !== void 0 ? _field$alias4 : field.name;\n    var storageKey = getStorageKey(field, this._variables);\n    var externalRef = RelayModernRecord.getActorLinkedRecordID(record, storageKey);\n    if (externalRef == null) {\n      data[applicationName] = externalRef;\n      if (externalRef === undefined) {\n        this._markDataAsMissing();\n      } else if (externalRef === null) {\n        this._maybeAddErrorResponseFields(record, storageKey);\n      }\n      return data[applicationName];\n    }\n    var actorIdentifier = externalRef[0],\n      dataID = externalRef[1];\n    var fragmentRef = {};\n    this._createFragmentPointer(field.fragmentSpread, RelayModernRecord.fromObject({\n      __id: dataID\n    }), fragmentRef);\n    data[applicationName] = {\n      __fragmentRef: fragmentRef,\n      __viewer: actorIdentifier\n    };\n    return data[applicationName];\n  };\n  _proto._readPluralLink = function _readPluralLink(field, record, data) {\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);\n    if (linkedIDs === null) {\n      this._maybeAddErrorResponseFields(record, storageKey);\n    }\n    return this._readLinkedIds(field, linkedIDs, record, data);\n  };\n  _proto._readLinkedIds = function _readLinkedIds(field, linkedIDs, record, data) {\n    var _this3 = this;\n    var _field$alias5;\n    var applicationName = (_field$alias5 = field.alias) !== null && _field$alias5 !== void 0 ? _field$alias5 : field.name;\n    if (linkedIDs == null) {\n      data[applicationName] = linkedIDs;\n      if (linkedIDs === undefined) {\n        this._markDataAsMissing();\n      }\n      return linkedIDs;\n    }\n    var prevData = data[applicationName];\n    !(prevData == null || Array.isArray(prevData)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Expected data for field `%s` on record `%s` ' + 'to be an array, got `%s`.', applicationName, RelayModernRecord.getDataID(record), prevData) : invariant(false) : void 0;\n    var linkedArray = prevData || [];\n    linkedIDs.forEach(function (linkedID, nextIndex) {\n      if (linkedID == null) {\n        if (linkedID === undefined) {\n          _this3._markDataAsMissing();\n        }\n        linkedArray[nextIndex] = linkedID;\n        return;\n      }\n      var prevItem = linkedArray[nextIndex];\n      !(prevItem == null || typeof prevItem === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Expected data for field `%s` on record `%s` ' + 'to be an object, got `%s`.', applicationName, RelayModernRecord.getDataID(record), prevItem) : invariant(false) : void 0;\n      linkedArray[nextIndex] = _this3._traverse(field, linkedID, prevItem);\n    });\n    data[applicationName] = linkedArray;\n    return linkedArray;\n  };\n  _proto._readModuleImport = function _readModuleImport(moduleImport, record, data) {\n    var componentKey = getModuleComponentKey(moduleImport.documentName);\n    var component = RelayModernRecord.getValue(record, componentKey);\n    if (component == null) {\n      if (component === undefined) {\n        this._markDataAsMissing();\n      }\n      return;\n    }\n    this._createFragmentPointer({\n      kind: 'FragmentSpread',\n      name: moduleImport.fragmentName,\n      args: moduleImport.args\n    }, record, data);\n    data[FRAGMENT_PROP_NAME_KEY] = moduleImport.fragmentPropName;\n    data[MODULE_COMPONENT_KEY] = component;\n  };\n  _proto._createAliasedFragmentSpread = function _createAliasedFragmentSpread(namedFragmentSpread, record) {\n    var abstractKey = namedFragmentSpread.abstractKey;\n    if (abstractKey == null) {\n      var typeName = RelayModernRecord.getType(record);\n      if (typeName == null || typeName !== namedFragmentSpread.type) {\n        return null;\n      }\n    } else {\n      var implementsInterface = this._implementsInterface(record, abstractKey);\n      if (implementsInterface === false) {\n        return null;\n      } else if (implementsInterface == null) {\n        this._markDataAsMissing();\n        return undefined;\n      }\n    }\n    var fieldData = {};\n    this._createFragmentPointer(namedFragmentSpread.fragment, record, fieldData);\n    return RelayModernRecord.fromObject(fieldData);\n  };\n  _proto._readInlineFragment = function _readInlineFragment(inlineFragment, record, data) {\n    var abstractKey = inlineFragment.abstractKey;\n    if (abstractKey == null) {\n      var typeName = RelayModernRecord.getType(record);\n      if (typeName == null || typeName !== inlineFragment.type) {\n        return null;\n      } else {\n        var hasExpectedData = this._traverseSelections(inlineFragment.selections, record, data);\n        if (!hasExpectedData) {\n          return false;\n        }\n      }\n    } else {\n      var implementsInterface = this._implementsInterface(record, abstractKey);\n      var parentIsMissingData = this._isMissingData;\n      var parentIsWithinUnmatchedTypeRefinement = this._isWithinUnmatchedTypeRefinement;\n      this._isWithinUnmatchedTypeRefinement = parentIsWithinUnmatchedTypeRefinement || implementsInterface === false;\n      this._traverseSelections(inlineFragment.selections, record, data);\n      this._isWithinUnmatchedTypeRefinement = parentIsWithinUnmatchedTypeRefinement;\n      if (implementsInterface === false) {\n        this._isMissingData = parentIsMissingData;\n        return undefined;\n      } else if (implementsInterface == null) {\n        this._markDataAsMissing();\n        return null;\n      }\n    }\n    return data;\n  };\n  _proto._createFragmentPointer = function _createFragmentPointer(fragmentSpread, record, data) {\n    var fragmentPointers = data[FRAGMENTS_KEY];\n    if (fragmentPointers == null) {\n      fragmentPointers = data[FRAGMENTS_KEY] = {};\n    }\n    !(typeof fragmentPointers === 'object' && fragmentPointers != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader: Expected fragment spread data to be an object, got `%s`.', fragmentPointers) : invariant(false) : void 0;\n    if (data[ID_KEY] == null) {\n      data[ID_KEY] = RelayModernRecord.getDataID(record);\n    }\n    fragmentPointers[fragmentSpread.name] = getArgumentValues(fragmentSpread.args, this._variables, this._isWithinUnmatchedTypeRefinement);\n    data[FRAGMENT_OWNER_KEY] = this._owner;\n    if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {\n      if (this._clientEdgeTraversalPath.length > 0 && this._clientEdgeTraversalPath[this._clientEdgeTraversalPath.length - 1] !== null) {\n        data[CLIENT_EDGE_TRAVERSAL_PATH] = (0, _toConsumableArray2[\"default\"])(this._clientEdgeTraversalPath);\n      }\n    }\n  };\n  _proto._createInlineDataOrResolverFragmentPointer = function _createInlineDataOrResolverFragmentPointer(fragmentSpreadOrFragment, record, data) {\n    var fragmentPointers = data[FRAGMENTS_KEY];\n    if (fragmentPointers == null) {\n      fragmentPointers = data[FRAGMENTS_KEY] = {};\n    }\n    !(typeof fragmentPointers === 'object' && fragmentPointers != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader: Expected fragment spread data to be an object, got `%s`.', fragmentPointers) : invariant(false) : void 0;\n    if (data[ID_KEY] == null) {\n      data[ID_KEY] = RelayModernRecord.getDataID(record);\n    }\n    var inlineData = {};\n    var parentFragmentName = this._fragmentName;\n    this._fragmentName = fragmentSpreadOrFragment.name;\n    var parentVariables = this._variables;\n    var argumentVariables = fragmentSpreadOrFragment.args ? getArgumentValues(fragmentSpreadOrFragment.args, this._variables) : {};\n    this._variables = RelayConcreteVariables.getFragmentVariables(fragmentSpreadOrFragment, this._owner.variables, argumentVariables);\n    this._traverseSelections(fragmentSpreadOrFragment.selections, record, inlineData);\n    this._variables = parentVariables;\n    this._fragmentName = parentFragmentName;\n    fragmentPointers[fragmentSpreadOrFragment.name] = inlineData;\n  };\n  _proto._addMissingRequiredFields = function _addMissingRequiredFields(additional) {\n    if (this._missingRequiredFields == null) {\n      this._missingRequiredFields = additional;\n      return;\n    }\n    if (this._missingRequiredFields.action === 'THROW') {\n      return;\n    }\n    if (additional.action === 'THROW') {\n      this._missingRequiredFields = additional;\n      return;\n    }\n    this._missingRequiredFields = {\n      action: 'LOG',\n      fields: [].concat((0, _toConsumableArray2[\"default\"])(this._missingRequiredFields.fields), (0, _toConsumableArray2[\"default\"])(additional.fields))\n    };\n  };\n  _proto._implementsInterface = function _implementsInterface(record, abstractKey) {\n    var typeName = RelayModernRecord.getType(record);\n    var typeRecord = this._recordSource.get(generateTypeID(typeName));\n    var implementsInterface = typeRecord != null ? RelayModernRecord.getValue(typeRecord, abstractKey) : null;\n    return implementsInterface;\n  };\n  return RelayReader;\n}();\nfunction getResolverValue(field, variables, fragmentKey) {\n  var resolverFunction = typeof field.resolverModule === 'function' ? field.resolverModule : field.resolverModule[\"default\"];\n  var resolverResult = null;\n  var resolverError = null;\n  try {\n    var resolverFunctionArgs = [];\n    if (field.fragment != null) {\n      resolverFunctionArgs.push(fragmentKey);\n    }\n    var args = field.args ? getArgumentValues(field.args, variables) : undefined;\n    resolverFunctionArgs.push(args);\n    resolverResult = resolverFunction.apply(null, resolverFunctionArgs);\n  } catch (e) {\n    if (e === RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL) {\n      resolverResult = undefined;\n    } else {\n      resolverError = e;\n    }\n  }\n  return [resolverResult, resolverError];\n}\nfunction assertValidClientEdgeResolverResponse(field, clientEdgeResolverResponse) {\n  if (field.linkedField.plural) {\n    !Array.isArray(clientEdgeResolverResponse) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Expected plural Client Edge Relay Resolver to return an array containing IDs or objects with shape {id}.') : invariant(false) : void 0;\n    return {\n      kind: 'PluralConcrete',\n      ids: clientEdgeResolverResponse.map(function (response) {\n        return extractIdFromResponse(response, 'Expected this plural Client Edge Relay Resolver to return an array containing IDs or objects with shape {id}.');\n      })\n    };\n  } else {\n    return {\n      kind: 'SingularConcrete',\n      id: extractIdFromResponse(clientEdgeResolverResponse, 'Expected this Client Edge Relay Resolver to return an ID of type `string` or an object with shape {id}.')\n    };\n  }\n}\nfunction getStoreIDAndTraversalPathSegmentForSingularClientEdgeResolver(field, clientEdgeResolverResponse, resolverCache) {\n  if (field.kind === CLIENT_EDGE_TO_CLIENT_OBJECT) {\n    if (field.backingField.normalizationInfo == null) {\n      var concreteType = field.concreteType;\n      !(concreteType != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Expected at least one of backingField.normalizationInfo or field.concreteType to be non-null. ' + 'This indicates a bug in Relay.') : invariant(false) : void 0;\n      return [resolverCache.ensureClientRecord(clientEdgeResolverResponse, concreteType), null];\n    } else {\n      return [clientEdgeResolverResponse, null];\n    }\n  } else {\n    return [clientEdgeResolverResponse, {\n      readerClientEdge: field,\n      clientEdgeDestinationID: clientEdgeResolverResponse\n    }];\n  }\n}\nfunction getStoreIDsForPluralClientEdgeResolver(field, clientEdgeResolverResponse, resolverCache) {\n  if (field.kind === CLIENT_EDGE_TO_CLIENT_OBJECT) {\n    if (field.backingField.normalizationInfo == null) {\n      var concreteType = field.concreteType;\n      !(concreteType != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Expected at least one of backingField.normalizationInfo or field.concreteType to be non-null. ' + 'This indicates a bug in Relay.') : invariant(false) : void 0;\n      return clientEdgeResolverResponse.map(function (id) {\n        return resolverCache.ensureClientRecord(id, concreteType);\n      });\n    } else {\n      return clientEdgeResolverResponse;\n    }\n  } else {\n    !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Unexpected Client Edge to plural server type. This should be prevented by the compiler.') : invariant(false) : void 0;\n  }\n}\nfunction extractIdFromResponse(individualResponse, errorMessage) {\n  if (typeof individualResponse === 'string') {\n    return individualResponse;\n  } else if (typeof individualResponse === 'object' && individualResponse != null && typeof individualResponse.id === 'string') {\n    return individualResponse.id;\n  }\n  !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, errorMessage) : invariant(false) : void 0;\n}\nmodule.exports = {\n  read: read\n};"],"names":["_interopRequireDefault","_defineProperty2","_createForOfIteratorHelper2","_toConsumableArray2","_require","ACTOR_CHANGE","ALIASED_FRAGMENT_SPREAD","ALIASED_INLINE_FRAGMENT_SPREAD","CLIENT_EDGE_TO_CLIENT_OBJECT","CLIENT_EDGE_TO_SERVER_OBJECT","CLIENT_EXTENSION","CONDITION","DEFER","FRAGMENT_SPREAD","INLINE_DATA_FRAGMENT_SPREAD","INLINE_FRAGMENT","LINKED_FIELD","MODULE_IMPORT","RELAY_LIVE_RESOLVER","RELAY_RESOLVER","REQUIRED_FIELD","SCALAR_FIELD","STREAM","RelayFeatureFlags","isSuspenseSentinel","RelayConcreteVariables","RelayModernRecord","_require3","CLIENT_EDGE_TRAVERSAL_PATH","FRAGMENT_OWNER_KEY","FRAGMENT_PROP_NAME_KEY","FRAGMENTS_KEY","ID_KEY","MODULE_COMPONENT_KEY","ROOT_ID","getArgumentValues","getModuleComponentKey","getStorageKey","NoopResolverCache","_require5","RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL","withResolverContext","generateTypeID","invariant","read","recordSource","selector","resolverCache","RelayReader","_selector$clientEdgeT","this","_clientEdgeTraversalPath","ENABLE_CLIENT_EDGES","clientEdgeTraversalPath","length","_missingClientEdges","_missingLiveResolverFields","_isMissingData","_isWithinUnmatchedTypeRefinement","_missingRequiredFields","_errorResponseFields","_owner","owner","_recordSource","_seenRecords","Set","_selector","_variables","variables","_resolverCache","_resolverErrors","_fragmentName","node","name","_updatedDataIDs","_proto","prototype","_this$_selector","dataID","isWithinUnmatchedTypeRefinement","abstractKey","record","get","isDataExpectedToBePresent","getType","type","implementsInterface","_implementsInterface","data","_traverse","size","notifyUpdatedSubscribers","clear","isMissingData","missingClientEdges","missingLiveResolverFields","seenRecords","missingRequiredFields","relayResolverErrors","errorResponseFields","_maybeAddErrorResponseFields","storageKey","ENABLE_FIELD_ERROR_HANDLING","errors","getErrors","_step","_iterator","s","n","done","_error$path","error","value","push","path","join","err","e","f","_markDataAsMissing","top","request","readerClientEdge","operation","clientEdgeDestinationID","prevData","add","undefined","_traverseSelections","selections","_getVariableValue","hasOwnProperty","_maybeReportUnexpectedNull","fieldPath","action","_this$_missingRequire","field","fields","concat","i","selection","kind","_readRequiredField","_readScalar","plural","_readPluralLink","_readLink","Boolean","condition","passingValue","_readInlineFragment","ENABLE_RELAY_RESOLVERS","Error","_readResolverField","_createFragmentPointer","_createAliasedFragmentSpread","_fieldValue","fragment","_readModuleImport","_createInlineDataOrResolverFragmentPointer","alreadyMissingClientEdges","_hasExpectedData","pop","_readActorChange","_readClientEdge","_field$alias","parentRecordID","getDataID","result","_readResolverFieldImpl","alias","snapshot","_this","getDataForResolverFragment","singularReaderSelector","_this$_resolverCache$","readFromCacheOrEvaluate","key","__id","__fragmentOwner","__fragments","args","_getResolverValue","getResolverValue","resolverResult","resolverError","_getResolverValue2","seenRecord","cachedSnapshot","suspenseID","updatedDataIDs","_propogateResolverMetadata","_addMissingRequiredFields","_step2","_iterator2","missing","_step3","_iterator3","missingResolverField","_step4","_iterator4","liveStateID","_step5","_iterator5","recordID","_backingField$alias","_this2","backingField","applicationName","backingFieldData","clientEdgeResolverResponse","validClientEdgeResolverResponse","linkedField","Array","isArray","ids","map","response","extractIdFromResponse","id","assertValidClientEdgeResolverResponse","storeIDs","normalizationInfo","concreteType","ensureClientRecord","getStoreIDsForPluralClientEdgeResolver","validStoreIDs","modelResolver","storeID","edgeValues","_readLinkedIds","_getStoreIDAndTravers","getStoreIDAndTraversalPathSegmentForSingularClientEdgeResolver","traversalPathSegment","edgeValue","_field$alias2","getValue","_field$alias3","linkedID","getLinkedRecordID","_field$alias4","externalRef","getActorLinkedRecordID","actorIdentifier","fragmentRef","fragmentSpread","fromObject","__fragmentRef","__viewer","linkedIDs","getLinkedRecordIDs","_field$alias5","_this3","linkedArray","forEach","nextIndex","prevItem","moduleImport","componentKey","documentName","component","fragmentName","fragmentPropName","namedFragmentSpread","typeName","fieldData","inlineFragment","parentIsMissingData","parentIsWithinUnmatchedTypeRefinement","fragmentPointers","fragmentSpreadOrFragment","inlineData","parentFragmentName","parentVariables","argumentVariables","getFragmentVariables","additional","typeRecord","fragmentKey","resolverFunction","resolverModule","resolverFunctionArgs","apply","individualResponse","errorMessage","module","exports"],"sourceRoot":""}