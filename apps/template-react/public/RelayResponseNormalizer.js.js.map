{"version":3,"file":"RelayResponseNormalizer.js.js?88a2b","mappings":"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","sources":["webpack://@aztlan/template-react/../../node_modules/relay-runtime/lib/store/RelayResponseNormalizer.js"],"sourcesContent":["'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\")[\"default\"];\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _require = require('../multi-actor-environment/ActorUtils'),\n  ACTOR_IDENTIFIER_FIELD_NAME = _require.ACTOR_IDENTIFIER_FIELD_NAME,\n  getActorIdentifierFromPayload = _require.getActorIdentifierFromPayload;\nvar _require2 = require('../util/RelayConcreteNode'),\n  ACTOR_CHANGE = _require2.ACTOR_CHANGE,\n  CLIENT_COMPONENT = _require2.CLIENT_COMPONENT,\n  CLIENT_EDGE_TO_CLIENT_OBJECT = _require2.CLIENT_EDGE_TO_CLIENT_OBJECT,\n  CLIENT_EXTENSION = _require2.CLIENT_EXTENSION,\n  CONDITION = _require2.CONDITION,\n  DEFER = _require2.DEFER,\n  FRAGMENT_SPREAD = _require2.FRAGMENT_SPREAD,\n  INLINE_FRAGMENT = _require2.INLINE_FRAGMENT,\n  LINKED_FIELD = _require2.LINKED_FIELD,\n  LINKED_HANDLE = _require2.LINKED_HANDLE,\n  MODULE_IMPORT = _require2.MODULE_IMPORT,\n  RELAY_LIVE_RESOLVER = _require2.RELAY_LIVE_RESOLVER,\n  RELAY_RESOLVER = _require2.RELAY_RESOLVER,\n  SCALAR_FIELD = _require2.SCALAR_FIELD,\n  SCALAR_HANDLE = _require2.SCALAR_HANDLE,\n  STREAM = _require2.STREAM,\n  TYPE_DISCRIMINATOR = _require2.TYPE_DISCRIMINATOR;\nvar _require3 = require('./ClientID'),\n  generateClientID = _require3.generateClientID,\n  isClientID = _require3.isClientID;\nvar _require4 = require('./RelayConcreteVariables'),\n  getLocalVariables = _require4.getLocalVariables;\nvar _require5 = require('./RelayErrorTrie'),\n  buildErrorTrie = _require5.buildErrorTrie,\n  getErrorsByKey = _require5.getErrorsByKey,\n  getNestedErrorTrieByKey = _require5.getNestedErrorTrieByKey;\nvar RelayModernRecord = require('./RelayModernRecord');\nvar _require6 = require('./RelayModernSelector'),\n  createNormalizationSelector = _require6.createNormalizationSelector;\nvar _require7 = require('./RelayStoreUtils'),\n  ROOT_ID = _require7.ROOT_ID,\n  TYPENAME_KEY = _require7.TYPENAME_KEY,\n  getArgumentValues = _require7.getArgumentValues,\n  getHandleStorageKey = _require7.getHandleStorageKey,\n  getModuleComponentKey = _require7.getModuleComponentKey,\n  getModuleOperationKey = _require7.getModuleOperationKey,\n  getStorageKey = _require7.getStorageKey;\nvar _require8 = require('./TypeID'),\n  TYPE_SCHEMA_TYPE = _require8.TYPE_SCHEMA_TYPE,\n  generateTypeID = _require8.generateTypeID;\nvar areEqual = require(\"fbjs/lib/areEqual\");\nvar invariant = require('invariant');\nvar warning = require(\"fbjs/lib/warning\");\nfunction normalize(recordSource, selector, response, options, errors) {\n  var dataID = selector.dataID,\n    node = selector.node,\n    variables = selector.variables;\n  var normalizer = new RelayResponseNormalizer(recordSource, variables, options);\n  return normalizer.normalizeResponse(node, dataID, response, errors);\n}\nvar RelayResponseNormalizer = /*#__PURE__*/function () {\n  function RelayResponseNormalizer(recordSource, variables, options) {\n    this._actorIdentifier = options.actorIdentifier;\n    this._getDataId = options.getDataID;\n    this._handleFieldPayloads = [];\n    this._treatMissingFieldsAsNull = options.treatMissingFieldsAsNull;\n    this._incrementalPlaceholders = [];\n    this._isClientExtension = false;\n    this._isUnmatchedAbstractType = false;\n    this._followupPayloads = [];\n    this._path = options.path ? (0, _toConsumableArray2[\"default\"])(options.path) : [];\n    this._recordSource = recordSource;\n    this._variables = variables;\n    this._shouldProcessClientComponents = options.shouldProcessClientComponents;\n  }\n  var _proto = RelayResponseNormalizer.prototype;\n  _proto.normalizeResponse = function normalizeResponse(node, dataID, data, errors) {\n    var record = this._recordSource.get(dataID);\n    !record ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Expected root record `%s` to exist.', dataID) : invariant(false) : void 0;\n    this._assignClientAbstractTypes(node);\n    this._errorTrie = buildErrorTrie(errors);\n    this._traverseSelections(node, record, data);\n    return {\n      errors: errors,\n      fieldPayloads: this._handleFieldPayloads,\n      incrementalPlaceholders: this._incrementalPlaceholders,\n      followupPayloads: this._followupPayloads,\n      source: this._recordSource,\n      isFinal: false\n    };\n  };\n  _proto._assignClientAbstractTypes = function _assignClientAbstractTypes(node) {\n    var clientAbstractTypes = node.clientAbstractTypes;\n    if (clientAbstractTypes != null) {\n      for (var _i = 0, _Object$keys = Object.keys(clientAbstractTypes); _i < _Object$keys.length; _i++) {\n        var abstractType = _Object$keys[_i];\n        var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(clientAbstractTypes[abstractType]),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var concreteType = _step.value;\n            var typeID = generateTypeID(concreteType);\n            var typeRecord = this._recordSource.get(typeID);\n            if (typeRecord == null) {\n              typeRecord = RelayModernRecord.create(typeID, TYPE_SCHEMA_TYPE);\n              this._recordSource.set(typeID, typeRecord);\n            }\n            RelayModernRecord.setValue(typeRecord, abstractType, true);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n  };\n  _proto._getVariableValue = function _getVariableValue(name) {\n    !this._variables.hasOwnProperty(name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Undefined variable `%s`.', name) : invariant(false) : void 0;\n    return this._variables[name];\n  };\n  _proto._getRecordType = function _getRecordType(data) {\n    var typeName = data[TYPENAME_KEY];\n    !(typeName != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Expected a typename for record `%s`.', JSON.stringify(data, null, 2)) : invariant(false) : void 0;\n    return typeName;\n  };\n  _proto._traverseSelections = function _traverseSelections(node, record, data) {\n    for (var i = 0; i < node.selections.length; i++) {\n      var selection = node.selections[i];\n      switch (selection.kind) {\n        case SCALAR_FIELD:\n        case LINKED_FIELD:\n          this._normalizeField(selection, record, data);\n          break;\n        case CONDITION:\n          var conditionValue = Boolean(this._getVariableValue(selection.condition));\n          if (conditionValue === selection.passingValue) {\n            this._traverseSelections(selection, record, data);\n          }\n          break;\n        case FRAGMENT_SPREAD:\n          {\n            var prevVariables = this._variables;\n            this._variables = getLocalVariables(this._variables, selection.fragment.argumentDefinitions, selection.args);\n            this._traverseSelections(selection.fragment, record, data);\n            this._variables = prevVariables;\n            break;\n          }\n        case INLINE_FRAGMENT:\n          {\n            var abstractKey = selection.abstractKey;\n            if (abstractKey == null) {\n              var typeName = RelayModernRecord.getType(record);\n              if (typeName === selection.type) {\n                this._traverseSelections(selection, record, data);\n              }\n            } else {\n              var implementsInterface = data.hasOwnProperty(abstractKey);\n              var _typeName = RelayModernRecord.getType(record);\n              var typeID = generateTypeID(_typeName);\n              var typeRecord = this._recordSource.get(typeID);\n              if (typeRecord == null) {\n                typeRecord = RelayModernRecord.create(typeID, TYPE_SCHEMA_TYPE);\n                this._recordSource.set(typeID, typeRecord);\n              }\n              RelayModernRecord.setValue(typeRecord, abstractKey, implementsInterface);\n              if (implementsInterface) {\n                this._traverseSelections(selection, record, data);\n              }\n            }\n            break;\n          }\n        case TYPE_DISCRIMINATOR:\n          {\n            var _abstractKey = selection.abstractKey;\n            var _implementsInterface = data.hasOwnProperty(_abstractKey);\n            var _typeName2 = RelayModernRecord.getType(record);\n            var _typeID = generateTypeID(_typeName2);\n            var _typeRecord = this._recordSource.get(_typeID);\n            if (_typeRecord == null) {\n              _typeRecord = RelayModernRecord.create(_typeID, TYPE_SCHEMA_TYPE);\n              this._recordSource.set(_typeID, _typeRecord);\n            }\n            RelayModernRecord.setValue(_typeRecord, _abstractKey, _implementsInterface);\n            break;\n          }\n        case LINKED_HANDLE:\n        case SCALAR_HANDLE:\n          var args = selection.args ? getArgumentValues(selection.args, this._variables) : {};\n          var fieldKey = getStorageKey(selection, this._variables);\n          var handleKey = getHandleStorageKey(selection, this._variables);\n          this._handleFieldPayloads.push({\n            args: args,\n            dataID: RelayModernRecord.getDataID(record),\n            fieldKey: fieldKey,\n            handle: selection.handle,\n            handleKey: handleKey,\n            handleArgs: selection.handleArgs ? getArgumentValues(selection.handleArgs, this._variables) : {}\n          });\n          break;\n        case MODULE_IMPORT:\n          this._normalizeModuleImport(selection, record, data);\n          break;\n        case DEFER:\n          this._normalizeDefer(selection, record, data);\n          break;\n        case STREAM:\n          this._normalizeStream(selection, record, data);\n          break;\n        case CLIENT_EXTENSION:\n          var isClientExtension = this._isClientExtension;\n          this._isClientExtension = true;\n          this._traverseSelections(selection, record, data);\n          this._isClientExtension = isClientExtension;\n          break;\n        case CLIENT_COMPONENT:\n          if (this._shouldProcessClientComponents === false) {\n            break;\n          }\n          this._traverseSelections(selection.fragment, record, data);\n          break;\n        case ACTOR_CHANGE:\n          this._normalizeActorChange(selection, record, data);\n          break;\n        case RELAY_RESOLVER:\n          this._normalizeResolver(selection, record, data);\n          break;\n        case RELAY_LIVE_RESOLVER:\n          this._normalizeResolver(selection, record, data);\n          break;\n        case CLIENT_EDGE_TO_CLIENT_OBJECT:\n          this._normalizeResolver(selection.backingField, record, data);\n          break;\n        default:\n          selection;\n          !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Unexpected ast kind `%s`.', selection.kind) : invariant(false) : void 0;\n      }\n    }\n  };\n  _proto._normalizeResolver = function _normalizeResolver(resolver, record, data) {\n    if (resolver.fragment != null) {\n      this._traverseSelections(resolver.fragment, record, data);\n    }\n  };\n  _proto._normalizeDefer = function _normalizeDefer(defer, record, data) {\n    var isDeferred = defer[\"if\"] === null || this._getVariableValue(defer[\"if\"]);\n    if (process.env.NODE_ENV !== \"production\") {\n      process.env.NODE_ENV !== \"production\" ? warning(typeof isDeferred === 'boolean', 'RelayResponseNormalizer: Expected value for @defer `if` argument to ' + 'be a boolean, got `%s`.', isDeferred) : void 0;\n    }\n    if (isDeferred === false) {\n      this._traverseSelections(defer, record, data);\n    } else {\n      this._incrementalPlaceholders.push({\n        kind: 'defer',\n        data: data,\n        label: defer.label,\n        path: (0, _toConsumableArray2[\"default\"])(this._path),\n        selector: createNormalizationSelector(defer, RelayModernRecord.getDataID(record), this._variables),\n        typeName: RelayModernRecord.getType(record),\n        actorIdentifier: this._actorIdentifier\n      });\n    }\n  };\n  _proto._normalizeStream = function _normalizeStream(stream, record, data) {\n    this._traverseSelections(stream, record, data);\n    var isStreamed = stream[\"if\"] === null || this._getVariableValue(stream[\"if\"]);\n    if (process.env.NODE_ENV !== \"production\") {\n      process.env.NODE_ENV !== \"production\" ? warning(typeof isStreamed === 'boolean', 'RelayResponseNormalizer: Expected value for @stream `if` argument ' + 'to be a boolean, got `%s`.', isStreamed) : void 0;\n    }\n    if (isStreamed === true) {\n      this._incrementalPlaceholders.push({\n        kind: 'stream',\n        label: stream.label,\n        path: (0, _toConsumableArray2[\"default\"])(this._path),\n        parentID: RelayModernRecord.getDataID(record),\n        node: stream,\n        variables: this._variables,\n        actorIdentifier: this._actorIdentifier\n      });\n    }\n  };\n  _proto._normalizeModuleImport = function _normalizeModuleImport(moduleImport, record, data) {\n    !(typeof data === 'object' && data) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected data for @module to be an object.') : invariant(false) : void 0;\n    var typeName = RelayModernRecord.getType(record);\n    var componentKey = getModuleComponentKey(moduleImport.documentName);\n    var componentReference = moduleImport.componentModuleProvider || data[componentKey];\n    RelayModernRecord.setValue(record, componentKey, componentReference !== null && componentReference !== void 0 ? componentReference : null);\n    var operationKey = getModuleOperationKey(moduleImport.documentName);\n    var operationReference = moduleImport.operationModuleProvider || data[operationKey];\n    RelayModernRecord.setValue(record, operationKey, operationReference !== null && operationReference !== void 0 ? operationReference : null);\n    if (operationReference != null) {\n      this._followupPayloads.push({\n        kind: 'ModuleImportPayload',\n        args: moduleImport.args,\n        data: data,\n        dataID: RelayModernRecord.getDataID(record),\n        operationReference: operationReference,\n        path: (0, _toConsumableArray2[\"default\"])(this._path),\n        typeName: typeName,\n        variables: this._variables,\n        actorIdentifier: this._actorIdentifier\n      });\n    }\n  };\n  _proto._normalizeField = function _normalizeField(selection, record, data) {\n    !(typeof data === 'object' && data) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'writeField(): Expected data for field `%s` to be an object.', selection.name) : invariant(false) : void 0;\n    var responseKey = selection.alias || selection.name;\n    var storageKey = getStorageKey(selection, this._variables);\n    var fieldValue = data[responseKey];\n    if (fieldValue == null) {\n      if (fieldValue === undefined) {\n        var isOptionalField = this._isClientExtension || this._isUnmatchedAbstractType;\n        if (isOptionalField) {\n          return;\n        } else if (!this._treatMissingFieldsAsNull) {\n          if (process.env.NODE_ENV !== \"production\") {\n            process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayResponseNormalizer: Payload did not contain a value ' + 'for field `%s: %s`. Check that you are parsing with the same ' + 'query that was used to fetch the payload.', responseKey, storageKey) : void 0;\n          }\n          return;\n        }\n      }\n      if (process.env.NODE_ENV !== \"production\") {\n        if (selection.kind === SCALAR_FIELD) {\n          this._validateConflictingFieldsWithIdenticalId(record, storageKey, null);\n        }\n      }\n      RelayModernRecord.setValue(record, storageKey, null);\n      var errorTrie = this._errorTrie;\n      if (errorTrie != null) {\n        var errors = getErrorsByKey(errorTrie, responseKey);\n        if (errors != null) {\n          RelayModernRecord.setErrors(record, storageKey, errors);\n        }\n      }\n      return;\n    }\n    if (selection.kind === SCALAR_FIELD) {\n      if (process.env.NODE_ENV !== \"production\") {\n        this._validateConflictingFieldsWithIdenticalId(record, storageKey, fieldValue);\n      }\n      RelayModernRecord.setValue(record, storageKey, fieldValue);\n    } else if (selection.kind === LINKED_FIELD) {\n      this._path.push(responseKey);\n      var oldErrorTrie = this._errorTrie;\n      this._errorTrie = oldErrorTrie == null ? null : getNestedErrorTrieByKey(oldErrorTrie, responseKey);\n      if (selection.plural) {\n        this._normalizePluralLink(selection, record, storageKey, fieldValue);\n      } else {\n        this._normalizeLink(selection, record, storageKey, fieldValue);\n      }\n      this._errorTrie = oldErrorTrie;\n      this._path.pop();\n    } else {\n      selection;\n      !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Unexpected ast kind `%s` during normalization.', selection.kind) : invariant(false) : void 0;\n    }\n  };\n  _proto._normalizeActorChange = function _normalizeActorChange(selection, record, data) {\n    var _field$concreteType;\n    var field = selection.linkedField;\n    !(typeof data === 'object' && data) ? process.env.NODE_ENV !== \"production\" ? invariant(false, '_normalizeActorChange(): Expected data for field `%s` to be an object.', field.name) : invariant(false) : void 0;\n    var responseKey = field.alias || field.name;\n    var storageKey = getStorageKey(field, this._variables);\n    var fieldValue = data[responseKey];\n    if (fieldValue == null) {\n      if (fieldValue === undefined) {\n        var isOptionalField = this._isClientExtension || this._isUnmatchedAbstractType;\n        if (isOptionalField) {\n          return;\n        } else if (!this._treatMissingFieldsAsNull) {\n          if (process.env.NODE_ENV !== \"production\") {\n            process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayResponseNormalizer: Payload did not contain a value ' + 'for field `%s: %s`. Check that you are parsing with the same ' + 'query that was used to fetch the payload.', responseKey, storageKey) : void 0;\n          }\n          return;\n        }\n      }\n      RelayModernRecord.setValue(record, storageKey, null);\n      return;\n    }\n    var actorIdentifier = getActorIdentifierFromPayload(fieldValue);\n    if (actorIdentifier == null) {\n      if (process.env.NODE_ENV !== \"production\") {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayResponseNormalizer: Payload did not contain a value ' + 'for field `%s`. Check that you are parsing with the same ' + 'query that was used to fetch the payload. Payload is `%s`.', ACTOR_IDENTIFIER_FIELD_NAME, JSON.stringify(fieldValue, null, 2)) : void 0;\n      }\n      RelayModernRecord.setValue(record, storageKey, null);\n      return;\n    }\n    var typeName = (_field$concreteType = field.concreteType) !== null && _field$concreteType !== void 0 ? _field$concreteType : this._getRecordType(fieldValue);\n    var nextID = this._getDataId(fieldValue, typeName) || RelayModernRecord.getLinkedRecordID(record, storageKey) || generateClientID(RelayModernRecord.getDataID(record), storageKey);\n    !(typeof nextID === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected id on field `%s` to be a string.', storageKey) : invariant(false) : void 0;\n    RelayModernRecord.setActorLinkedRecordID(record, storageKey, actorIdentifier, nextID);\n    this._followupPayloads.push({\n      kind: 'ActorPayload',\n      data: fieldValue,\n      dataID: nextID,\n      path: [].concat((0, _toConsumableArray2[\"default\"])(this._path), [responseKey]),\n      typeName: typeName,\n      variables: this._variables,\n      node: field,\n      actorIdentifier: actorIdentifier\n    });\n  };\n  _proto._normalizeLink = function _normalizeLink(field, record, storageKey, fieldValue) {\n    var _field$concreteType2;\n    !(typeof fieldValue === 'object' && fieldValue) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected data for field `%s` to be an object.', storageKey) : invariant(false) : void 0;\n    var nextID = this._getDataId(fieldValue, (_field$concreteType2 = field.concreteType) !== null && _field$concreteType2 !== void 0 ? _field$concreteType2 : this._getRecordType(fieldValue)) || RelayModernRecord.getLinkedRecordID(record, storageKey) || generateClientID(RelayModernRecord.getDataID(record), storageKey);\n    !(typeof nextID === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected id on field `%s` to be a string.', storageKey) : invariant(false) : void 0;\n    if (process.env.NODE_ENV !== \"production\") {\n      this._validateConflictingLinkedFieldsWithIdenticalId(RelayModernRecord.getLinkedRecordID(record, storageKey), nextID, storageKey);\n    }\n    RelayModernRecord.setLinkedRecordID(record, storageKey, nextID);\n    var nextRecord = this._recordSource.get(nextID);\n    if (!nextRecord) {\n      var typeName = field.concreteType || this._getRecordType(fieldValue);\n      nextRecord = RelayModernRecord.create(nextID, typeName);\n      this._recordSource.set(nextID, nextRecord);\n    } else if (process.env.NODE_ENV !== \"production\") {\n      this._validateRecordType(nextRecord, field, fieldValue);\n    }\n    this._traverseSelections(field, nextRecord, fieldValue);\n  };\n  _proto._normalizePluralLink = function _normalizePluralLink(field, record, storageKey, fieldValue) {\n    var _this = this;\n    !Array.isArray(fieldValue) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected data for field `%s` to be an array ' + 'of objects.', storageKey) : invariant(false) : void 0;\n    var prevIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);\n    var nextIDs = [];\n    fieldValue.forEach(function (item, nextIndex) {\n      var _field$concreteType3;\n      if (item == null) {\n        nextIDs.push(item);\n        return;\n      }\n      _this._path.push(String(nextIndex));\n      var oldErrorTrie = _this._errorTrie;\n      _this._errorTrie = oldErrorTrie == null ? null : getNestedErrorTrieByKey(oldErrorTrie, nextIndex);\n      !(typeof item === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected elements for field `%s` to be ' + 'objects.', storageKey) : invariant(false) : void 0;\n      var nextID = _this._getDataId(item, (_field$concreteType3 = field.concreteType) !== null && _field$concreteType3 !== void 0 ? _field$concreteType3 : _this._getRecordType(item)) || prevIDs && prevIDs[nextIndex] || generateClientID(RelayModernRecord.getDataID(record), storageKey, nextIndex);\n      !(typeof nextID === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected id of elements of field `%s` to ' + 'be strings.', storageKey) : invariant(false) : void 0;\n      nextIDs.push(nextID);\n      var nextRecord = _this._recordSource.get(nextID);\n      if (!nextRecord) {\n        var typeName = field.concreteType || _this._getRecordType(item);\n        nextRecord = RelayModernRecord.create(nextID, typeName);\n        _this._recordSource.set(nextID, nextRecord);\n      } else if (process.env.NODE_ENV !== \"production\") {\n        _this._validateRecordType(nextRecord, field, item);\n      }\n      if (process.env.NODE_ENV !== \"production\") {\n        if (prevIDs) {\n          _this._validateConflictingLinkedFieldsWithIdenticalId(prevIDs[nextIndex], nextID, storageKey);\n        }\n      }\n      _this._traverseSelections(field, nextRecord, item);\n      _this._errorTrie = oldErrorTrie;\n      _this._path.pop();\n    });\n    RelayModernRecord.setLinkedRecordIDs(record, storageKey, nextIDs);\n  };\n  _proto._validateRecordType = function _validateRecordType(record, field, payload) {\n    var _field$concreteType4;\n    var typeName = (_field$concreteType4 = field.concreteType) !== null && _field$concreteType4 !== void 0 ? _field$concreteType4 : this._getRecordType(payload);\n    var dataID = RelayModernRecord.getDataID(record);\n    process.env.NODE_ENV !== \"production\" ? warning(isClientID(dataID) && dataID !== ROOT_ID || RelayModernRecord.getType(record) === typeName, 'RelayResponseNormalizer: Invalid record `%s`. Expected %s to be ' + 'consistent, but the record was assigned conflicting types `%s` ' + 'and `%s`. The GraphQL server likely violated the globally unique ' + 'id requirement by returning the same id for different objects.', dataID, TYPENAME_KEY, RelayModernRecord.getType(record), typeName) : void 0;\n  };\n  _proto._validateConflictingFieldsWithIdenticalId = function _validateConflictingFieldsWithIdenticalId(record, storageKey, fieldValue) {\n    if (process.env.NODE_ENV !== \"production\") {\n      var dataID = RelayModernRecord.getDataID(record);\n      var previousValue = RelayModernRecord.getValue(record, storageKey);\n      process.env.NODE_ENV !== \"production\" ? warning(storageKey === TYPENAME_KEY || previousValue === undefined || areEqual(previousValue, fieldValue), 'RelayResponseNormalizer: Invalid record. The record contains two ' + 'instances of the same id: `%s` with conflicting field, %s and its values: %s and %s. ' + 'If two fields are different but share ' + 'the same id, one field will overwrite the other.', dataID, storageKey, previousValue, fieldValue) : void 0;\n    }\n  };\n  _proto._validateConflictingLinkedFieldsWithIdenticalId = function _validateConflictingLinkedFieldsWithIdenticalId(prevID, nextID, storageKey) {\n    if (process.env.NODE_ENV !== \"production\") {\n      process.env.NODE_ENV !== \"production\" ? warning(prevID === undefined || prevID === nextID, 'RelayResponseNormalizer: Invalid record. The record contains ' + 'references to the conflicting field, %s and its id values: %s and %s. ' + 'We need to make sure that the record the field points ' + 'to remains consistent or one field will overwrite the other.', storageKey, prevID, nextID) : void 0;\n    }\n  };\n  return RelayResponseNormalizer;\n}();\nmodule.exports = {\n  normalize: normalize\n};"],"names":["_interopRequireDefault","require","_createForOfIteratorHelper2","_toConsumableArray2","_require","getActorIdentifierFromPayload","ACTOR_IDENTIFIER_FIELD_NAME","_require2","ACTOR_CHANGE","CLIENT_COMPONENT","CLIENT_EDGE_TO_CLIENT_OBJECT","CLIENT_EXTENSION","CONDITION","DEFER","FRAGMENT_SPREAD","INLINE_FRAGMENT","LINKED_FIELD","LINKED_HANDLE","MODULE_IMPORT","RELAY_LIVE_RESOLVER","RELAY_RESOLVER","SCALAR_FIELD","SCALAR_HANDLE","STREAM","TYPE_DISCRIMINATOR","_require3","generateClientID","getLocalVariables","isClientID","_require5","buildErrorTrie","getErrorsByKey","getNestedErrorTrieByKey","RelayModernRecord","createNormalizationSelector","_require7","TYPENAME_KEY","ROOT_ID","getArgumentValues","getHandleStorageKey","getModuleComponentKey","getModuleOperationKey","getStorageKey","_require8","TYPE_SCHEMA_TYPE","generateTypeID","invariant","RelayResponseNormalizer","recordSource","variables","options","this","_actorIdentifier","actorIdentifier","_getDataId","getDataID","_handleFieldPayloads","_treatMissingFieldsAsNull","treatMissingFieldsAsNull","_incrementalPlaceholders","_isClientExtension","_isUnmatchedAbstractType","_followupPayloads","_path","path","_recordSource","_variables","_shouldProcessClientComponents","shouldProcessClientComponents","_proto","prototype","normalizeResponse","node","dataID","data","errors","record","get","_assignClientAbstractTypes","_errorTrie","_traverseSelections","fieldPayloads","incrementalPlaceholders","followupPayloads","source","isFinal","clientAbstractTypes","_i","_Object$keys","Object","keys","length","_step","abstractType","_iterator","s","n","done","concreteType","value","typeID","typeRecord","create","set","setValue","err","e","f","_getVariableValue","name","hasOwnProperty","_getRecordType","typeName","i","selections","selection","kind","_normalizeField","Boolean","condition","passingValue","prevVariables","fragment","argumentDefinitions","args","abstractKey","getType","type","implementsInterface","_typeName","_abstractKey","_implementsInterface","_typeName2","_typeID","_typeRecord","fieldKey","handleKey","push","handle","handleArgs","_normalizeModuleImport","_normalizeDefer","_normalizeStream","isClientExtension","_normalizeActorChange","_normalizeResolver","backingField","resolver","defer","label","selector","stream","parentID","moduleImport","componentKey","documentName","componentReference","componentModuleProvider","operationKey","operationReference","operationModuleProvider","responseKey","alias","storageKey","fieldValue","oldErrorTrie","plural","_normalizePluralLink","_normalizeLink","pop","undefined","errorTrie","setErrors","_field$concreteType","field","linkedField","nextID","getLinkedRecordID","setActorLinkedRecordID","concat","_field$concreteType2","setLinkedRecordID","nextRecord","_this","Array","isArray","prevIDs","getLinkedRecordIDs","nextIDs","forEach","item","nextIndex","_field$concreteType3","String","setLinkedRecordIDs","_validateRecordType","payload","_field$concreteType4","_validateConflictingFieldsWithIdenticalId","_validateConflictingLinkedFieldsWithIdenticalId","prevID","module","exports","normalize","response"],"sourceRoot":""}